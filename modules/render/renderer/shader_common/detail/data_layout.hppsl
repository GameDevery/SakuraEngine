#pragma once
#include "foreach_field"

namespace skr::data_layout
{
struct DataLayout;

template <typename T>
struct Reader
{
public:

protected:
    friend struct DataLayout;
    Reader(ByteBuffer<CacheFlags::ReadOnly> b)
        : buffer(b)
    {
        instance_count = buffer.Load(0);
    }
    ByteBuffer<CacheFlags::ReadOnly> buffer;
    uint32_t instance_count;
    uint32_t field_count;
};

struct DataLayout
{
    template <typename T>
    static Reader<T> CreateReader(ByteBuffer<CacheFlags::ReadOnly> b)
    {
        Reader<T> reader(b);
        reader.field_count = ValidateFields<T>();
        return reader;
    }

    template <typename T>
    static uint ValidateFields()
    {
        uint field_count = 0;
        auto t = T();
        skr::data_layout::foreach_field(t, [&](auto field, const auto i) {
            static_assert(is_float_family_v<decltype(field)>, "!!!");
            field_count += 1;
        });
        return field_count;
    }
};

struct GPUSceneInstance
{
    float4 color;
    float4x4 transform;
};

} // namespace skr::data_layout