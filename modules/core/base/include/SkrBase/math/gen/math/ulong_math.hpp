//! *************************************************************************
//! **  This file is auto-generated by gen_math, do not edit it manually.  **
//! *************************************************************************

#pragma once
#include "../vec/bool_vec.hpp"
#include "../vec/ulong_vec.hpp"
#include "../../math_constants.hpp"

namespace skr {
inline namespace math {
// abs
inline uint64_t abs(uint64_t v) { return ::std::abs(v); }
inline ulong2 abs(const ulong2& v) { return {::std::abs(v.x), ::std::abs(v.y)}; }
inline ulong3 abs(const ulong3& v) { return {::std::abs(v.x), ::std::abs(v.y), ::std::abs(v.z)}; }
inline ulong4 abs(const ulong4& v) { return {::std::abs(v.x), ::std::abs(v.y), ::std::abs(v.z), ::std::abs(v.w)}; }

// max
inline uint64_t max(uint64_t v1, uint64_t v2) { return ::std::max(v1, v2); }
inline ulong2 max(const ulong2& v1, const ulong2& v2) { return {::std::max(v1.x, v2.x), ::std::max(v1.y, v2.y)}; }
inline ulong3 max(const ulong3& v1, const ulong3& v2) { return {::std::max(v1.x, v2.x), ::std::max(v1.y, v2.y), ::std::max(v1.z, v2.z)}; }
inline ulong4 max(const ulong4& v1, const ulong4& v2) { return {::std::max(v1.x, v2.x), ::std::max(v1.y, v2.y), ::std::max(v1.z, v2.z), ::std::max(v1.w, v2.w)}; }

// min
inline uint64_t min(uint64_t v1, uint64_t v2) { return ::std::min(v1, v2); }
inline ulong2 min(const ulong2& v1, const ulong2& v2) { return {::std::min(v1.x, v2.x), ::std::min(v1.y, v2.y)}; }
inline ulong3 min(const ulong3& v1, const ulong3& v2) { return {::std::min(v1.x, v2.x), ::std::min(v1.y, v2.y), ::std::min(v1.z, v2.z)}; }
inline ulong4 min(const ulong4& v1, const ulong4& v2) { return {::std::min(v1.x, v2.x), ::std::min(v1.y, v2.y), ::std::min(v1.z, v2.z), ::std::min(v1.w, v2.w)}; }

// clamp
inline uint64_t clamp(uint64_t v, uint64_t min, uint64_t max) { return ::std::clamp(v, min, max); }
inline ulong2 clamp(const ulong2& v, const ulong2& min, const ulong2& max) { return {::std::clamp(v.x, min.x, max.x), ::std::clamp(v.y, min.y, max.y)}; }
inline ulong3 clamp(const ulong3& v, const ulong3& min, const ulong3& max) { return {::std::clamp(v.x, min.x, max.x), ::std::clamp(v.y, min.y, max.y), ::std::clamp(v.z, min.z, max.z)}; }
inline ulong4 clamp(const ulong4& v, const ulong4& min, const ulong4& max) { return {::std::clamp(v.x, min.x, max.x), ::std::clamp(v.y, min.y, max.y), ::std::clamp(v.z, min.z, max.z), ::std::clamp(v.w, min.w, max.w)}; }

// select
inline ulong2 select(bool2 c, ulong2 if_true, ulong2 if_false) { return { c.x ? if_true.x : if_false.x, c.y ? if_true.y : if_false.y }; }
inline ulong3 select(bool3 c, ulong3 if_true, ulong3 if_false) { return { c.x ? if_true.x : if_false.x, c.y ? if_true.y : if_false.y, c.z ? if_true.z : if_false.z }; }
inline ulong4 select(bool4 c, ulong4 if_true, ulong4 if_false) { return { c.x ? if_true.x : if_false.x, c.y ? if_true.y : if_false.y, c.z ? if_true.z : if_false.z, c.w ? if_true.w : if_false.w }; }

}
}
