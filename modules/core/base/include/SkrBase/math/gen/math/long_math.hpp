//! *************************************************************************
//! **  This file is auto-generated by gen_math, do not edit it manually.  **
//! *************************************************************************

#pragma once
#include "../vec/bool_vec.hpp"
#include "../vec/long_vec.hpp"
#include "../../math_constants.hpp"

namespace skr {
inline namespace math {
// abs
inline int64_t abs(int64_t v) { return v < int64_t(0) ? -v : v; }
inline long2 abs(const long2 &v) { return {abs(v.x), abs(v.y)}; }
inline long3 abs(const long3 &v) { return {abs(v.x), abs(v.y), abs(v.z)}; }
inline long4 abs(const long4 &v) { return {abs(v.x), abs(v.y), abs(v.z), abs(v.w)}; }

// max
inline int64_t max(int64_t v1, int64_t v2) { return ::std::max(v1, v2); }
inline long2 max(const long2& v1, const long2& v2) { return {::std::max(v1.x, v2.x), ::std::max(v1.y, v2.y)}; }
inline long3 max(const long3& v1, const long3& v2) { return {::std::max(v1.x, v2.x), ::std::max(v1.y, v2.y), ::std::max(v1.z, v2.z)}; }
inline long4 max(const long4& v1, const long4& v2) { return {::std::max(v1.x, v2.x), ::std::max(v1.y, v2.y), ::std::max(v1.z, v2.z), ::std::max(v1.w, v2.w)}; }

// min
inline int64_t min(int64_t v1, int64_t v2) { return ::std::min(v1, v2); }
inline long2 min(const long2& v1, const long2& v2) { return {::std::min(v1.x, v2.x), ::std::min(v1.y, v2.y)}; }
inline long3 min(const long3& v1, const long3& v2) { return {::std::min(v1.x, v2.x), ::std::min(v1.y, v2.y), ::std::min(v1.z, v2.z)}; }
inline long4 min(const long4& v1, const long4& v2) { return {::std::min(v1.x, v2.x), ::std::min(v1.y, v2.y), ::std::min(v1.z, v2.z), ::std::min(v1.w, v2.w)}; }

// clamp
inline int64_t clamp(const int64_t &v, const int64_t &min, const int64_t &max) { return v < min ? min : v > max ? max : v; }
inline long2 clamp(const long2 &v, const long2 &min, const long2 &max) { return {clamp(v.x, min.x, max.x), clamp(v.y, min.y, max.y)}; }
inline long3 clamp(const long3 &v, const long3 &min, const long3 &max) { return {clamp(v.x, min.x, max.x), clamp(v.y, min.y, max.y), clamp(v.z, min.z, max.z)}; }
inline long4 clamp(const long4 &v, const long4 &min, const long4 &max) { return {clamp(v.x, min.x, max.x), clamp(v.y, min.y, max.y), clamp(v.z, min.z, max.z), clamp(v.w, min.w, max.w)}; }

// select
inline long2 select(bool2 c, long2 if_true, long2 if_false) { return { c.x ? if_true.x : if_false.x, c.y ? if_true.y : if_false.y }; }
inline long3 select(bool3 c, long3 if_true, long3 if_false) { return { c.x ? if_true.x : if_false.x, c.y ? if_true.y : if_false.y, c.z ? if_true.z : if_false.z }; }
inline long4 select(bool4 c, long4 if_true, long4 if_false) { return { c.x ? if_true.x : if_false.x, c.y ? if_true.y : if_false.y, c.z ? if_true.z : if_false.z, c.w ? if_true.w : if_false.w }; }

}
}
