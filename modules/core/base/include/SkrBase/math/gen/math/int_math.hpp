//! *************************************************************************
//! **  This file is auto-generated by gen_math, do not edit it manually.  **
//! *************************************************************************

#pragma once
#include "../vec/bool_vec.hpp"
#include "../vec/int_vec.hpp"
#include "../../math_constants.hpp"

namespace skr {
inline namespace math {
// abs
inline int32_t abs(int32_t v) { return v < int32_t(0) ? -v : v; }
inline int2 abs(const int2 &v) { return {abs(v.x), abs(v.y)}; }
inline int3 abs(const int3 &v) { return {abs(v.x), abs(v.y), abs(v.z)}; }
inline int4 abs(const int4 &v) { return {abs(v.x), abs(v.y), abs(v.z), abs(v.w)}; }

// max
inline int32_t max(int32_t v1, int32_t v2) { return ::std::max(v1, v2); }
inline int2 max(const int2& v1, const int2& v2) { return {::std::max(v1.x, v2.x), ::std::max(v1.y, v2.y)}; }
inline int3 max(const int3& v1, const int3& v2) { return {::std::max(v1.x, v2.x), ::std::max(v1.y, v2.y), ::std::max(v1.z, v2.z)}; }
inline int4 max(const int4& v1, const int4& v2) { return {::std::max(v1.x, v2.x), ::std::max(v1.y, v2.y), ::std::max(v1.z, v2.z), ::std::max(v1.w, v2.w)}; }

// min
inline int32_t min(int32_t v1, int32_t v2) { return ::std::min(v1, v2); }
inline int2 min(const int2& v1, const int2& v2) { return {::std::min(v1.x, v2.x), ::std::min(v1.y, v2.y)}; }
inline int3 min(const int3& v1, const int3& v2) { return {::std::min(v1.x, v2.x), ::std::min(v1.y, v2.y), ::std::min(v1.z, v2.z)}; }
inline int4 min(const int4& v1, const int4& v2) { return {::std::min(v1.x, v2.x), ::std::min(v1.y, v2.y), ::std::min(v1.z, v2.z), ::std::min(v1.w, v2.w)}; }

// clamp
inline int32_t clamp(int32_t v, int32_t min, int32_t max) { return ::std::clamp(v, min, max); }
inline int2 clamp(const int2& v, const int2& min, const int2& max) { return {::std::clamp(v.x, min.x, max.x), ::std::clamp(v.y, min.y, max.y)}; }
inline int3 clamp(const int3& v, const int3& min, const int3& max) { return {::std::clamp(v.x, min.x, max.x), ::std::clamp(v.y, min.y, max.y), ::std::clamp(v.z, min.z, max.z)}; }
inline int4 clamp(const int4& v, const int4& min, const int4& max) { return {::std::clamp(v.x, min.x, max.x), ::std::clamp(v.y, min.y, max.y), ::std::clamp(v.z, min.z, max.z), ::std::clamp(v.w, min.w, max.w)}; }

// select
inline int2 select(bool2 c, int2 if_true, int2 if_false) { return { c.x ? if_true.x : if_false.x, c.y ? if_true.y : if_false.y }; }
inline int3 select(bool3 c, int3 if_true, int3 if_false) { return { c.x ? if_true.x : if_false.x, c.y ? if_true.y : if_false.y, c.z ? if_true.z : if_false.z }; }
inline int4 select(bool4 c, int4 if_true, int4 if_false) { return { c.x ? if_true.x : if_false.x, c.y ? if_true.y : if_false.y, c.z ? if_true.z : if_false.z, c.w ? if_true.w : if_false.w }; }

}
}
