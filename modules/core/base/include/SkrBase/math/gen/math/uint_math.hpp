//! *************************************************************************
//! **  This file is auto-generated by gen_math, do not edit it manually.  **
//! *************************************************************************

#pragma once
#include "../vec/bool_vec.hpp"
#include "../vec/uint_vec.hpp"
#include "../../math_constants.hpp"

namespace skr {
inline namespace math {
// abs
inline uint32_t abs(uint32_t v) { return v < uint32_t(0) ? -v : v; }
inline uint2 abs(const uint2 &v) { return {abs(v.x), abs(v.y)}; }
inline uint3 abs(const uint3 &v) { return {abs(v.x), abs(v.y), abs(v.z)}; }
inline uint4 abs(const uint4 &v) { return {abs(v.x), abs(v.y), abs(v.z), abs(v.w)}; }

// max
inline uint32_t max(uint32_t v1, uint32_t v2) { return ::std::max(v1, v2); }
inline uint2 max(const uint2& v1, const uint2& v2) { return {::std::max(v1.x, v2.x), ::std::max(v1.y, v2.y)}; }
inline uint3 max(const uint3& v1, const uint3& v2) { return {::std::max(v1.x, v2.x), ::std::max(v1.y, v2.y), ::std::max(v1.z, v2.z)}; }
inline uint4 max(const uint4& v1, const uint4& v2) { return {::std::max(v1.x, v2.x), ::std::max(v1.y, v2.y), ::std::max(v1.z, v2.z), ::std::max(v1.w, v2.w)}; }

// min
inline uint32_t min(uint32_t v1, uint32_t v2) { return ::std::min(v1, v2); }
inline uint2 min(const uint2& v1, const uint2& v2) { return {::std::min(v1.x, v2.x), ::std::min(v1.y, v2.y)}; }
inline uint3 min(const uint3& v1, const uint3& v2) { return {::std::min(v1.x, v2.x), ::std::min(v1.y, v2.y), ::std::min(v1.z, v2.z)}; }
inline uint4 min(const uint4& v1, const uint4& v2) { return {::std::min(v1.x, v2.x), ::std::min(v1.y, v2.y), ::std::min(v1.z, v2.z), ::std::min(v1.w, v2.w)}; }

// clamp
inline uint32_t clamp(uint32_t v, uint32_t min, uint32_t max) { return ::std::clamp(v, min, max); }
inline uint2 clamp(const uint2& v, const uint2& min, const uint2& max) { return {::std::clamp(v.x, min.x, max.x), ::std::clamp(v.y, min.y, max.y)}; }
inline uint3 clamp(const uint3& v, const uint3& min, const uint3& max) { return {::std::clamp(v.x, min.x, max.x), ::std::clamp(v.y, min.y, max.y), ::std::clamp(v.z, min.z, max.z)}; }
inline uint4 clamp(const uint4& v, const uint4& min, const uint4& max) { return {::std::clamp(v.x, min.x, max.x), ::std::clamp(v.y, min.y, max.y), ::std::clamp(v.z, min.z, max.z), ::std::clamp(v.w, min.w, max.w)}; }

// select
inline uint2 select(bool2 c, uint2 if_true, uint2 if_false) { return { c.x ? if_true.x : if_false.x, c.y ? if_true.y : if_false.y }; }
inline uint3 select(bool3 c, uint3 if_true, uint3 if_false) { return { c.x ? if_true.x : if_false.x, c.y ? if_true.y : if_false.y, c.z ? if_true.z : if_false.z }; }
inline uint4 select(bool4 c, uint4 if_true, uint4 if_false) { return { c.x ? if_true.x : if_false.x, c.y ? if_true.y : if_false.y, c.z ? if_true.z : if_false.z, c.w ? if_true.w : if_false.w }; }

}
}
