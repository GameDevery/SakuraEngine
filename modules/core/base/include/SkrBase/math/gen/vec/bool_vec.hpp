//! *************************************************************************
//! **  This file is auto-generated by gen_math, do not edit it manually.  **
//! *************************************************************************

#pragma once
#include <cstdint>
#include <cmath>
#include "../gen_math_fwd.hpp"
#include <SkrBase/misc/debug.h>
#include <SkrBase/misc/hash.hpp>

namespace skr {
struct bool2 {
    bool x, y;
    
    // ctor & dtor
    inline bool2(): x(0), y(0) {}
    inline bool2(bool v): x(v), y(v) {}
    inline bool2(bool v0, bool v1): x(v0), y(v1) {}
    inline ~bool2() = default;
    
    // cast ctor
    bool2(const float2& rhs);
    bool2(const double2& rhs);
    bool2(const int2& rhs);
    bool2(const uint2& rhs);
    bool2(const long2& rhs);
    bool2(const ulong2& rhs);
    
    // copy & move & assign & move assign
    inline bool2(const bool2&) = default;
    inline bool2(bool2&&) = default;
    inline bool2& operator=(const bool2&) = default;
    inline bool2& operator=(bool2&&) = default;
    
    // array assessor
    inline bool& operator[](size_t i) {
        SKR_ASSERT(i >= 0 && i < 2 && "index out of range");
        return reinterpret_cast<bool*>(this)[i];
    }
    inline bool operator[](size_t i) const {
        return const_cast<bool2*>(this)->operator[](i);
    }
    
    // unary operator
    inline bool2 operator!() const { return { !x, !y }; }
    
    // boolean operator
    inline bool2 friend operator&&(const bool2& lhs, const bool2& rhs) { return {lhs.x && rhs.x, lhs.y && rhs.y}; }
    inline bool2 friend operator||(const bool2& lhs, const bool2& rhs) { return {lhs.x || rhs.x, lhs.y || rhs.y}; }
    inline bool2 friend operator==(const bool2& lhs, const bool2& rhs) { return {lhs.x == rhs.x, lhs.y == rhs.y}; }
    inline bool2 friend operator!=(const bool2& lhs, const bool2& rhs) { return {lhs.x != rhs.x, lhs.y != rhs.y}; }
    
    // swizzle
    inline bool2 xx() const { return {x, x}; }
    inline bool2 xy() const { return {x, y}; }
    inline void set_xy(const bool2& v) { x = v.x; y = v.y; }
    inline bool2 yx() const { return {y, x}; }
    inline void set_yx(const bool2& v) { y = v.x; x = v.y; }
    inline bool2 yy() const { return {y, y}; }
    
    // hash
    inline static size_t _skr_hash(const bool2& v) {
        auto hasher = ::skr::Hash<bool>{};
        auto result = hasher(v.x);
        result = ::skr::hash_combine(result, hasher(v.y));
        return result;
    }
};
struct bool3 {
    bool x, y, z;
    
    // ctor & dtor
    inline bool3(): x(0), y(0), z(0) {}
    inline bool3(bool v): x(v), y(v), z(v) {}
    inline bool3(bool v0, bool v1, bool v2): x(v0), y(v1), z(v2) {}
    inline bool3(bool v0, bool2 v1): x(v0), y(v1.x), z(v1.y) {}
    inline bool3(bool2 v0, bool v1): x(v0.x), y(v0.y), z(v1) {}
    inline ~bool3() = default;
    
    // cast ctor
    bool3(const float3& rhs);
    bool3(const double3& rhs);
    bool3(const int3& rhs);
    bool3(const uint3& rhs);
    bool3(const long3& rhs);
    bool3(const ulong3& rhs);
    
    // copy & move & assign & move assign
    inline bool3(const bool3&) = default;
    inline bool3(bool3&&) = default;
    inline bool3& operator=(const bool3&) = default;
    inline bool3& operator=(bool3&&) = default;
    
    // array assessor
    inline bool& operator[](size_t i) {
        SKR_ASSERT(i >= 0 && i < 3 && "index out of range");
        return reinterpret_cast<bool*>(this)[i];
    }
    inline bool operator[](size_t i) const {
        return const_cast<bool3*>(this)->operator[](i);
    }
    
    // unary operator
    inline bool3 operator!() const { return { !x, !y, !z }; }
    
    // boolean operator
    inline bool3 friend operator&&(const bool3& lhs, const bool3& rhs) { return {lhs.x && rhs.x, lhs.y && rhs.y, lhs.z && rhs.z}; }
    inline bool3 friend operator||(const bool3& lhs, const bool3& rhs) { return {lhs.x || rhs.x, lhs.y || rhs.y, lhs.z || rhs.z}; }
    inline bool3 friend operator==(const bool3& lhs, const bool3& rhs) { return {lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z}; }
    inline bool3 friend operator!=(const bool3& lhs, const bool3& rhs) { return {lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z}; }
    
    // swizzle
    inline bool2 xx() const { return {x, x}; }
    inline bool2 xy() const { return {x, y}; }
    inline void set_xy(const bool2& v) { x = v.x; y = v.y; }
    inline bool2 xz() const { return {x, z}; }
    inline void set_xz(const bool2& v) { x = v.x; z = v.y; }
    inline bool2 yx() const { return {y, x}; }
    inline void set_yx(const bool2& v) { y = v.x; x = v.y; }
    inline bool2 yy() const { return {y, y}; }
    inline bool2 yz() const { return {y, z}; }
    inline void set_yz(const bool2& v) { y = v.x; z = v.y; }
    inline bool2 zx() const { return {z, x}; }
    inline void set_zx(const bool2& v) { z = v.x; x = v.y; }
    inline bool2 zy() const { return {z, y}; }
    inline void set_zy(const bool2& v) { z = v.x; y = v.y; }
    inline bool2 zz() const { return {z, z}; }
    inline bool3 xxx() const { return {x, x, x}; }
    inline bool3 xxy() const { return {x, x, y}; }
    inline bool3 xxz() const { return {x, x, z}; }
    inline bool3 xyx() const { return {x, y, x}; }
    inline bool3 xyy() const { return {x, y, y}; }
    inline bool3 xyz() const { return {x, y, z}; }
    inline void set_xyz(const bool3& v) { x = v.x; y = v.y; z = v.z; }
    inline bool3 xzx() const { return {x, z, x}; }
    inline bool3 xzy() const { return {x, z, y}; }
    inline void set_xzy(const bool3& v) { x = v.x; z = v.y; y = v.z; }
    inline bool3 xzz() const { return {x, z, z}; }
    inline bool3 yxx() const { return {y, x, x}; }
    inline bool3 yxy() const { return {y, x, y}; }
    inline bool3 yxz() const { return {y, x, z}; }
    inline void set_yxz(const bool3& v) { y = v.x; x = v.y; z = v.z; }
    inline bool3 yyx() const { return {y, y, x}; }
    inline bool3 yyy() const { return {y, y, y}; }
    inline bool3 yyz() const { return {y, y, z}; }
    inline bool3 yzx() const { return {y, z, x}; }
    inline void set_yzx(const bool3& v) { y = v.x; z = v.y; x = v.z; }
    inline bool3 yzy() const { return {y, z, y}; }
    inline bool3 yzz() const { return {y, z, z}; }
    inline bool3 zxx() const { return {z, x, x}; }
    inline bool3 zxy() const { return {z, x, y}; }
    inline void set_zxy(const bool3& v) { z = v.x; x = v.y; y = v.z; }
    inline bool3 zxz() const { return {z, x, z}; }
    inline bool3 zyx() const { return {z, y, x}; }
    inline void set_zyx(const bool3& v) { z = v.x; y = v.y; x = v.z; }
    inline bool3 zyy() const { return {z, y, y}; }
    inline bool3 zyz() const { return {z, y, z}; }
    inline bool3 zzx() const { return {z, z, x}; }
    inline bool3 zzy() const { return {z, z, y}; }
    inline bool3 zzz() const { return {z, z, z}; }
    
    // hash
    inline static size_t _skr_hash(const bool3& v) {
        auto hasher = ::skr::Hash<bool>{};
        auto result = hasher(v.x);
        result = ::skr::hash_combine(result, hasher(v.y));
        result = ::skr::hash_combine(result, hasher(v.z));
        return result;
    }
};
struct bool4 {
    bool x, y, z, w;
    
    // ctor & dtor
    inline bool4(): x(0), y(0), z(0), w(0) {}
    inline bool4(bool v): x(v), y(v), z(v), w(v) {}
    inline bool4(bool v0, bool v1, bool v2, bool v3): x(v0), y(v1), z(v2), w(v3) {}
    inline bool4(bool v0, bool v1, bool2 v2): x(v0), y(v1), z(v2.x), w(v2.y) {}
    inline bool4(bool v0, bool2 v1, bool v2): x(v0), y(v1.x), z(v1.y), w(v2) {}
    inline bool4(bool v0, bool3 v1): x(v0), y(v1.x), z(v1.y), w(v1.z) {}
    inline bool4(bool2 v0, bool v1, bool v2): x(v0.x), y(v0.y), z(v1), w(v2) {}
    inline bool4(bool2 v0, bool2 v1): x(v0.x), y(v0.y), z(v1.x), w(v1.y) {}
    inline bool4(bool3 v0, bool v1): x(v0.x), y(v0.y), z(v0.z), w(v1) {}
    inline ~bool4() = default;
    
    // cast ctor
    bool4(const float4& rhs);
    bool4(const double4& rhs);
    bool4(const int4& rhs);
    bool4(const uint4& rhs);
    bool4(const long4& rhs);
    bool4(const ulong4& rhs);
    
    // copy & move & assign & move assign
    inline bool4(const bool4&) = default;
    inline bool4(bool4&&) = default;
    inline bool4& operator=(const bool4&) = default;
    inline bool4& operator=(bool4&&) = default;
    
    // array assessor
    inline bool& operator[](size_t i) {
        SKR_ASSERT(i >= 0 && i < 4 && "index out of range");
        return reinterpret_cast<bool*>(this)[i];
    }
    inline bool operator[](size_t i) const {
        return const_cast<bool4*>(this)->operator[](i);
    }
    
    // unary operator
    inline bool4 operator!() const { return { !x, !y, !z, !w }; }
    
    // boolean operator
    inline bool4 friend operator&&(const bool4& lhs, const bool4& rhs) { return {lhs.x && rhs.x, lhs.y && rhs.y, lhs.z && rhs.z, lhs.w && rhs.w}; }
    inline bool4 friend operator||(const bool4& lhs, const bool4& rhs) { return {lhs.x || rhs.x, lhs.y || rhs.y, lhs.z || rhs.z, lhs.w || rhs.w}; }
    inline bool4 friend operator==(const bool4& lhs, const bool4& rhs) { return {lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w}; }
    inline bool4 friend operator!=(const bool4& lhs, const bool4& rhs) { return {lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w}; }
    
    // swizzle
    inline bool2 xx() const { return {x, x}; }
    inline bool2 xy() const { return {x, y}; }
    inline void set_xy(const bool2& v) { x = v.x; y = v.y; }
    inline bool2 xz() const { return {x, z}; }
    inline void set_xz(const bool2& v) { x = v.x; z = v.y; }
    inline bool2 xw() const { return {x, w}; }
    inline void set_xw(const bool2& v) { x = v.x; w = v.y; }
    inline bool2 yx() const { return {y, x}; }
    inline void set_yx(const bool2& v) { y = v.x; x = v.y; }
    inline bool2 yy() const { return {y, y}; }
    inline bool2 yz() const { return {y, z}; }
    inline void set_yz(const bool2& v) { y = v.x; z = v.y; }
    inline bool2 yw() const { return {y, w}; }
    inline void set_yw(const bool2& v) { y = v.x; w = v.y; }
    inline bool2 zx() const { return {z, x}; }
    inline void set_zx(const bool2& v) { z = v.x; x = v.y; }
    inline bool2 zy() const { return {z, y}; }
    inline void set_zy(const bool2& v) { z = v.x; y = v.y; }
    inline bool2 zz() const { return {z, z}; }
    inline bool2 zw() const { return {z, w}; }
    inline void set_zw(const bool2& v) { z = v.x; w = v.y; }
    inline bool2 wx() const { return {w, x}; }
    inline void set_wx(const bool2& v) { w = v.x; x = v.y; }
    inline bool2 wy() const { return {w, y}; }
    inline void set_wy(const bool2& v) { w = v.x; y = v.y; }
    inline bool2 wz() const { return {w, z}; }
    inline void set_wz(const bool2& v) { w = v.x; z = v.y; }
    inline bool2 ww() const { return {w, w}; }
    inline bool3 xxx() const { return {x, x, x}; }
    inline bool3 xxy() const { return {x, x, y}; }
    inline bool3 xxz() const { return {x, x, z}; }
    inline bool3 xxw() const { return {x, x, w}; }
    inline bool3 xyx() const { return {x, y, x}; }
    inline bool3 xyy() const { return {x, y, y}; }
    inline bool3 xyz() const { return {x, y, z}; }
    inline void set_xyz(const bool3& v) { x = v.x; y = v.y; z = v.z; }
    inline bool3 xyw() const { return {x, y, w}; }
    inline void set_xyw(const bool3& v) { x = v.x; y = v.y; w = v.z; }
    inline bool3 xzx() const { return {x, z, x}; }
    inline bool3 xzy() const { return {x, z, y}; }
    inline void set_xzy(const bool3& v) { x = v.x; z = v.y; y = v.z; }
    inline bool3 xzz() const { return {x, z, z}; }
    inline bool3 xzw() const { return {x, z, w}; }
    inline void set_xzw(const bool3& v) { x = v.x; z = v.y; w = v.z; }
    inline bool3 xwx() const { return {x, w, x}; }
    inline bool3 xwy() const { return {x, w, y}; }
    inline void set_xwy(const bool3& v) { x = v.x; w = v.y; y = v.z; }
    inline bool3 xwz() const { return {x, w, z}; }
    inline void set_xwz(const bool3& v) { x = v.x; w = v.y; z = v.z; }
    inline bool3 xww() const { return {x, w, w}; }
    inline bool3 yxx() const { return {y, x, x}; }
    inline bool3 yxy() const { return {y, x, y}; }
    inline bool3 yxz() const { return {y, x, z}; }
    inline void set_yxz(const bool3& v) { y = v.x; x = v.y; z = v.z; }
    inline bool3 yxw() const { return {y, x, w}; }
    inline void set_yxw(const bool3& v) { y = v.x; x = v.y; w = v.z; }
    inline bool3 yyx() const { return {y, y, x}; }
    inline bool3 yyy() const { return {y, y, y}; }
    inline bool3 yyz() const { return {y, y, z}; }
    inline bool3 yyw() const { return {y, y, w}; }
    inline bool3 yzx() const { return {y, z, x}; }
    inline void set_yzx(const bool3& v) { y = v.x; z = v.y; x = v.z; }
    inline bool3 yzy() const { return {y, z, y}; }
    inline bool3 yzz() const { return {y, z, z}; }
    inline bool3 yzw() const { return {y, z, w}; }
    inline void set_yzw(const bool3& v) { y = v.x; z = v.y; w = v.z; }
    inline bool3 ywx() const { return {y, w, x}; }
    inline void set_ywx(const bool3& v) { y = v.x; w = v.y; x = v.z; }
    inline bool3 ywy() const { return {y, w, y}; }
    inline bool3 ywz() const { return {y, w, z}; }
    inline void set_ywz(const bool3& v) { y = v.x; w = v.y; z = v.z; }
    inline bool3 yww() const { return {y, w, w}; }
    inline bool3 zxx() const { return {z, x, x}; }
    inline bool3 zxy() const { return {z, x, y}; }
    inline void set_zxy(const bool3& v) { z = v.x; x = v.y; y = v.z; }
    inline bool3 zxz() const { return {z, x, z}; }
    inline bool3 zxw() const { return {z, x, w}; }
    inline void set_zxw(const bool3& v) { z = v.x; x = v.y; w = v.z; }
    inline bool3 zyx() const { return {z, y, x}; }
    inline void set_zyx(const bool3& v) { z = v.x; y = v.y; x = v.z; }
    inline bool3 zyy() const { return {z, y, y}; }
    inline bool3 zyz() const { return {z, y, z}; }
    inline bool3 zyw() const { return {z, y, w}; }
    inline void set_zyw(const bool3& v) { z = v.x; y = v.y; w = v.z; }
    inline bool3 zzx() const { return {z, z, x}; }
    inline bool3 zzy() const { return {z, z, y}; }
    inline bool3 zzz() const { return {z, z, z}; }
    inline bool3 zzw() const { return {z, z, w}; }
    inline bool3 zwx() const { return {z, w, x}; }
    inline void set_zwx(const bool3& v) { z = v.x; w = v.y; x = v.z; }
    inline bool3 zwy() const { return {z, w, y}; }
    inline void set_zwy(const bool3& v) { z = v.x; w = v.y; y = v.z; }
    inline bool3 zwz() const { return {z, w, z}; }
    inline bool3 zww() const { return {z, w, w}; }
    inline bool3 wxx() const { return {w, x, x}; }
    inline bool3 wxy() const { return {w, x, y}; }
    inline void set_wxy(const bool3& v) { w = v.x; x = v.y; y = v.z; }
    inline bool3 wxz() const { return {w, x, z}; }
    inline void set_wxz(const bool3& v) { w = v.x; x = v.y; z = v.z; }
    inline bool3 wxw() const { return {w, x, w}; }
    inline bool3 wyx() const { return {w, y, x}; }
    inline void set_wyx(const bool3& v) { w = v.x; y = v.y; x = v.z; }
    inline bool3 wyy() const { return {w, y, y}; }
    inline bool3 wyz() const { return {w, y, z}; }
    inline void set_wyz(const bool3& v) { w = v.x; y = v.y; z = v.z; }
    inline bool3 wyw() const { return {w, y, w}; }
    inline bool3 wzx() const { return {w, z, x}; }
    inline void set_wzx(const bool3& v) { w = v.x; z = v.y; x = v.z; }
    inline bool3 wzy() const { return {w, z, y}; }
    inline void set_wzy(const bool3& v) { w = v.x; z = v.y; y = v.z; }
    inline bool3 wzz() const { return {w, z, z}; }
    inline bool3 wzw() const { return {w, z, w}; }
    inline bool3 wwx() const { return {w, w, x}; }
    inline bool3 wwy() const { return {w, w, y}; }
    inline bool3 wwz() const { return {w, w, z}; }
    inline bool3 www() const { return {w, w, w}; }
    inline bool4 xxxx() const { return {x, x, x, x}; }
    inline bool4 xxxy() const { return {x, x, x, y}; }
    inline bool4 xxxz() const { return {x, x, x, z}; }
    inline bool4 xxxw() const { return {x, x, x, w}; }
    inline bool4 xxyx() const { return {x, x, y, x}; }
    inline bool4 xxyy() const { return {x, x, y, y}; }
    inline bool4 xxyz() const { return {x, x, y, z}; }
    inline bool4 xxyw() const { return {x, x, y, w}; }
    inline bool4 xxzx() const { return {x, x, z, x}; }
    inline bool4 xxzy() const { return {x, x, z, y}; }
    inline bool4 xxzz() const { return {x, x, z, z}; }
    inline bool4 xxzw() const { return {x, x, z, w}; }
    inline bool4 xxwx() const { return {x, x, w, x}; }
    inline bool4 xxwy() const { return {x, x, w, y}; }
    inline bool4 xxwz() const { return {x, x, w, z}; }
    inline bool4 xxww() const { return {x, x, w, w}; }
    inline bool4 xyxx() const { return {x, y, x, x}; }
    inline bool4 xyxy() const { return {x, y, x, y}; }
    inline bool4 xyxz() const { return {x, y, x, z}; }
    inline bool4 xyxw() const { return {x, y, x, w}; }
    inline bool4 xyyx() const { return {x, y, y, x}; }
    inline bool4 xyyy() const { return {x, y, y, y}; }
    inline bool4 xyyz() const { return {x, y, y, z}; }
    inline bool4 xyyw() const { return {x, y, y, w}; }
    inline bool4 xyzx() const { return {x, y, z, x}; }
    inline bool4 xyzy() const { return {x, y, z, y}; }
    inline bool4 xyzz() const { return {x, y, z, z}; }
    inline bool4 xyzw() const { return {x, y, z, w}; }
    inline void set_xyzw(const bool4& v) { x = v.x; y = v.y; z = v.z; w = v.w; }
    inline bool4 xywx() const { return {x, y, w, x}; }
    inline bool4 xywy() const { return {x, y, w, y}; }
    inline bool4 xywz() const { return {x, y, w, z}; }
    inline void set_xywz(const bool4& v) { x = v.x; y = v.y; w = v.z; z = v.w; }
    inline bool4 xyww() const { return {x, y, w, w}; }
    inline bool4 xzxx() const { return {x, z, x, x}; }
    inline bool4 xzxy() const { return {x, z, x, y}; }
    inline bool4 xzxz() const { return {x, z, x, z}; }
    inline bool4 xzxw() const { return {x, z, x, w}; }
    inline bool4 xzyx() const { return {x, z, y, x}; }
    inline bool4 xzyy() const { return {x, z, y, y}; }
    inline bool4 xzyz() const { return {x, z, y, z}; }
    inline bool4 xzyw() const { return {x, z, y, w}; }
    inline void set_xzyw(const bool4& v) { x = v.x; z = v.y; y = v.z; w = v.w; }
    inline bool4 xzzx() const { return {x, z, z, x}; }
    inline bool4 xzzy() const { return {x, z, z, y}; }
    inline bool4 xzzz() const { return {x, z, z, z}; }
    inline bool4 xzzw() const { return {x, z, z, w}; }
    inline bool4 xzwx() const { return {x, z, w, x}; }
    inline bool4 xzwy() const { return {x, z, w, y}; }
    inline void set_xzwy(const bool4& v) { x = v.x; z = v.y; w = v.z; y = v.w; }
    inline bool4 xzwz() const { return {x, z, w, z}; }
    inline bool4 xzww() const { return {x, z, w, w}; }
    inline bool4 xwxx() const { return {x, w, x, x}; }
    inline bool4 xwxy() const { return {x, w, x, y}; }
    inline bool4 xwxz() const { return {x, w, x, z}; }
    inline bool4 xwxw() const { return {x, w, x, w}; }
    inline bool4 xwyx() const { return {x, w, y, x}; }
    inline bool4 xwyy() const { return {x, w, y, y}; }
    inline bool4 xwyz() const { return {x, w, y, z}; }
    inline void set_xwyz(const bool4& v) { x = v.x; w = v.y; y = v.z; z = v.w; }
    inline bool4 xwyw() const { return {x, w, y, w}; }
    inline bool4 xwzx() const { return {x, w, z, x}; }
    inline bool4 xwzy() const { return {x, w, z, y}; }
    inline void set_xwzy(const bool4& v) { x = v.x; w = v.y; z = v.z; y = v.w; }
    inline bool4 xwzz() const { return {x, w, z, z}; }
    inline bool4 xwzw() const { return {x, w, z, w}; }
    inline bool4 xwwx() const { return {x, w, w, x}; }
    inline bool4 xwwy() const { return {x, w, w, y}; }
    inline bool4 xwwz() const { return {x, w, w, z}; }
    inline bool4 xwww() const { return {x, w, w, w}; }
    inline bool4 yxxx() const { return {y, x, x, x}; }
    inline bool4 yxxy() const { return {y, x, x, y}; }
    inline bool4 yxxz() const { return {y, x, x, z}; }
    inline bool4 yxxw() const { return {y, x, x, w}; }
    inline bool4 yxyx() const { return {y, x, y, x}; }
    inline bool4 yxyy() const { return {y, x, y, y}; }
    inline bool4 yxyz() const { return {y, x, y, z}; }
    inline bool4 yxyw() const { return {y, x, y, w}; }
    inline bool4 yxzx() const { return {y, x, z, x}; }
    inline bool4 yxzy() const { return {y, x, z, y}; }
    inline bool4 yxzz() const { return {y, x, z, z}; }
    inline bool4 yxzw() const { return {y, x, z, w}; }
    inline void set_yxzw(const bool4& v) { y = v.x; x = v.y; z = v.z; w = v.w; }
    inline bool4 yxwx() const { return {y, x, w, x}; }
    inline bool4 yxwy() const { return {y, x, w, y}; }
    inline bool4 yxwz() const { return {y, x, w, z}; }
    inline void set_yxwz(const bool4& v) { y = v.x; x = v.y; w = v.z; z = v.w; }
    inline bool4 yxww() const { return {y, x, w, w}; }
    inline bool4 yyxx() const { return {y, y, x, x}; }
    inline bool4 yyxy() const { return {y, y, x, y}; }
    inline bool4 yyxz() const { return {y, y, x, z}; }
    inline bool4 yyxw() const { return {y, y, x, w}; }
    inline bool4 yyyx() const { return {y, y, y, x}; }
    inline bool4 yyyy() const { return {y, y, y, y}; }
    inline bool4 yyyz() const { return {y, y, y, z}; }
    inline bool4 yyyw() const { return {y, y, y, w}; }
    inline bool4 yyzx() const { return {y, y, z, x}; }
    inline bool4 yyzy() const { return {y, y, z, y}; }
    inline bool4 yyzz() const { return {y, y, z, z}; }
    inline bool4 yyzw() const { return {y, y, z, w}; }
    inline bool4 yywx() const { return {y, y, w, x}; }
    inline bool4 yywy() const { return {y, y, w, y}; }
    inline bool4 yywz() const { return {y, y, w, z}; }
    inline bool4 yyww() const { return {y, y, w, w}; }
    inline bool4 yzxx() const { return {y, z, x, x}; }
    inline bool4 yzxy() const { return {y, z, x, y}; }
    inline bool4 yzxz() const { return {y, z, x, z}; }
    inline bool4 yzxw() const { return {y, z, x, w}; }
    inline void set_yzxw(const bool4& v) { y = v.x; z = v.y; x = v.z; w = v.w; }
    inline bool4 yzyx() const { return {y, z, y, x}; }
    inline bool4 yzyy() const { return {y, z, y, y}; }
    inline bool4 yzyz() const { return {y, z, y, z}; }
    inline bool4 yzyw() const { return {y, z, y, w}; }
    inline bool4 yzzx() const { return {y, z, z, x}; }
    inline bool4 yzzy() const { return {y, z, z, y}; }
    inline bool4 yzzz() const { return {y, z, z, z}; }
    inline bool4 yzzw() const { return {y, z, z, w}; }
    inline bool4 yzwx() const { return {y, z, w, x}; }
    inline void set_yzwx(const bool4& v) { y = v.x; z = v.y; w = v.z; x = v.w; }
    inline bool4 yzwy() const { return {y, z, w, y}; }
    inline bool4 yzwz() const { return {y, z, w, z}; }
    inline bool4 yzww() const { return {y, z, w, w}; }
    inline bool4 ywxx() const { return {y, w, x, x}; }
    inline bool4 ywxy() const { return {y, w, x, y}; }
    inline bool4 ywxz() const { return {y, w, x, z}; }
    inline void set_ywxz(const bool4& v) { y = v.x; w = v.y; x = v.z; z = v.w; }
    inline bool4 ywxw() const { return {y, w, x, w}; }
    inline bool4 ywyx() const { return {y, w, y, x}; }
    inline bool4 ywyy() const { return {y, w, y, y}; }
    inline bool4 ywyz() const { return {y, w, y, z}; }
    inline bool4 ywyw() const { return {y, w, y, w}; }
    inline bool4 ywzx() const { return {y, w, z, x}; }
    inline void set_ywzx(const bool4& v) { y = v.x; w = v.y; z = v.z; x = v.w; }
    inline bool4 ywzy() const { return {y, w, z, y}; }
    inline bool4 ywzz() const { return {y, w, z, z}; }
    inline bool4 ywzw() const { return {y, w, z, w}; }
    inline bool4 ywwx() const { return {y, w, w, x}; }
    inline bool4 ywwy() const { return {y, w, w, y}; }
    inline bool4 ywwz() const { return {y, w, w, z}; }
    inline bool4 ywww() const { return {y, w, w, w}; }
    inline bool4 zxxx() const { return {z, x, x, x}; }
    inline bool4 zxxy() const { return {z, x, x, y}; }
    inline bool4 zxxz() const { return {z, x, x, z}; }
    inline bool4 zxxw() const { return {z, x, x, w}; }
    inline bool4 zxyx() const { return {z, x, y, x}; }
    inline bool4 zxyy() const { return {z, x, y, y}; }
    inline bool4 zxyz() const { return {z, x, y, z}; }
    inline bool4 zxyw() const { return {z, x, y, w}; }
    inline void set_zxyw(const bool4& v) { z = v.x; x = v.y; y = v.z; w = v.w; }
    inline bool4 zxzx() const { return {z, x, z, x}; }
    inline bool4 zxzy() const { return {z, x, z, y}; }
    inline bool4 zxzz() const { return {z, x, z, z}; }
    inline bool4 zxzw() const { return {z, x, z, w}; }
    inline bool4 zxwx() const { return {z, x, w, x}; }
    inline bool4 zxwy() const { return {z, x, w, y}; }
    inline void set_zxwy(const bool4& v) { z = v.x; x = v.y; w = v.z; y = v.w; }
    inline bool4 zxwz() const { return {z, x, w, z}; }
    inline bool4 zxww() const { return {z, x, w, w}; }
    inline bool4 zyxx() const { return {z, y, x, x}; }
    inline bool4 zyxy() const { return {z, y, x, y}; }
    inline bool4 zyxz() const { return {z, y, x, z}; }
    inline bool4 zyxw() const { return {z, y, x, w}; }
    inline void set_zyxw(const bool4& v) { z = v.x; y = v.y; x = v.z; w = v.w; }
    inline bool4 zyyx() const { return {z, y, y, x}; }
    inline bool4 zyyy() const { return {z, y, y, y}; }
    inline bool4 zyyz() const { return {z, y, y, z}; }
    inline bool4 zyyw() const { return {z, y, y, w}; }
    inline bool4 zyzx() const { return {z, y, z, x}; }
    inline bool4 zyzy() const { return {z, y, z, y}; }
    inline bool4 zyzz() const { return {z, y, z, z}; }
    inline bool4 zyzw() const { return {z, y, z, w}; }
    inline bool4 zywx() const { return {z, y, w, x}; }
    inline void set_zywx(const bool4& v) { z = v.x; y = v.y; w = v.z; x = v.w; }
    inline bool4 zywy() const { return {z, y, w, y}; }
    inline bool4 zywz() const { return {z, y, w, z}; }
    inline bool4 zyww() const { return {z, y, w, w}; }
    inline bool4 zzxx() const { return {z, z, x, x}; }
    inline bool4 zzxy() const { return {z, z, x, y}; }
    inline bool4 zzxz() const { return {z, z, x, z}; }
    inline bool4 zzxw() const { return {z, z, x, w}; }
    inline bool4 zzyx() const { return {z, z, y, x}; }
    inline bool4 zzyy() const { return {z, z, y, y}; }
    inline bool4 zzyz() const { return {z, z, y, z}; }
    inline bool4 zzyw() const { return {z, z, y, w}; }
    inline bool4 zzzx() const { return {z, z, z, x}; }
    inline bool4 zzzy() const { return {z, z, z, y}; }
    inline bool4 zzzz() const { return {z, z, z, z}; }
    inline bool4 zzzw() const { return {z, z, z, w}; }
    inline bool4 zzwx() const { return {z, z, w, x}; }
    inline bool4 zzwy() const { return {z, z, w, y}; }
    inline bool4 zzwz() const { return {z, z, w, z}; }
    inline bool4 zzww() const { return {z, z, w, w}; }
    inline bool4 zwxx() const { return {z, w, x, x}; }
    inline bool4 zwxy() const { return {z, w, x, y}; }
    inline void set_zwxy(const bool4& v) { z = v.x; w = v.y; x = v.z; y = v.w; }
    inline bool4 zwxz() const { return {z, w, x, z}; }
    inline bool4 zwxw() const { return {z, w, x, w}; }
    inline bool4 zwyx() const { return {z, w, y, x}; }
    inline void set_zwyx(const bool4& v) { z = v.x; w = v.y; y = v.z; x = v.w; }
    inline bool4 zwyy() const { return {z, w, y, y}; }
    inline bool4 zwyz() const { return {z, w, y, z}; }
    inline bool4 zwyw() const { return {z, w, y, w}; }
    inline bool4 zwzx() const { return {z, w, z, x}; }
    inline bool4 zwzy() const { return {z, w, z, y}; }
    inline bool4 zwzz() const { return {z, w, z, z}; }
    inline bool4 zwzw() const { return {z, w, z, w}; }
    inline bool4 zwwx() const { return {z, w, w, x}; }
    inline bool4 zwwy() const { return {z, w, w, y}; }
    inline bool4 zwwz() const { return {z, w, w, z}; }
    inline bool4 zwww() const { return {z, w, w, w}; }
    inline bool4 wxxx() const { return {w, x, x, x}; }
    inline bool4 wxxy() const { return {w, x, x, y}; }
    inline bool4 wxxz() const { return {w, x, x, z}; }
    inline bool4 wxxw() const { return {w, x, x, w}; }
    inline bool4 wxyx() const { return {w, x, y, x}; }
    inline bool4 wxyy() const { return {w, x, y, y}; }
    inline bool4 wxyz() const { return {w, x, y, z}; }
    inline void set_wxyz(const bool4& v) { w = v.x; x = v.y; y = v.z; z = v.w; }
    inline bool4 wxyw() const { return {w, x, y, w}; }
    inline bool4 wxzx() const { return {w, x, z, x}; }
    inline bool4 wxzy() const { return {w, x, z, y}; }
    inline void set_wxzy(const bool4& v) { w = v.x; x = v.y; z = v.z; y = v.w; }
    inline bool4 wxzz() const { return {w, x, z, z}; }
    inline bool4 wxzw() const { return {w, x, z, w}; }
    inline bool4 wxwx() const { return {w, x, w, x}; }
    inline bool4 wxwy() const { return {w, x, w, y}; }
    inline bool4 wxwz() const { return {w, x, w, z}; }
    inline bool4 wxww() const { return {w, x, w, w}; }
    inline bool4 wyxx() const { return {w, y, x, x}; }
    inline bool4 wyxy() const { return {w, y, x, y}; }
    inline bool4 wyxz() const { return {w, y, x, z}; }
    inline void set_wyxz(const bool4& v) { w = v.x; y = v.y; x = v.z; z = v.w; }
    inline bool4 wyxw() const { return {w, y, x, w}; }
    inline bool4 wyyx() const { return {w, y, y, x}; }
    inline bool4 wyyy() const { return {w, y, y, y}; }
    inline bool4 wyyz() const { return {w, y, y, z}; }
    inline bool4 wyyw() const { return {w, y, y, w}; }
    inline bool4 wyzx() const { return {w, y, z, x}; }
    inline void set_wyzx(const bool4& v) { w = v.x; y = v.y; z = v.z; x = v.w; }
    inline bool4 wyzy() const { return {w, y, z, y}; }
    inline bool4 wyzz() const { return {w, y, z, z}; }
    inline bool4 wyzw() const { return {w, y, z, w}; }
    inline bool4 wywx() const { return {w, y, w, x}; }
    inline bool4 wywy() const { return {w, y, w, y}; }
    inline bool4 wywz() const { return {w, y, w, z}; }
    inline bool4 wyww() const { return {w, y, w, w}; }
    inline bool4 wzxx() const { return {w, z, x, x}; }
    inline bool4 wzxy() const { return {w, z, x, y}; }
    inline void set_wzxy(const bool4& v) { w = v.x; z = v.y; x = v.z; y = v.w; }
    inline bool4 wzxz() const { return {w, z, x, z}; }
    inline bool4 wzxw() const { return {w, z, x, w}; }
    inline bool4 wzyx() const { return {w, z, y, x}; }
    inline void set_wzyx(const bool4& v) { w = v.x; z = v.y; y = v.z; x = v.w; }
    inline bool4 wzyy() const { return {w, z, y, y}; }
    inline bool4 wzyz() const { return {w, z, y, z}; }
    inline bool4 wzyw() const { return {w, z, y, w}; }
    inline bool4 wzzx() const { return {w, z, z, x}; }
    inline bool4 wzzy() const { return {w, z, z, y}; }
    inline bool4 wzzz() const { return {w, z, z, z}; }
    inline bool4 wzzw() const { return {w, z, z, w}; }
    inline bool4 wzwx() const { return {w, z, w, x}; }
    inline bool4 wzwy() const { return {w, z, w, y}; }
    inline bool4 wzwz() const { return {w, z, w, z}; }
    inline bool4 wzww() const { return {w, z, w, w}; }
    inline bool4 wwxx() const { return {w, w, x, x}; }
    inline bool4 wwxy() const { return {w, w, x, y}; }
    inline bool4 wwxz() const { return {w, w, x, z}; }
    inline bool4 wwxw() const { return {w, w, x, w}; }
    inline bool4 wwyx() const { return {w, w, y, x}; }
    inline bool4 wwyy() const { return {w, w, y, y}; }
    inline bool4 wwyz() const { return {w, w, y, z}; }
    inline bool4 wwyw() const { return {w, w, y, w}; }
    inline bool4 wwzx() const { return {w, w, z, x}; }
    inline bool4 wwzy() const { return {w, w, z, y}; }
    inline bool4 wwzz() const { return {w, w, z, z}; }
    inline bool4 wwzw() const { return {w, w, z, w}; }
    inline bool4 wwwx() const { return {w, w, w, x}; }
    inline bool4 wwwy() const { return {w, w, w, y}; }
    inline bool4 wwwz() const { return {w, w, w, z}; }
    inline bool4 wwww() const { return {w, w, w, w}; }
    
    // hash
    inline static size_t _skr_hash(const bool4& v) {
        auto hasher = ::skr::Hash<bool>{};
        auto result = hasher(v.x);
        result = ::skr::hash_combine(result, hasher(v.y));
        result = ::skr::hash_combine(result, hasher(v.z));
        result = ::skr::hash_combine(result, hasher(v.w));
        return result;
    }
};
}
