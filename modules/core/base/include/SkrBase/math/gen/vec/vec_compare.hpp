//! *************************************************************************
//! **  This file is auto-generated by gen_math, do not edit it manually.  **
//! *************************************************************************

#pragma once
#include "float_vec.hpp"
#include "double_vec.hpp"
#include "bool_vec.hpp"
#include "int_vec.hpp"
#include "uint_vec.hpp"
#include "long_vec.hpp"
#include "ulong_vec.hpp"

namespace skr {
    // compare operator for [float2]
    inline bool2 operator==(const float2& lhs, const float2& rhs) { return {lhs.x == rhs.x, lhs.y == rhs.y}; }
    inline bool2 operator!=(const float2& lhs, const float2& rhs) { return {lhs.x != rhs.x, lhs.y != rhs.y}; }
    inline bool2 operator<(const float2& lhs, const float2& rhs) { return {lhs.x < rhs.x, lhs.y < rhs.y}; }
    inline bool2 operator<=(const float2& lhs, const float2& rhs) { return {lhs.x <= rhs.x, lhs.y <= rhs.y}; }
    inline bool2 operator>(const float2& lhs, const float2& rhs) { return {lhs.x > rhs.x, lhs.y > rhs.y}; }
    inline bool2 operator>=(const float2& lhs, const float2& rhs) { return {lhs.x >= rhs.x, lhs.y >= rhs.y}; }
    
    // compare operator for [float3]
    inline bool3 operator==(const float3& lhs, const float3& rhs) { return {lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z}; }
    inline bool3 operator!=(const float3& lhs, const float3& rhs) { return {lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z}; }
    inline bool3 operator<(const float3& lhs, const float3& rhs) { return {lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z}; }
    inline bool3 operator<=(const float3& lhs, const float3& rhs) { return {lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z}; }
    inline bool3 operator>(const float3& lhs, const float3& rhs) { return {lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z}; }
    inline bool3 operator>=(const float3& lhs, const float3& rhs) { return {lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z}; }
    
    // compare operator for [float4]
    inline bool4 operator==(const float4& lhs, const float4& rhs) { return {lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w}; }
    inline bool4 operator!=(const float4& lhs, const float4& rhs) { return {lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w}; }
    inline bool4 operator<(const float4& lhs, const float4& rhs) { return {lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z, lhs.w < rhs.w}; }
    inline bool4 operator<=(const float4& lhs, const float4& rhs) { return {lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z, lhs.w <= rhs.w}; }
    inline bool4 operator>(const float4& lhs, const float4& rhs) { return {lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z, lhs.w > rhs.w}; }
    inline bool4 operator>=(const float4& lhs, const float4& rhs) { return {lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z, lhs.w >= rhs.w}; }
    
    // compare operator for [double2]
    inline bool2 operator==(const double2& lhs, const double2& rhs) { return {lhs.x == rhs.x, lhs.y == rhs.y}; }
    inline bool2 operator!=(const double2& lhs, const double2& rhs) { return {lhs.x != rhs.x, lhs.y != rhs.y}; }
    inline bool2 operator<(const double2& lhs, const double2& rhs) { return {lhs.x < rhs.x, lhs.y < rhs.y}; }
    inline bool2 operator<=(const double2& lhs, const double2& rhs) { return {lhs.x <= rhs.x, lhs.y <= rhs.y}; }
    inline bool2 operator>(const double2& lhs, const double2& rhs) { return {lhs.x > rhs.x, lhs.y > rhs.y}; }
    inline bool2 operator>=(const double2& lhs, const double2& rhs) { return {lhs.x >= rhs.x, lhs.y >= rhs.y}; }
    
    // compare operator for [double3]
    inline bool3 operator==(const double3& lhs, const double3& rhs) { return {lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z}; }
    inline bool3 operator!=(const double3& lhs, const double3& rhs) { return {lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z}; }
    inline bool3 operator<(const double3& lhs, const double3& rhs) { return {lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z}; }
    inline bool3 operator<=(const double3& lhs, const double3& rhs) { return {lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z}; }
    inline bool3 operator>(const double3& lhs, const double3& rhs) { return {lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z}; }
    inline bool3 operator>=(const double3& lhs, const double3& rhs) { return {lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z}; }
    
    // compare operator for [double4]
    inline bool4 operator==(const double4& lhs, const double4& rhs) { return {lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w}; }
    inline bool4 operator!=(const double4& lhs, const double4& rhs) { return {lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w}; }
    inline bool4 operator<(const double4& lhs, const double4& rhs) { return {lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z, lhs.w < rhs.w}; }
    inline bool4 operator<=(const double4& lhs, const double4& rhs) { return {lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z, lhs.w <= rhs.w}; }
    inline bool4 operator>(const double4& lhs, const double4& rhs) { return {lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z, lhs.w > rhs.w}; }
    inline bool4 operator>=(const double4& lhs, const double4& rhs) { return {lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z, lhs.w >= rhs.w}; }
    
    // compare operator for [int2]
    inline bool2 operator==(const int2& lhs, const int2& rhs) { return {lhs.x == rhs.x, lhs.y == rhs.y}; }
    inline bool2 operator!=(const int2& lhs, const int2& rhs) { return {lhs.x != rhs.x, lhs.y != rhs.y}; }
    inline bool2 operator<(const int2& lhs, const int2& rhs) { return {lhs.x < rhs.x, lhs.y < rhs.y}; }
    inline bool2 operator<=(const int2& lhs, const int2& rhs) { return {lhs.x <= rhs.x, lhs.y <= rhs.y}; }
    inline bool2 operator>(const int2& lhs, const int2& rhs) { return {lhs.x > rhs.x, lhs.y > rhs.y}; }
    inline bool2 operator>=(const int2& lhs, const int2& rhs) { return {lhs.x >= rhs.x, lhs.y >= rhs.y}; }
    
    // compare operator for [int3]
    inline bool3 operator==(const int3& lhs, const int3& rhs) { return {lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z}; }
    inline bool3 operator!=(const int3& lhs, const int3& rhs) { return {lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z}; }
    inline bool3 operator<(const int3& lhs, const int3& rhs) { return {lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z}; }
    inline bool3 operator<=(const int3& lhs, const int3& rhs) { return {lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z}; }
    inline bool3 operator>(const int3& lhs, const int3& rhs) { return {lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z}; }
    inline bool3 operator>=(const int3& lhs, const int3& rhs) { return {lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z}; }
    
    // compare operator for [int4]
    inline bool4 operator==(const int4& lhs, const int4& rhs) { return {lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w}; }
    inline bool4 operator!=(const int4& lhs, const int4& rhs) { return {lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w}; }
    inline bool4 operator<(const int4& lhs, const int4& rhs) { return {lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z, lhs.w < rhs.w}; }
    inline bool4 operator<=(const int4& lhs, const int4& rhs) { return {lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z, lhs.w <= rhs.w}; }
    inline bool4 operator>(const int4& lhs, const int4& rhs) { return {lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z, lhs.w > rhs.w}; }
    inline bool4 operator>=(const int4& lhs, const int4& rhs) { return {lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z, lhs.w >= rhs.w}; }
    
    // compare operator for [uint2]
    inline bool2 operator==(const uint2& lhs, const uint2& rhs) { return {lhs.x == rhs.x, lhs.y == rhs.y}; }
    inline bool2 operator!=(const uint2& lhs, const uint2& rhs) { return {lhs.x != rhs.x, lhs.y != rhs.y}; }
    inline bool2 operator<(const uint2& lhs, const uint2& rhs) { return {lhs.x < rhs.x, lhs.y < rhs.y}; }
    inline bool2 operator<=(const uint2& lhs, const uint2& rhs) { return {lhs.x <= rhs.x, lhs.y <= rhs.y}; }
    inline bool2 operator>(const uint2& lhs, const uint2& rhs) { return {lhs.x > rhs.x, lhs.y > rhs.y}; }
    inline bool2 operator>=(const uint2& lhs, const uint2& rhs) { return {lhs.x >= rhs.x, lhs.y >= rhs.y}; }
    
    // compare operator for [uint3]
    inline bool3 operator==(const uint3& lhs, const uint3& rhs) { return {lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z}; }
    inline bool3 operator!=(const uint3& lhs, const uint3& rhs) { return {lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z}; }
    inline bool3 operator<(const uint3& lhs, const uint3& rhs) { return {lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z}; }
    inline bool3 operator<=(const uint3& lhs, const uint3& rhs) { return {lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z}; }
    inline bool3 operator>(const uint3& lhs, const uint3& rhs) { return {lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z}; }
    inline bool3 operator>=(const uint3& lhs, const uint3& rhs) { return {lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z}; }
    
    // compare operator for [uint4]
    inline bool4 operator==(const uint4& lhs, const uint4& rhs) { return {lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w}; }
    inline bool4 operator!=(const uint4& lhs, const uint4& rhs) { return {lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w}; }
    inline bool4 operator<(const uint4& lhs, const uint4& rhs) { return {lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z, lhs.w < rhs.w}; }
    inline bool4 operator<=(const uint4& lhs, const uint4& rhs) { return {lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z, lhs.w <= rhs.w}; }
    inline bool4 operator>(const uint4& lhs, const uint4& rhs) { return {lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z, lhs.w > rhs.w}; }
    inline bool4 operator>=(const uint4& lhs, const uint4& rhs) { return {lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z, lhs.w >= rhs.w}; }
    
    // compare operator for [long2]
    inline bool2 operator==(const long2& lhs, const long2& rhs) { return {lhs.x == rhs.x, lhs.y == rhs.y}; }
    inline bool2 operator!=(const long2& lhs, const long2& rhs) { return {lhs.x != rhs.x, lhs.y != rhs.y}; }
    inline bool2 operator<(const long2& lhs, const long2& rhs) { return {lhs.x < rhs.x, lhs.y < rhs.y}; }
    inline bool2 operator<=(const long2& lhs, const long2& rhs) { return {lhs.x <= rhs.x, lhs.y <= rhs.y}; }
    inline bool2 operator>(const long2& lhs, const long2& rhs) { return {lhs.x > rhs.x, lhs.y > rhs.y}; }
    inline bool2 operator>=(const long2& lhs, const long2& rhs) { return {lhs.x >= rhs.x, lhs.y >= rhs.y}; }
    
    // compare operator for [long3]
    inline bool3 operator==(const long3& lhs, const long3& rhs) { return {lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z}; }
    inline bool3 operator!=(const long3& lhs, const long3& rhs) { return {lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z}; }
    inline bool3 operator<(const long3& lhs, const long3& rhs) { return {lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z}; }
    inline bool3 operator<=(const long3& lhs, const long3& rhs) { return {lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z}; }
    inline bool3 operator>(const long3& lhs, const long3& rhs) { return {lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z}; }
    inline bool3 operator>=(const long3& lhs, const long3& rhs) { return {lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z}; }
    
    // compare operator for [long4]
    inline bool4 operator==(const long4& lhs, const long4& rhs) { return {lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w}; }
    inline bool4 operator!=(const long4& lhs, const long4& rhs) { return {lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w}; }
    inline bool4 operator<(const long4& lhs, const long4& rhs) { return {lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z, lhs.w < rhs.w}; }
    inline bool4 operator<=(const long4& lhs, const long4& rhs) { return {lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z, lhs.w <= rhs.w}; }
    inline bool4 operator>(const long4& lhs, const long4& rhs) { return {lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z, lhs.w > rhs.w}; }
    inline bool4 operator>=(const long4& lhs, const long4& rhs) { return {lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z, lhs.w >= rhs.w}; }
    
    // compare operator for [ulong2]
    inline bool2 operator==(const ulong2& lhs, const ulong2& rhs) { return {lhs.x == rhs.x, lhs.y == rhs.y}; }
    inline bool2 operator!=(const ulong2& lhs, const ulong2& rhs) { return {lhs.x != rhs.x, lhs.y != rhs.y}; }
    inline bool2 operator<(const ulong2& lhs, const ulong2& rhs) { return {lhs.x < rhs.x, lhs.y < rhs.y}; }
    inline bool2 operator<=(const ulong2& lhs, const ulong2& rhs) { return {lhs.x <= rhs.x, lhs.y <= rhs.y}; }
    inline bool2 operator>(const ulong2& lhs, const ulong2& rhs) { return {lhs.x > rhs.x, lhs.y > rhs.y}; }
    inline bool2 operator>=(const ulong2& lhs, const ulong2& rhs) { return {lhs.x >= rhs.x, lhs.y >= rhs.y}; }
    
    // compare operator for [ulong3]
    inline bool3 operator==(const ulong3& lhs, const ulong3& rhs) { return {lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z}; }
    inline bool3 operator!=(const ulong3& lhs, const ulong3& rhs) { return {lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z}; }
    inline bool3 operator<(const ulong3& lhs, const ulong3& rhs) { return {lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z}; }
    inline bool3 operator<=(const ulong3& lhs, const ulong3& rhs) { return {lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z}; }
    inline bool3 operator>(const ulong3& lhs, const ulong3& rhs) { return {lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z}; }
    inline bool3 operator>=(const ulong3& lhs, const ulong3& rhs) { return {lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z}; }
    
    // compare operator for [ulong4]
    inline bool4 operator==(const ulong4& lhs, const ulong4& rhs) { return {lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w}; }
    inline bool4 operator!=(const ulong4& lhs, const ulong4& rhs) { return {lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w}; }
    inline bool4 operator<(const ulong4& lhs, const ulong4& rhs) { return {lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z, lhs.w < rhs.w}; }
    inline bool4 operator<=(const ulong4& lhs, const ulong4& rhs) { return {lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z, lhs.w <= rhs.w}; }
    inline bool4 operator>(const ulong4& lhs, const ulong4& rhs) { return {lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z, lhs.w > rhs.w}; }
    inline bool4 operator>=(const ulong4& lhs, const ulong4& rhs) { return {lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z, lhs.w >= rhs.w}; }
    
}
