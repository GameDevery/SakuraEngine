//! *************************************************************************
//! **  This file is auto-generated by gen_math, do not edit it manually.  **
//! *************************************************************************

#pragma once
#include <cstdint>
#include <cmath>
#include "../gen_math_fwd.hpp"
#include "../../math_constants.hpp"
#include <SkrBase/misc/debug.h>
#include <SkrBase/misc/hash.hpp>

namespace skr {
inline namespace math {
struct float2 {
    float x, y;
    
    // ctor & dtor
    inline float2(): x(0), y(0) {}
    inline float2(MathNoInitType) {}
    inline float2(float v): x(v), y(v) {}
    inline float2(float v_x, float v_y): x(v_x), y(v_y) {}
    inline ~float2() = default;
    
    // cast ctor
    explicit float2(const double2& rhs);
    float2(const bool2& rhs);
    float2(const int2& rhs);
    float2(const uint2& rhs);
    float2(const long2& rhs);
    float2(const ulong2& rhs);
    
    // copy & move & assign & move assign
    inline float2(const float2&) = default;
    inline float2(float2&&) = default;
    inline float2& operator=(const float2&) = default;
    inline float2& operator=(float2&&) = default;
    
    // array assessor
    inline float& operator[](size_t i) {
        SKR_ASSERT(i >= 0 && i < 2 && "index out of range");
        return reinterpret_cast<float*>(this)[i];
    }
    inline float operator[](size_t i) const {
        return const_cast<float2*>(this)->operator[](i);
    }
    
    // unary operator
    inline float2 operator-() const { return { -x, -y }; }
    
    // arithmetic operator
    inline friend float2 operator+(const float2& lhs, const float2& rhs) { return { lhs.x + rhs.x, lhs.y + rhs.y }; }
    inline friend float2 operator-(const float2& lhs, const float2& rhs) { return { lhs.x - rhs.x, lhs.y - rhs.y }; }
    inline friend float2 operator*(const float2& lhs, const float2& rhs) { return { lhs.x * rhs.x, lhs.y * rhs.y }; }
    inline friend float2 operator/(const float2& lhs, const float2& rhs) { return { lhs.x / rhs.x, lhs.y / rhs.y }; }
    inline friend float2 operator%(const float2& lhs, const float2& rhs) { return { ::std::fmod(lhs.x, rhs.x), ::std::fmod(lhs.y, rhs.y) }; }
    
    // arithmetic assign operator
    inline float2& operator+=(const float2& rhs) { x += rhs.x, y += rhs.y; return *this; }
    inline float2& operator-=(const float2& rhs) { x -= rhs.x, y -= rhs.y; return *this; }
    inline float2& operator*=(const float2& rhs) { x *= rhs.x, y *= rhs.y; return *this; }
    inline float2& operator/=(const float2& rhs) { x /= rhs.x, y /= rhs.y; return *this; }
    inline float2& operator%=(const float2& rhs) { x = ::std::fmod(x, rhs.x), y = ::std::fmod(y, rhs.y); return *this; }
    
    // compare operator
    friend bool2 operator==(const float2& lhs, const float2& rhs);
    friend bool2 operator!=(const float2& lhs, const float2& rhs);
    friend bool2 operator<(const float2& lhs, const float2& rhs);
    friend bool2 operator<=(const float2& lhs, const float2& rhs);
    friend bool2 operator>(const float2& lhs, const float2& rhs);
    friend bool2 operator>=(const float2& lhs, const float2& rhs);
    
    // swizzle
    inline float2 xx() const { return {x, x}; }
    inline float2 xy() const { return {x, y}; }
    inline void set_xy(const float2& v) { x = v.x; y = v.y; }
    inline float2 yx() const { return {y, x}; }
    inline void set_yx(const float2& v) { y = v.x; x = v.y; }
    inline float2 yy() const { return {y, y}; }
    
    // hash
    inline static skr_hash _skr_hash(const float2& v) {
        auto hasher = ::skr::Hash<float>{};
        auto result = hasher(v.x);
        result = ::skr::hash_combine(result, hasher(v.y));
        return result;
    }
};
struct float3 {
    float x, y, z;
    
    // ctor & dtor
    inline float3(): x(0), y(0), z(0) {}
    inline float3(MathNoInitType) {}
    inline float3(float v): x(v), y(v), z(v) {}
    inline float3(float v_x, float v_y, float v_z): x(v_x), y(v_y), z(v_z) {}
    inline float3(float v_x, float2 v_yz): x(v_x), y(v_yz.x), z(v_yz.y) {}
    inline float3(float2 v_xy, float v_z): x(v_xy.x), y(v_xy.y), z(v_z) {}
    inline ~float3() = default;
    
    // cast ctor
    explicit float3(const double3& rhs);
    float3(const bool3& rhs);
    float3(const int3& rhs);
    float3(const uint3& rhs);
    float3(const long3& rhs);
    float3(const ulong3& rhs);
    
    // directions factory
    inline static float3 forward() { return {0, 0, 1}; }
    inline static float3 back() { return {0, 0, -1}; }
    inline static float3 right() { return {1, 0, 0}; }
    inline static float3 left() { return {-1, 0, 0}; }
    inline static float3 up() { return {0, 1, 0}; }
    inline static float3 down() { return {0, -1, 0}; }
    
    // copy & move & assign & move assign
    inline float3(const float3&) = default;
    inline float3(float3&&) = default;
    inline float3& operator=(const float3&) = default;
    inline float3& operator=(float3&&) = default;
    
    // array assessor
    inline float& operator[](size_t i) {
        SKR_ASSERT(i >= 0 && i < 3 && "index out of range");
        return reinterpret_cast<float*>(this)[i];
    }
    inline float operator[](size_t i) const {
        return const_cast<float3*>(this)->operator[](i);
    }
    
    // unary operator
    inline float3 operator-() const { return { -x, -y, -z }; }
    
    // arithmetic operator
    inline friend float3 operator+(const float3& lhs, const float3& rhs) { return { lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z }; }
    inline friend float3 operator-(const float3& lhs, const float3& rhs) { return { lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z }; }
    inline friend float3 operator*(const float3& lhs, const float3& rhs) { return { lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z }; }
    inline friend float3 operator/(const float3& lhs, const float3& rhs) { return { lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z }; }
    inline friend float3 operator%(const float3& lhs, const float3& rhs) { return { ::std::fmod(lhs.x, rhs.x), ::std::fmod(lhs.y, rhs.y), ::std::fmod(lhs.z, rhs.z) }; }
    
    // arithmetic assign operator
    inline float3& operator+=(const float3& rhs) { x += rhs.x, y += rhs.y, z += rhs.z; return *this; }
    inline float3& operator-=(const float3& rhs) { x -= rhs.x, y -= rhs.y, z -= rhs.z; return *this; }
    inline float3& operator*=(const float3& rhs) { x *= rhs.x, y *= rhs.y, z *= rhs.z; return *this; }
    inline float3& operator/=(const float3& rhs) { x /= rhs.x, y /= rhs.y, z /= rhs.z; return *this; }
    inline float3& operator%=(const float3& rhs) { x = ::std::fmod(x, rhs.x), y = ::std::fmod(y, rhs.y), z = ::std::fmod(z, rhs.z); return *this; }
    
    // compare operator
    friend bool3 operator==(const float3& lhs, const float3& rhs);
    friend bool3 operator!=(const float3& lhs, const float3& rhs);
    friend bool3 operator<(const float3& lhs, const float3& rhs);
    friend bool3 operator<=(const float3& lhs, const float3& rhs);
    friend bool3 operator>(const float3& lhs, const float3& rhs);
    friend bool3 operator>=(const float3& lhs, const float3& rhs);
    
    // swizzle
    inline float2 xx() const { return {x, x}; }
    inline float2 xy() const { return {x, y}; }
    inline void set_xy(const float2& v) { x = v.x; y = v.y; }
    inline float2 xz() const { return {x, z}; }
    inline void set_xz(const float2& v) { x = v.x; z = v.y; }
    inline float2 yx() const { return {y, x}; }
    inline void set_yx(const float2& v) { y = v.x; x = v.y; }
    inline float2 yy() const { return {y, y}; }
    inline float2 yz() const { return {y, z}; }
    inline void set_yz(const float2& v) { y = v.x; z = v.y; }
    inline float2 zx() const { return {z, x}; }
    inline void set_zx(const float2& v) { z = v.x; x = v.y; }
    inline float2 zy() const { return {z, y}; }
    inline void set_zy(const float2& v) { z = v.x; y = v.y; }
    inline float2 zz() const { return {z, z}; }
    inline float3 xxx() const { return {x, x, x}; }
    inline float3 xxy() const { return {x, x, y}; }
    inline float3 xxz() const { return {x, x, z}; }
    inline float3 xyx() const { return {x, y, x}; }
    inline float3 xyy() const { return {x, y, y}; }
    inline float3 xyz() const { return {x, y, z}; }
    inline void set_xyz(const float3& v) { x = v.x; y = v.y; z = v.z; }
    inline float3 xzx() const { return {x, z, x}; }
    inline float3 xzy() const { return {x, z, y}; }
    inline void set_xzy(const float3& v) { x = v.x; z = v.y; y = v.z; }
    inline float3 xzz() const { return {x, z, z}; }
    inline float3 yxx() const { return {y, x, x}; }
    inline float3 yxy() const { return {y, x, y}; }
    inline float3 yxz() const { return {y, x, z}; }
    inline void set_yxz(const float3& v) { y = v.x; x = v.y; z = v.z; }
    inline float3 yyx() const { return {y, y, x}; }
    inline float3 yyy() const { return {y, y, y}; }
    inline float3 yyz() const { return {y, y, z}; }
    inline float3 yzx() const { return {y, z, x}; }
    inline void set_yzx(const float3& v) { y = v.x; z = v.y; x = v.z; }
    inline float3 yzy() const { return {y, z, y}; }
    inline float3 yzz() const { return {y, z, z}; }
    inline float3 zxx() const { return {z, x, x}; }
    inline float3 zxy() const { return {z, x, y}; }
    inline void set_zxy(const float3& v) { z = v.x; x = v.y; y = v.z; }
    inline float3 zxz() const { return {z, x, z}; }
    inline float3 zyx() const { return {z, y, x}; }
    inline void set_zyx(const float3& v) { z = v.x; y = v.y; x = v.z; }
    inline float3 zyy() const { return {z, y, y}; }
    inline float3 zyz() const { return {z, y, z}; }
    inline float3 zzx() const { return {z, z, x}; }
    inline float3 zzy() const { return {z, z, y}; }
    inline float3 zzz() const { return {z, z, z}; }
    
    // hash
    inline static skr_hash _skr_hash(const float3& v) {
        auto hasher = ::skr::Hash<float>{};
        auto result = hasher(v.x);
        result = ::skr::hash_combine(result, hasher(v.y));
        result = ::skr::hash_combine(result, hasher(v.z));
        return result;
    }
};
struct alignas(16) float4 {
    float x, y, z, w;
    
    // ctor & dtor
    inline float4(): x(0), y(0), z(0), w(0) {}
    inline float4(MathNoInitType) {}
    inline float4(float v): x(v), y(v), z(v), w(v) {}
    inline float4(float v_x, float v_y, float v_z, float v_w): x(v_x), y(v_y), z(v_z), w(v_w) {}
    inline float4(float v_x, float v_y, float2 v_zw): x(v_x), y(v_y), z(v_zw.x), w(v_zw.y) {}
    inline float4(float v_x, float2 v_yz, float v_w): x(v_x), y(v_yz.x), z(v_yz.y), w(v_w) {}
    inline float4(float v_x, float3 v_yzw): x(v_x), y(v_yzw.x), z(v_yzw.y), w(v_yzw.z) {}
    inline float4(float2 v_xy, float v_z, float v_w): x(v_xy.x), y(v_xy.y), z(v_z), w(v_w) {}
    inline float4(float2 v_xy, float2 v_zw): x(v_xy.x), y(v_xy.y), z(v_zw.x), w(v_zw.y) {}
    inline float4(float3 v_xyz, float v_w): x(v_xyz.x), y(v_xyz.y), z(v_xyz.z), w(v_w) {}
    inline ~float4() = default;
    
    // cast ctor
    explicit float4(const double4& rhs);
    float4(const bool4& rhs);
    float4(const int4& rhs);
    float4(const uint4& rhs);
    float4(const long4& rhs);
    float4(const ulong4& rhs);
    
    // copy & move & assign & move assign
    inline float4(const float4&) = default;
    inline float4(float4&&) = default;
    inline float4& operator=(const float4&) = default;
    inline float4& operator=(float4&&) = default;
    
    // array assessor
    inline float& operator[](size_t i) {
        SKR_ASSERT(i >= 0 && i < 4 && "index out of range");
        return reinterpret_cast<float*>(this)[i];
    }
    inline float operator[](size_t i) const {
        return const_cast<float4*>(this)->operator[](i);
    }
    
    // unary operator
    inline float4 operator-() const { return { -x, -y, -z, -w }; }
    
    // arithmetic operator
    inline friend float4 operator+(const float4& lhs, const float4& rhs) { return { lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z, lhs.w + rhs.w }; }
    inline friend float4 operator-(const float4& lhs, const float4& rhs) { return { lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z, lhs.w - rhs.w }; }
    inline friend float4 operator*(const float4& lhs, const float4& rhs) { return { lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z, lhs.w * rhs.w }; }
    inline friend float4 operator/(const float4& lhs, const float4& rhs) { return { lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z, lhs.w / rhs.w }; }
    inline friend float4 operator%(const float4& lhs, const float4& rhs) { return { ::std::fmod(lhs.x, rhs.x), ::std::fmod(lhs.y, rhs.y), ::std::fmod(lhs.z, rhs.z), ::std::fmod(lhs.w, rhs.w) }; }
    
    // arithmetic assign operator
    inline float4& operator+=(const float4& rhs) { x += rhs.x, y += rhs.y, z += rhs.z, w += rhs.w; return *this; }
    inline float4& operator-=(const float4& rhs) { x -= rhs.x, y -= rhs.y, z -= rhs.z, w -= rhs.w; return *this; }
    inline float4& operator*=(const float4& rhs) { x *= rhs.x, y *= rhs.y, z *= rhs.z, w *= rhs.w; return *this; }
    inline float4& operator/=(const float4& rhs) { x /= rhs.x, y /= rhs.y, z /= rhs.z, w /= rhs.w; return *this; }
    inline float4& operator%=(const float4& rhs) { x = ::std::fmod(x, rhs.x), y = ::std::fmod(y, rhs.y), z = ::std::fmod(z, rhs.z), w = ::std::fmod(w, rhs.w); return *this; }
    
    // compare operator
    friend bool4 operator==(const float4& lhs, const float4& rhs);
    friend bool4 operator!=(const float4& lhs, const float4& rhs);
    friend bool4 operator<(const float4& lhs, const float4& rhs);
    friend bool4 operator<=(const float4& lhs, const float4& rhs);
    friend bool4 operator>(const float4& lhs, const float4& rhs);
    friend bool4 operator>=(const float4& lhs, const float4& rhs);
    
    // swizzle
    inline float2 xx() const { return {x, x}; }
    inline float2 xy() const { return {x, y}; }
    inline void set_xy(const float2& v) { x = v.x; y = v.y; }
    inline float2 xz() const { return {x, z}; }
    inline void set_xz(const float2& v) { x = v.x; z = v.y; }
    inline float2 xw() const { return {x, w}; }
    inline void set_xw(const float2& v) { x = v.x; w = v.y; }
    inline float2 yx() const { return {y, x}; }
    inline void set_yx(const float2& v) { y = v.x; x = v.y; }
    inline float2 yy() const { return {y, y}; }
    inline float2 yz() const { return {y, z}; }
    inline void set_yz(const float2& v) { y = v.x; z = v.y; }
    inline float2 yw() const { return {y, w}; }
    inline void set_yw(const float2& v) { y = v.x; w = v.y; }
    inline float2 zx() const { return {z, x}; }
    inline void set_zx(const float2& v) { z = v.x; x = v.y; }
    inline float2 zy() const { return {z, y}; }
    inline void set_zy(const float2& v) { z = v.x; y = v.y; }
    inline float2 zz() const { return {z, z}; }
    inline float2 zw() const { return {z, w}; }
    inline void set_zw(const float2& v) { z = v.x; w = v.y; }
    inline float2 wx() const { return {w, x}; }
    inline void set_wx(const float2& v) { w = v.x; x = v.y; }
    inline float2 wy() const { return {w, y}; }
    inline void set_wy(const float2& v) { w = v.x; y = v.y; }
    inline float2 wz() const { return {w, z}; }
    inline void set_wz(const float2& v) { w = v.x; z = v.y; }
    inline float2 ww() const { return {w, w}; }
    inline float3 xxx() const { return {x, x, x}; }
    inline float3 xxy() const { return {x, x, y}; }
    inline float3 xxz() const { return {x, x, z}; }
    inline float3 xxw() const { return {x, x, w}; }
    inline float3 xyx() const { return {x, y, x}; }
    inline float3 xyy() const { return {x, y, y}; }
    inline float3 xyz() const { return {x, y, z}; }
    inline void set_xyz(const float3& v) { x = v.x; y = v.y; z = v.z; }
    inline float3 xyw() const { return {x, y, w}; }
    inline void set_xyw(const float3& v) { x = v.x; y = v.y; w = v.z; }
    inline float3 xzx() const { return {x, z, x}; }
    inline float3 xzy() const { return {x, z, y}; }
    inline void set_xzy(const float3& v) { x = v.x; z = v.y; y = v.z; }
    inline float3 xzz() const { return {x, z, z}; }
    inline float3 xzw() const { return {x, z, w}; }
    inline void set_xzw(const float3& v) { x = v.x; z = v.y; w = v.z; }
    inline float3 xwx() const { return {x, w, x}; }
    inline float3 xwy() const { return {x, w, y}; }
    inline void set_xwy(const float3& v) { x = v.x; w = v.y; y = v.z; }
    inline float3 xwz() const { return {x, w, z}; }
    inline void set_xwz(const float3& v) { x = v.x; w = v.y; z = v.z; }
    inline float3 xww() const { return {x, w, w}; }
    inline float3 yxx() const { return {y, x, x}; }
    inline float3 yxy() const { return {y, x, y}; }
    inline float3 yxz() const { return {y, x, z}; }
    inline void set_yxz(const float3& v) { y = v.x; x = v.y; z = v.z; }
    inline float3 yxw() const { return {y, x, w}; }
    inline void set_yxw(const float3& v) { y = v.x; x = v.y; w = v.z; }
    inline float3 yyx() const { return {y, y, x}; }
    inline float3 yyy() const { return {y, y, y}; }
    inline float3 yyz() const { return {y, y, z}; }
    inline float3 yyw() const { return {y, y, w}; }
    inline float3 yzx() const { return {y, z, x}; }
    inline void set_yzx(const float3& v) { y = v.x; z = v.y; x = v.z; }
    inline float3 yzy() const { return {y, z, y}; }
    inline float3 yzz() const { return {y, z, z}; }
    inline float3 yzw() const { return {y, z, w}; }
    inline void set_yzw(const float3& v) { y = v.x; z = v.y; w = v.z; }
    inline float3 ywx() const { return {y, w, x}; }
    inline void set_ywx(const float3& v) { y = v.x; w = v.y; x = v.z; }
    inline float3 ywy() const { return {y, w, y}; }
    inline float3 ywz() const { return {y, w, z}; }
    inline void set_ywz(const float3& v) { y = v.x; w = v.y; z = v.z; }
    inline float3 yww() const { return {y, w, w}; }
    inline float3 zxx() const { return {z, x, x}; }
    inline float3 zxy() const { return {z, x, y}; }
    inline void set_zxy(const float3& v) { z = v.x; x = v.y; y = v.z; }
    inline float3 zxz() const { return {z, x, z}; }
    inline float3 zxw() const { return {z, x, w}; }
    inline void set_zxw(const float3& v) { z = v.x; x = v.y; w = v.z; }
    inline float3 zyx() const { return {z, y, x}; }
    inline void set_zyx(const float3& v) { z = v.x; y = v.y; x = v.z; }
    inline float3 zyy() const { return {z, y, y}; }
    inline float3 zyz() const { return {z, y, z}; }
    inline float3 zyw() const { return {z, y, w}; }
    inline void set_zyw(const float3& v) { z = v.x; y = v.y; w = v.z; }
    inline float3 zzx() const { return {z, z, x}; }
    inline float3 zzy() const { return {z, z, y}; }
    inline float3 zzz() const { return {z, z, z}; }
    inline float3 zzw() const { return {z, z, w}; }
    inline float3 zwx() const { return {z, w, x}; }
    inline void set_zwx(const float3& v) { z = v.x; w = v.y; x = v.z; }
    inline float3 zwy() const { return {z, w, y}; }
    inline void set_zwy(const float3& v) { z = v.x; w = v.y; y = v.z; }
    inline float3 zwz() const { return {z, w, z}; }
    inline float3 zww() const { return {z, w, w}; }
    inline float3 wxx() const { return {w, x, x}; }
    inline float3 wxy() const { return {w, x, y}; }
    inline void set_wxy(const float3& v) { w = v.x; x = v.y; y = v.z; }
    inline float3 wxz() const { return {w, x, z}; }
    inline void set_wxz(const float3& v) { w = v.x; x = v.y; z = v.z; }
    inline float3 wxw() const { return {w, x, w}; }
    inline float3 wyx() const { return {w, y, x}; }
    inline void set_wyx(const float3& v) { w = v.x; y = v.y; x = v.z; }
    inline float3 wyy() const { return {w, y, y}; }
    inline float3 wyz() const { return {w, y, z}; }
    inline void set_wyz(const float3& v) { w = v.x; y = v.y; z = v.z; }
    inline float3 wyw() const { return {w, y, w}; }
    inline float3 wzx() const { return {w, z, x}; }
    inline void set_wzx(const float3& v) { w = v.x; z = v.y; x = v.z; }
    inline float3 wzy() const { return {w, z, y}; }
    inline void set_wzy(const float3& v) { w = v.x; z = v.y; y = v.z; }
    inline float3 wzz() const { return {w, z, z}; }
    inline float3 wzw() const { return {w, z, w}; }
    inline float3 wwx() const { return {w, w, x}; }
    inline float3 wwy() const { return {w, w, y}; }
    inline float3 wwz() const { return {w, w, z}; }
    inline float3 www() const { return {w, w, w}; }
    inline float4 xxxx() const { return {x, x, x, x}; }
    inline float4 xxxy() const { return {x, x, x, y}; }
    inline float4 xxxz() const { return {x, x, x, z}; }
    inline float4 xxxw() const { return {x, x, x, w}; }
    inline float4 xxyx() const { return {x, x, y, x}; }
    inline float4 xxyy() const { return {x, x, y, y}; }
    inline float4 xxyz() const { return {x, x, y, z}; }
    inline float4 xxyw() const { return {x, x, y, w}; }
    inline float4 xxzx() const { return {x, x, z, x}; }
    inline float4 xxzy() const { return {x, x, z, y}; }
    inline float4 xxzz() const { return {x, x, z, z}; }
    inline float4 xxzw() const { return {x, x, z, w}; }
    inline float4 xxwx() const { return {x, x, w, x}; }
    inline float4 xxwy() const { return {x, x, w, y}; }
    inline float4 xxwz() const { return {x, x, w, z}; }
    inline float4 xxww() const { return {x, x, w, w}; }
    inline float4 xyxx() const { return {x, y, x, x}; }
    inline float4 xyxy() const { return {x, y, x, y}; }
    inline float4 xyxz() const { return {x, y, x, z}; }
    inline float4 xyxw() const { return {x, y, x, w}; }
    inline float4 xyyx() const { return {x, y, y, x}; }
    inline float4 xyyy() const { return {x, y, y, y}; }
    inline float4 xyyz() const { return {x, y, y, z}; }
    inline float4 xyyw() const { return {x, y, y, w}; }
    inline float4 xyzx() const { return {x, y, z, x}; }
    inline float4 xyzy() const { return {x, y, z, y}; }
    inline float4 xyzz() const { return {x, y, z, z}; }
    inline float4 xyzw() const { return {x, y, z, w}; }
    inline void set_xyzw(const float4& v) { x = v.x; y = v.y; z = v.z; w = v.w; }
    inline float4 xywx() const { return {x, y, w, x}; }
    inline float4 xywy() const { return {x, y, w, y}; }
    inline float4 xywz() const { return {x, y, w, z}; }
    inline void set_xywz(const float4& v) { x = v.x; y = v.y; w = v.z; z = v.w; }
    inline float4 xyww() const { return {x, y, w, w}; }
    inline float4 xzxx() const { return {x, z, x, x}; }
    inline float4 xzxy() const { return {x, z, x, y}; }
    inline float4 xzxz() const { return {x, z, x, z}; }
    inline float4 xzxw() const { return {x, z, x, w}; }
    inline float4 xzyx() const { return {x, z, y, x}; }
    inline float4 xzyy() const { return {x, z, y, y}; }
    inline float4 xzyz() const { return {x, z, y, z}; }
    inline float4 xzyw() const { return {x, z, y, w}; }
    inline void set_xzyw(const float4& v) { x = v.x; z = v.y; y = v.z; w = v.w; }
    inline float4 xzzx() const { return {x, z, z, x}; }
    inline float4 xzzy() const { return {x, z, z, y}; }
    inline float4 xzzz() const { return {x, z, z, z}; }
    inline float4 xzzw() const { return {x, z, z, w}; }
    inline float4 xzwx() const { return {x, z, w, x}; }
    inline float4 xzwy() const { return {x, z, w, y}; }
    inline void set_xzwy(const float4& v) { x = v.x; z = v.y; w = v.z; y = v.w; }
    inline float4 xzwz() const { return {x, z, w, z}; }
    inline float4 xzww() const { return {x, z, w, w}; }
    inline float4 xwxx() const { return {x, w, x, x}; }
    inline float4 xwxy() const { return {x, w, x, y}; }
    inline float4 xwxz() const { return {x, w, x, z}; }
    inline float4 xwxw() const { return {x, w, x, w}; }
    inline float4 xwyx() const { return {x, w, y, x}; }
    inline float4 xwyy() const { return {x, w, y, y}; }
    inline float4 xwyz() const { return {x, w, y, z}; }
    inline void set_xwyz(const float4& v) { x = v.x; w = v.y; y = v.z; z = v.w; }
    inline float4 xwyw() const { return {x, w, y, w}; }
    inline float4 xwzx() const { return {x, w, z, x}; }
    inline float4 xwzy() const { return {x, w, z, y}; }
    inline void set_xwzy(const float4& v) { x = v.x; w = v.y; z = v.z; y = v.w; }
    inline float4 xwzz() const { return {x, w, z, z}; }
    inline float4 xwzw() const { return {x, w, z, w}; }
    inline float4 xwwx() const { return {x, w, w, x}; }
    inline float4 xwwy() const { return {x, w, w, y}; }
    inline float4 xwwz() const { return {x, w, w, z}; }
    inline float4 xwww() const { return {x, w, w, w}; }
    inline float4 yxxx() const { return {y, x, x, x}; }
    inline float4 yxxy() const { return {y, x, x, y}; }
    inline float4 yxxz() const { return {y, x, x, z}; }
    inline float4 yxxw() const { return {y, x, x, w}; }
    inline float4 yxyx() const { return {y, x, y, x}; }
    inline float4 yxyy() const { return {y, x, y, y}; }
    inline float4 yxyz() const { return {y, x, y, z}; }
    inline float4 yxyw() const { return {y, x, y, w}; }
    inline float4 yxzx() const { return {y, x, z, x}; }
    inline float4 yxzy() const { return {y, x, z, y}; }
    inline float4 yxzz() const { return {y, x, z, z}; }
    inline float4 yxzw() const { return {y, x, z, w}; }
    inline void set_yxzw(const float4& v) { y = v.x; x = v.y; z = v.z; w = v.w; }
    inline float4 yxwx() const { return {y, x, w, x}; }
    inline float4 yxwy() const { return {y, x, w, y}; }
    inline float4 yxwz() const { return {y, x, w, z}; }
    inline void set_yxwz(const float4& v) { y = v.x; x = v.y; w = v.z; z = v.w; }
    inline float4 yxww() const { return {y, x, w, w}; }
    inline float4 yyxx() const { return {y, y, x, x}; }
    inline float4 yyxy() const { return {y, y, x, y}; }
    inline float4 yyxz() const { return {y, y, x, z}; }
    inline float4 yyxw() const { return {y, y, x, w}; }
    inline float4 yyyx() const { return {y, y, y, x}; }
    inline float4 yyyy() const { return {y, y, y, y}; }
    inline float4 yyyz() const { return {y, y, y, z}; }
    inline float4 yyyw() const { return {y, y, y, w}; }
    inline float4 yyzx() const { return {y, y, z, x}; }
    inline float4 yyzy() const { return {y, y, z, y}; }
    inline float4 yyzz() const { return {y, y, z, z}; }
    inline float4 yyzw() const { return {y, y, z, w}; }
    inline float4 yywx() const { return {y, y, w, x}; }
    inline float4 yywy() const { return {y, y, w, y}; }
    inline float4 yywz() const { return {y, y, w, z}; }
    inline float4 yyww() const { return {y, y, w, w}; }
    inline float4 yzxx() const { return {y, z, x, x}; }
    inline float4 yzxy() const { return {y, z, x, y}; }
    inline float4 yzxz() const { return {y, z, x, z}; }
    inline float4 yzxw() const { return {y, z, x, w}; }
    inline void set_yzxw(const float4& v) { y = v.x; z = v.y; x = v.z; w = v.w; }
    inline float4 yzyx() const { return {y, z, y, x}; }
    inline float4 yzyy() const { return {y, z, y, y}; }
    inline float4 yzyz() const { return {y, z, y, z}; }
    inline float4 yzyw() const { return {y, z, y, w}; }
    inline float4 yzzx() const { return {y, z, z, x}; }
    inline float4 yzzy() const { return {y, z, z, y}; }
    inline float4 yzzz() const { return {y, z, z, z}; }
    inline float4 yzzw() const { return {y, z, z, w}; }
    inline float4 yzwx() const { return {y, z, w, x}; }
    inline void set_yzwx(const float4& v) { y = v.x; z = v.y; w = v.z; x = v.w; }
    inline float4 yzwy() const { return {y, z, w, y}; }
    inline float4 yzwz() const { return {y, z, w, z}; }
    inline float4 yzww() const { return {y, z, w, w}; }
    inline float4 ywxx() const { return {y, w, x, x}; }
    inline float4 ywxy() const { return {y, w, x, y}; }
    inline float4 ywxz() const { return {y, w, x, z}; }
    inline void set_ywxz(const float4& v) { y = v.x; w = v.y; x = v.z; z = v.w; }
    inline float4 ywxw() const { return {y, w, x, w}; }
    inline float4 ywyx() const { return {y, w, y, x}; }
    inline float4 ywyy() const { return {y, w, y, y}; }
    inline float4 ywyz() const { return {y, w, y, z}; }
    inline float4 ywyw() const { return {y, w, y, w}; }
    inline float4 ywzx() const { return {y, w, z, x}; }
    inline void set_ywzx(const float4& v) { y = v.x; w = v.y; z = v.z; x = v.w; }
    inline float4 ywzy() const { return {y, w, z, y}; }
    inline float4 ywzz() const { return {y, w, z, z}; }
    inline float4 ywzw() const { return {y, w, z, w}; }
    inline float4 ywwx() const { return {y, w, w, x}; }
    inline float4 ywwy() const { return {y, w, w, y}; }
    inline float4 ywwz() const { return {y, w, w, z}; }
    inline float4 ywww() const { return {y, w, w, w}; }
    inline float4 zxxx() const { return {z, x, x, x}; }
    inline float4 zxxy() const { return {z, x, x, y}; }
    inline float4 zxxz() const { return {z, x, x, z}; }
    inline float4 zxxw() const { return {z, x, x, w}; }
    inline float4 zxyx() const { return {z, x, y, x}; }
    inline float4 zxyy() const { return {z, x, y, y}; }
    inline float4 zxyz() const { return {z, x, y, z}; }
    inline float4 zxyw() const { return {z, x, y, w}; }
    inline void set_zxyw(const float4& v) { z = v.x; x = v.y; y = v.z; w = v.w; }
    inline float4 zxzx() const { return {z, x, z, x}; }
    inline float4 zxzy() const { return {z, x, z, y}; }
    inline float4 zxzz() const { return {z, x, z, z}; }
    inline float4 zxzw() const { return {z, x, z, w}; }
    inline float4 zxwx() const { return {z, x, w, x}; }
    inline float4 zxwy() const { return {z, x, w, y}; }
    inline void set_zxwy(const float4& v) { z = v.x; x = v.y; w = v.z; y = v.w; }
    inline float4 zxwz() const { return {z, x, w, z}; }
    inline float4 zxww() const { return {z, x, w, w}; }
    inline float4 zyxx() const { return {z, y, x, x}; }
    inline float4 zyxy() const { return {z, y, x, y}; }
    inline float4 zyxz() const { return {z, y, x, z}; }
    inline float4 zyxw() const { return {z, y, x, w}; }
    inline void set_zyxw(const float4& v) { z = v.x; y = v.y; x = v.z; w = v.w; }
    inline float4 zyyx() const { return {z, y, y, x}; }
    inline float4 zyyy() const { return {z, y, y, y}; }
    inline float4 zyyz() const { return {z, y, y, z}; }
    inline float4 zyyw() const { return {z, y, y, w}; }
    inline float4 zyzx() const { return {z, y, z, x}; }
    inline float4 zyzy() const { return {z, y, z, y}; }
    inline float4 zyzz() const { return {z, y, z, z}; }
    inline float4 zyzw() const { return {z, y, z, w}; }
    inline float4 zywx() const { return {z, y, w, x}; }
    inline void set_zywx(const float4& v) { z = v.x; y = v.y; w = v.z; x = v.w; }
    inline float4 zywy() const { return {z, y, w, y}; }
    inline float4 zywz() const { return {z, y, w, z}; }
    inline float4 zyww() const { return {z, y, w, w}; }
    inline float4 zzxx() const { return {z, z, x, x}; }
    inline float4 zzxy() const { return {z, z, x, y}; }
    inline float4 zzxz() const { return {z, z, x, z}; }
    inline float4 zzxw() const { return {z, z, x, w}; }
    inline float4 zzyx() const { return {z, z, y, x}; }
    inline float4 zzyy() const { return {z, z, y, y}; }
    inline float4 zzyz() const { return {z, z, y, z}; }
    inline float4 zzyw() const { return {z, z, y, w}; }
    inline float4 zzzx() const { return {z, z, z, x}; }
    inline float4 zzzy() const { return {z, z, z, y}; }
    inline float4 zzzz() const { return {z, z, z, z}; }
    inline float4 zzzw() const { return {z, z, z, w}; }
    inline float4 zzwx() const { return {z, z, w, x}; }
    inline float4 zzwy() const { return {z, z, w, y}; }
    inline float4 zzwz() const { return {z, z, w, z}; }
    inline float4 zzww() const { return {z, z, w, w}; }
    inline float4 zwxx() const { return {z, w, x, x}; }
    inline float4 zwxy() const { return {z, w, x, y}; }
    inline void set_zwxy(const float4& v) { z = v.x; w = v.y; x = v.z; y = v.w; }
    inline float4 zwxz() const { return {z, w, x, z}; }
    inline float4 zwxw() const { return {z, w, x, w}; }
    inline float4 zwyx() const { return {z, w, y, x}; }
    inline void set_zwyx(const float4& v) { z = v.x; w = v.y; y = v.z; x = v.w; }
    inline float4 zwyy() const { return {z, w, y, y}; }
    inline float4 zwyz() const { return {z, w, y, z}; }
    inline float4 zwyw() const { return {z, w, y, w}; }
    inline float4 zwzx() const { return {z, w, z, x}; }
    inline float4 zwzy() const { return {z, w, z, y}; }
    inline float4 zwzz() const { return {z, w, z, z}; }
    inline float4 zwzw() const { return {z, w, z, w}; }
    inline float4 zwwx() const { return {z, w, w, x}; }
    inline float4 zwwy() const { return {z, w, w, y}; }
    inline float4 zwwz() const { return {z, w, w, z}; }
    inline float4 zwww() const { return {z, w, w, w}; }
    inline float4 wxxx() const { return {w, x, x, x}; }
    inline float4 wxxy() const { return {w, x, x, y}; }
    inline float4 wxxz() const { return {w, x, x, z}; }
    inline float4 wxxw() const { return {w, x, x, w}; }
    inline float4 wxyx() const { return {w, x, y, x}; }
    inline float4 wxyy() const { return {w, x, y, y}; }
    inline float4 wxyz() const { return {w, x, y, z}; }
    inline void set_wxyz(const float4& v) { w = v.x; x = v.y; y = v.z; z = v.w; }
    inline float4 wxyw() const { return {w, x, y, w}; }
    inline float4 wxzx() const { return {w, x, z, x}; }
    inline float4 wxzy() const { return {w, x, z, y}; }
    inline void set_wxzy(const float4& v) { w = v.x; x = v.y; z = v.z; y = v.w; }
    inline float4 wxzz() const { return {w, x, z, z}; }
    inline float4 wxzw() const { return {w, x, z, w}; }
    inline float4 wxwx() const { return {w, x, w, x}; }
    inline float4 wxwy() const { return {w, x, w, y}; }
    inline float4 wxwz() const { return {w, x, w, z}; }
    inline float4 wxww() const { return {w, x, w, w}; }
    inline float4 wyxx() const { return {w, y, x, x}; }
    inline float4 wyxy() const { return {w, y, x, y}; }
    inline float4 wyxz() const { return {w, y, x, z}; }
    inline void set_wyxz(const float4& v) { w = v.x; y = v.y; x = v.z; z = v.w; }
    inline float4 wyxw() const { return {w, y, x, w}; }
    inline float4 wyyx() const { return {w, y, y, x}; }
    inline float4 wyyy() const { return {w, y, y, y}; }
    inline float4 wyyz() const { return {w, y, y, z}; }
    inline float4 wyyw() const { return {w, y, y, w}; }
    inline float4 wyzx() const { return {w, y, z, x}; }
    inline void set_wyzx(const float4& v) { w = v.x; y = v.y; z = v.z; x = v.w; }
    inline float4 wyzy() const { return {w, y, z, y}; }
    inline float4 wyzz() const { return {w, y, z, z}; }
    inline float4 wyzw() const { return {w, y, z, w}; }
    inline float4 wywx() const { return {w, y, w, x}; }
    inline float4 wywy() const { return {w, y, w, y}; }
    inline float4 wywz() const { return {w, y, w, z}; }
    inline float4 wyww() const { return {w, y, w, w}; }
    inline float4 wzxx() const { return {w, z, x, x}; }
    inline float4 wzxy() const { return {w, z, x, y}; }
    inline void set_wzxy(const float4& v) { w = v.x; z = v.y; x = v.z; y = v.w; }
    inline float4 wzxz() const { return {w, z, x, z}; }
    inline float4 wzxw() const { return {w, z, x, w}; }
    inline float4 wzyx() const { return {w, z, y, x}; }
    inline void set_wzyx(const float4& v) { w = v.x; z = v.y; y = v.z; x = v.w; }
    inline float4 wzyy() const { return {w, z, y, y}; }
    inline float4 wzyz() const { return {w, z, y, z}; }
    inline float4 wzyw() const { return {w, z, y, w}; }
    inline float4 wzzx() const { return {w, z, z, x}; }
    inline float4 wzzy() const { return {w, z, z, y}; }
    inline float4 wzzz() const { return {w, z, z, z}; }
    inline float4 wzzw() const { return {w, z, z, w}; }
    inline float4 wzwx() const { return {w, z, w, x}; }
    inline float4 wzwy() const { return {w, z, w, y}; }
    inline float4 wzwz() const { return {w, z, w, z}; }
    inline float4 wzww() const { return {w, z, w, w}; }
    inline float4 wwxx() const { return {w, w, x, x}; }
    inline float4 wwxy() const { return {w, w, x, y}; }
    inline float4 wwxz() const { return {w, w, x, z}; }
    inline float4 wwxw() const { return {w, w, x, w}; }
    inline float4 wwyx() const { return {w, w, y, x}; }
    inline float4 wwyy() const { return {w, w, y, y}; }
    inline float4 wwyz() const { return {w, w, y, z}; }
    inline float4 wwyw() const { return {w, w, y, w}; }
    inline float4 wwzx() const { return {w, w, z, x}; }
    inline float4 wwzy() const { return {w, w, z, y}; }
    inline float4 wwzz() const { return {w, w, z, z}; }
    inline float4 wwzw() const { return {w, w, z, w}; }
    inline float4 wwwx() const { return {w, w, w, x}; }
    inline float4 wwwy() const { return {w, w, w, y}; }
    inline float4 wwwz() const { return {w, w, w, z}; }
    inline float4 wwww() const { return {w, w, w, w}; }
    
    // hash
    inline static skr_hash _skr_hash(const float4& v) {
        auto hasher = ::skr::Hash<float>{};
        auto result = hasher(v.x);
        result = ::skr::hash_combine(result, hasher(v.y));
        result = ::skr::hash_combine(result, hasher(v.z));
        result = ::skr::hash_combine(result, hasher(v.w));
        return result;
    }
};
}
}
