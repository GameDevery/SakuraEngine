//! *************************************************************************
//! **  This file is auto-generated by gen_math, do not edit it manually.  **
//! *************************************************************************

#pragma once
#include <cstdint>
#include <cmath>
#include "../gen_math_fwd.hpp"
#include "../../math_constants.hpp"
#include <SkrBase/misc/debug.h>
#include <SkrBase/misc/hash.hpp>

namespace skr {
inline namespace math {
struct uint2 {
    uint32_t x, y;
    
    // ctor & dtor
    inline uint2(): x(0), y(0) {}
    inline uint2(MathNoInitType) {}
    inline uint2(uint32_t v): x(v), y(v) {}
    inline uint2(uint32_t v_x, uint32_t v_y): x(v_x), y(v_y) {}
    inline ~uint2() = default;
    
    // cast ctor
    explicit uint2(const float2& rhs);
    explicit uint2(const double2& rhs);
    uint2(const bool2& rhs);
    explicit uint2(const int2& rhs);
    explicit uint2(const long2& rhs);
    explicit uint2(const ulong2& rhs);
    
    // copy & move & assign & move assign
    inline uint2(const uint2&) = default;
    inline uint2(uint2&&) = default;
    inline uint2& operator=(const uint2&) = default;
    inline uint2& operator=(uint2&&) = default;
    
    // array assessor
    inline uint32_t& operator[](size_t i) {
        SKR_ASSERT(i >= 0 && i < 2 && "index out of range");
        return reinterpret_cast<uint32_t*>(this)[i];
    }
    inline uint32_t operator[](size_t i) const {
        return const_cast<uint2*>(this)->operator[](i);
    }
    
    // unary operator
    inline uint2 operator-() const { return { -x, -y }; }
    
    // arithmetic operator
    inline friend uint2 operator+(const uint2& lhs, const uint2& rhs) { return { lhs.x + rhs.x, lhs.y + rhs.y }; }
    inline friend uint2 operator-(const uint2& lhs, const uint2& rhs) { return { lhs.x - rhs.x, lhs.y - rhs.y }; }
    inline friend uint2 operator*(const uint2& lhs, const uint2& rhs) { return { lhs.x * rhs.x, lhs.y * rhs.y }; }
    inline friend uint2 operator/(const uint2& lhs, const uint2& rhs) { return { lhs.x / rhs.x, lhs.y / rhs.y }; }
    inline friend uint2 operator%(const uint2& lhs, const uint2& rhs) { return { lhs.x % rhs.x, lhs.y % rhs.y }; }
    
    // arithmetic assign operator
    inline uint2& operator+=(const uint2& rhs) { x += rhs.x, y += rhs.y; return *this; }
    inline uint2& operator-=(const uint2& rhs) { x -= rhs.x, y -= rhs.y; return *this; }
    inline uint2& operator*=(const uint2& rhs) { x *= rhs.x, y *= rhs.y; return *this; }
    inline uint2& operator/=(const uint2& rhs) { x /= rhs.x, y /= rhs.y; return *this; }
    inline uint2& operator%=(const uint2& rhs) { x %= rhs.x, y %= rhs.y; return *this; }
    
    // compare operator
    friend bool2 operator==(const uint2& lhs, const uint2& rhs);
    friend bool2 operator!=(const uint2& lhs, const uint2& rhs);
    friend bool2 operator<(const uint2& lhs, const uint2& rhs);
    friend bool2 operator<=(const uint2& lhs, const uint2& rhs);
    friend bool2 operator>(const uint2& lhs, const uint2& rhs);
    friend bool2 operator>=(const uint2& lhs, const uint2& rhs);
    
    // swizzle
    inline uint2 xx() const { return {x, x}; }
    inline uint2 xy() const { return {x, y}; }
    inline void set_xy(const uint2& v) { x = v.x; y = v.y; }
    inline uint2 yx() const { return {y, x}; }
    inline void set_yx(const uint2& v) { y = v.x; x = v.y; }
    inline uint2 yy() const { return {y, y}; }
    
    // hash
    inline static size_t _skr_hash(const uint2& v) {
        auto hasher = ::skr::Hash<uint32_t>{};
        auto result = hasher(v.x);
        result = ::skr::hash_combine(result, hasher(v.y));
        return result;
    }
};
struct uint3 {
    uint32_t x, y, z;
    
    // ctor & dtor
    inline uint3(): x(0), y(0), z(0) {}
    inline uint3(MathNoInitType) {}
    inline uint3(uint32_t v): x(v), y(v), z(v) {}
    inline uint3(uint32_t v_x, uint32_t v_y, uint32_t v_z): x(v_x), y(v_y), z(v_z) {}
    inline uint3(uint32_t v_x, uint2 v_yz): x(v_x), y(v_yz.x), z(v_yz.y) {}
    inline uint3(uint2 v_xy, uint32_t v_z): x(v_xy.x), y(v_xy.y), z(v_z) {}
    inline ~uint3() = default;
    
    // cast ctor
    explicit uint3(const float3& rhs);
    explicit uint3(const double3& rhs);
    uint3(const bool3& rhs);
    explicit uint3(const int3& rhs);
    explicit uint3(const long3& rhs);
    explicit uint3(const ulong3& rhs);
    
    // copy & move & assign & move assign
    inline uint3(const uint3&) = default;
    inline uint3(uint3&&) = default;
    inline uint3& operator=(const uint3&) = default;
    inline uint3& operator=(uint3&&) = default;
    
    // array assessor
    inline uint32_t& operator[](size_t i) {
        SKR_ASSERT(i >= 0 && i < 3 && "index out of range");
        return reinterpret_cast<uint32_t*>(this)[i];
    }
    inline uint32_t operator[](size_t i) const {
        return const_cast<uint3*>(this)->operator[](i);
    }
    
    // unary operator
    inline uint3 operator-() const { return { -x, -y, -z }; }
    
    // arithmetic operator
    inline friend uint3 operator+(const uint3& lhs, const uint3& rhs) { return { lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z }; }
    inline friend uint3 operator-(const uint3& lhs, const uint3& rhs) { return { lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z }; }
    inline friend uint3 operator*(const uint3& lhs, const uint3& rhs) { return { lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z }; }
    inline friend uint3 operator/(const uint3& lhs, const uint3& rhs) { return { lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z }; }
    inline friend uint3 operator%(const uint3& lhs, const uint3& rhs) { return { lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z }; }
    
    // arithmetic assign operator
    inline uint3& operator+=(const uint3& rhs) { x += rhs.x, y += rhs.y, z += rhs.z; return *this; }
    inline uint3& operator-=(const uint3& rhs) { x -= rhs.x, y -= rhs.y, z -= rhs.z; return *this; }
    inline uint3& operator*=(const uint3& rhs) { x *= rhs.x, y *= rhs.y, z *= rhs.z; return *this; }
    inline uint3& operator/=(const uint3& rhs) { x /= rhs.x, y /= rhs.y, z /= rhs.z; return *this; }
    inline uint3& operator%=(const uint3& rhs) { x %= rhs.x, y %= rhs.y, z %= rhs.z; return *this; }
    
    // compare operator
    friend bool3 operator==(const uint3& lhs, const uint3& rhs);
    friend bool3 operator!=(const uint3& lhs, const uint3& rhs);
    friend bool3 operator<(const uint3& lhs, const uint3& rhs);
    friend bool3 operator<=(const uint3& lhs, const uint3& rhs);
    friend bool3 operator>(const uint3& lhs, const uint3& rhs);
    friend bool3 operator>=(const uint3& lhs, const uint3& rhs);
    
    // swizzle
    inline uint2 xx() const { return {x, x}; }
    inline uint2 xy() const { return {x, y}; }
    inline void set_xy(const uint2& v) { x = v.x; y = v.y; }
    inline uint2 xz() const { return {x, z}; }
    inline void set_xz(const uint2& v) { x = v.x; z = v.y; }
    inline uint2 yx() const { return {y, x}; }
    inline void set_yx(const uint2& v) { y = v.x; x = v.y; }
    inline uint2 yy() const { return {y, y}; }
    inline uint2 yz() const { return {y, z}; }
    inline void set_yz(const uint2& v) { y = v.x; z = v.y; }
    inline uint2 zx() const { return {z, x}; }
    inline void set_zx(const uint2& v) { z = v.x; x = v.y; }
    inline uint2 zy() const { return {z, y}; }
    inline void set_zy(const uint2& v) { z = v.x; y = v.y; }
    inline uint2 zz() const { return {z, z}; }
    inline uint3 xxx() const { return {x, x, x}; }
    inline uint3 xxy() const { return {x, x, y}; }
    inline uint3 xxz() const { return {x, x, z}; }
    inline uint3 xyx() const { return {x, y, x}; }
    inline uint3 xyy() const { return {x, y, y}; }
    inline uint3 xyz() const { return {x, y, z}; }
    inline void set_xyz(const uint3& v) { x = v.x; y = v.y; z = v.z; }
    inline uint3 xzx() const { return {x, z, x}; }
    inline uint3 xzy() const { return {x, z, y}; }
    inline void set_xzy(const uint3& v) { x = v.x; z = v.y; y = v.z; }
    inline uint3 xzz() const { return {x, z, z}; }
    inline uint3 yxx() const { return {y, x, x}; }
    inline uint3 yxy() const { return {y, x, y}; }
    inline uint3 yxz() const { return {y, x, z}; }
    inline void set_yxz(const uint3& v) { y = v.x; x = v.y; z = v.z; }
    inline uint3 yyx() const { return {y, y, x}; }
    inline uint3 yyy() const { return {y, y, y}; }
    inline uint3 yyz() const { return {y, y, z}; }
    inline uint3 yzx() const { return {y, z, x}; }
    inline void set_yzx(const uint3& v) { y = v.x; z = v.y; x = v.z; }
    inline uint3 yzy() const { return {y, z, y}; }
    inline uint3 yzz() const { return {y, z, z}; }
    inline uint3 zxx() const { return {z, x, x}; }
    inline uint3 zxy() const { return {z, x, y}; }
    inline void set_zxy(const uint3& v) { z = v.x; x = v.y; y = v.z; }
    inline uint3 zxz() const { return {z, x, z}; }
    inline uint3 zyx() const { return {z, y, x}; }
    inline void set_zyx(const uint3& v) { z = v.x; y = v.y; x = v.z; }
    inline uint3 zyy() const { return {z, y, y}; }
    inline uint3 zyz() const { return {z, y, z}; }
    inline uint3 zzx() const { return {z, z, x}; }
    inline uint3 zzy() const { return {z, z, y}; }
    inline uint3 zzz() const { return {z, z, z}; }
    
    // hash
    inline static size_t _skr_hash(const uint3& v) {
        auto hasher = ::skr::Hash<uint32_t>{};
        auto result = hasher(v.x);
        result = ::skr::hash_combine(result, hasher(v.y));
        result = ::skr::hash_combine(result, hasher(v.z));
        return result;
    }
};
struct uint4 {
    uint32_t x, y, z, w;
    
    // ctor & dtor
    inline uint4(): x(0), y(0), z(0), w(0) {}
    inline uint4(MathNoInitType) {}
    inline uint4(uint32_t v): x(v), y(v), z(v), w(v) {}
    inline uint4(uint32_t v_x, uint32_t v_y, uint32_t v_z, uint32_t v_w): x(v_x), y(v_y), z(v_z), w(v_w) {}
    inline uint4(uint32_t v_x, uint32_t v_y, uint2 v_zw): x(v_x), y(v_y), z(v_zw.x), w(v_zw.y) {}
    inline uint4(uint32_t v_x, uint2 v_yz, uint32_t v_w): x(v_x), y(v_yz.x), z(v_yz.y), w(v_w) {}
    inline uint4(uint32_t v_x, uint3 v_yzw): x(v_x), y(v_yzw.x), z(v_yzw.y), w(v_yzw.z) {}
    inline uint4(uint2 v_xy, uint32_t v_z, uint32_t v_w): x(v_xy.x), y(v_xy.y), z(v_z), w(v_w) {}
    inline uint4(uint2 v_xy, uint2 v_zw): x(v_xy.x), y(v_xy.y), z(v_zw.x), w(v_zw.y) {}
    inline uint4(uint3 v_xyz, uint32_t v_w): x(v_xyz.x), y(v_xyz.y), z(v_xyz.z), w(v_w) {}
    inline ~uint4() = default;
    
    // cast ctor
    explicit uint4(const float4& rhs);
    explicit uint4(const double4& rhs);
    uint4(const bool4& rhs);
    explicit uint4(const int4& rhs);
    explicit uint4(const long4& rhs);
    explicit uint4(const ulong4& rhs);
    
    // copy & move & assign & move assign
    inline uint4(const uint4&) = default;
    inline uint4(uint4&&) = default;
    inline uint4& operator=(const uint4&) = default;
    inline uint4& operator=(uint4&&) = default;
    
    // array assessor
    inline uint32_t& operator[](size_t i) {
        SKR_ASSERT(i >= 0 && i < 4 && "index out of range");
        return reinterpret_cast<uint32_t*>(this)[i];
    }
    inline uint32_t operator[](size_t i) const {
        return const_cast<uint4*>(this)->operator[](i);
    }
    
    // unary operator
    inline uint4 operator-() const { return { -x, -y, -z, -w }; }
    
    // arithmetic operator
    inline friend uint4 operator+(const uint4& lhs, const uint4& rhs) { return { lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z, lhs.w + rhs.w }; }
    inline friend uint4 operator-(const uint4& lhs, const uint4& rhs) { return { lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z, lhs.w - rhs.w }; }
    inline friend uint4 operator*(const uint4& lhs, const uint4& rhs) { return { lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z, lhs.w * rhs.w }; }
    inline friend uint4 operator/(const uint4& lhs, const uint4& rhs) { return { lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z, lhs.w / rhs.w }; }
    inline friend uint4 operator%(const uint4& lhs, const uint4& rhs) { return { lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z, lhs.w % rhs.w }; }
    
    // arithmetic assign operator
    inline uint4& operator+=(const uint4& rhs) { x += rhs.x, y += rhs.y, z += rhs.z, w += rhs.w; return *this; }
    inline uint4& operator-=(const uint4& rhs) { x -= rhs.x, y -= rhs.y, z -= rhs.z, w -= rhs.w; return *this; }
    inline uint4& operator*=(const uint4& rhs) { x *= rhs.x, y *= rhs.y, z *= rhs.z, w *= rhs.w; return *this; }
    inline uint4& operator/=(const uint4& rhs) { x /= rhs.x, y /= rhs.y, z /= rhs.z, w /= rhs.w; return *this; }
    inline uint4& operator%=(const uint4& rhs) { x %= rhs.x, y %= rhs.y, z %= rhs.z, w %= rhs.w; return *this; }
    
    // compare operator
    friend bool4 operator==(const uint4& lhs, const uint4& rhs);
    friend bool4 operator!=(const uint4& lhs, const uint4& rhs);
    friend bool4 operator<(const uint4& lhs, const uint4& rhs);
    friend bool4 operator<=(const uint4& lhs, const uint4& rhs);
    friend bool4 operator>(const uint4& lhs, const uint4& rhs);
    friend bool4 operator>=(const uint4& lhs, const uint4& rhs);
    
    // swizzle
    inline uint2 xx() const { return {x, x}; }
    inline uint2 xy() const { return {x, y}; }
    inline void set_xy(const uint2& v) { x = v.x; y = v.y; }
    inline uint2 xz() const { return {x, z}; }
    inline void set_xz(const uint2& v) { x = v.x; z = v.y; }
    inline uint2 xw() const { return {x, w}; }
    inline void set_xw(const uint2& v) { x = v.x; w = v.y; }
    inline uint2 yx() const { return {y, x}; }
    inline void set_yx(const uint2& v) { y = v.x; x = v.y; }
    inline uint2 yy() const { return {y, y}; }
    inline uint2 yz() const { return {y, z}; }
    inline void set_yz(const uint2& v) { y = v.x; z = v.y; }
    inline uint2 yw() const { return {y, w}; }
    inline void set_yw(const uint2& v) { y = v.x; w = v.y; }
    inline uint2 zx() const { return {z, x}; }
    inline void set_zx(const uint2& v) { z = v.x; x = v.y; }
    inline uint2 zy() const { return {z, y}; }
    inline void set_zy(const uint2& v) { z = v.x; y = v.y; }
    inline uint2 zz() const { return {z, z}; }
    inline uint2 zw() const { return {z, w}; }
    inline void set_zw(const uint2& v) { z = v.x; w = v.y; }
    inline uint2 wx() const { return {w, x}; }
    inline void set_wx(const uint2& v) { w = v.x; x = v.y; }
    inline uint2 wy() const { return {w, y}; }
    inline void set_wy(const uint2& v) { w = v.x; y = v.y; }
    inline uint2 wz() const { return {w, z}; }
    inline void set_wz(const uint2& v) { w = v.x; z = v.y; }
    inline uint2 ww() const { return {w, w}; }
    inline uint3 xxx() const { return {x, x, x}; }
    inline uint3 xxy() const { return {x, x, y}; }
    inline uint3 xxz() const { return {x, x, z}; }
    inline uint3 xxw() const { return {x, x, w}; }
    inline uint3 xyx() const { return {x, y, x}; }
    inline uint3 xyy() const { return {x, y, y}; }
    inline uint3 xyz() const { return {x, y, z}; }
    inline void set_xyz(const uint3& v) { x = v.x; y = v.y; z = v.z; }
    inline uint3 xyw() const { return {x, y, w}; }
    inline void set_xyw(const uint3& v) { x = v.x; y = v.y; w = v.z; }
    inline uint3 xzx() const { return {x, z, x}; }
    inline uint3 xzy() const { return {x, z, y}; }
    inline void set_xzy(const uint3& v) { x = v.x; z = v.y; y = v.z; }
    inline uint3 xzz() const { return {x, z, z}; }
    inline uint3 xzw() const { return {x, z, w}; }
    inline void set_xzw(const uint3& v) { x = v.x; z = v.y; w = v.z; }
    inline uint3 xwx() const { return {x, w, x}; }
    inline uint3 xwy() const { return {x, w, y}; }
    inline void set_xwy(const uint3& v) { x = v.x; w = v.y; y = v.z; }
    inline uint3 xwz() const { return {x, w, z}; }
    inline void set_xwz(const uint3& v) { x = v.x; w = v.y; z = v.z; }
    inline uint3 xww() const { return {x, w, w}; }
    inline uint3 yxx() const { return {y, x, x}; }
    inline uint3 yxy() const { return {y, x, y}; }
    inline uint3 yxz() const { return {y, x, z}; }
    inline void set_yxz(const uint3& v) { y = v.x; x = v.y; z = v.z; }
    inline uint3 yxw() const { return {y, x, w}; }
    inline void set_yxw(const uint3& v) { y = v.x; x = v.y; w = v.z; }
    inline uint3 yyx() const { return {y, y, x}; }
    inline uint3 yyy() const { return {y, y, y}; }
    inline uint3 yyz() const { return {y, y, z}; }
    inline uint3 yyw() const { return {y, y, w}; }
    inline uint3 yzx() const { return {y, z, x}; }
    inline void set_yzx(const uint3& v) { y = v.x; z = v.y; x = v.z; }
    inline uint3 yzy() const { return {y, z, y}; }
    inline uint3 yzz() const { return {y, z, z}; }
    inline uint3 yzw() const { return {y, z, w}; }
    inline void set_yzw(const uint3& v) { y = v.x; z = v.y; w = v.z; }
    inline uint3 ywx() const { return {y, w, x}; }
    inline void set_ywx(const uint3& v) { y = v.x; w = v.y; x = v.z; }
    inline uint3 ywy() const { return {y, w, y}; }
    inline uint3 ywz() const { return {y, w, z}; }
    inline void set_ywz(const uint3& v) { y = v.x; w = v.y; z = v.z; }
    inline uint3 yww() const { return {y, w, w}; }
    inline uint3 zxx() const { return {z, x, x}; }
    inline uint3 zxy() const { return {z, x, y}; }
    inline void set_zxy(const uint3& v) { z = v.x; x = v.y; y = v.z; }
    inline uint3 zxz() const { return {z, x, z}; }
    inline uint3 zxw() const { return {z, x, w}; }
    inline void set_zxw(const uint3& v) { z = v.x; x = v.y; w = v.z; }
    inline uint3 zyx() const { return {z, y, x}; }
    inline void set_zyx(const uint3& v) { z = v.x; y = v.y; x = v.z; }
    inline uint3 zyy() const { return {z, y, y}; }
    inline uint3 zyz() const { return {z, y, z}; }
    inline uint3 zyw() const { return {z, y, w}; }
    inline void set_zyw(const uint3& v) { z = v.x; y = v.y; w = v.z; }
    inline uint3 zzx() const { return {z, z, x}; }
    inline uint3 zzy() const { return {z, z, y}; }
    inline uint3 zzz() const { return {z, z, z}; }
    inline uint3 zzw() const { return {z, z, w}; }
    inline uint3 zwx() const { return {z, w, x}; }
    inline void set_zwx(const uint3& v) { z = v.x; w = v.y; x = v.z; }
    inline uint3 zwy() const { return {z, w, y}; }
    inline void set_zwy(const uint3& v) { z = v.x; w = v.y; y = v.z; }
    inline uint3 zwz() const { return {z, w, z}; }
    inline uint3 zww() const { return {z, w, w}; }
    inline uint3 wxx() const { return {w, x, x}; }
    inline uint3 wxy() const { return {w, x, y}; }
    inline void set_wxy(const uint3& v) { w = v.x; x = v.y; y = v.z; }
    inline uint3 wxz() const { return {w, x, z}; }
    inline void set_wxz(const uint3& v) { w = v.x; x = v.y; z = v.z; }
    inline uint3 wxw() const { return {w, x, w}; }
    inline uint3 wyx() const { return {w, y, x}; }
    inline void set_wyx(const uint3& v) { w = v.x; y = v.y; x = v.z; }
    inline uint3 wyy() const { return {w, y, y}; }
    inline uint3 wyz() const { return {w, y, z}; }
    inline void set_wyz(const uint3& v) { w = v.x; y = v.y; z = v.z; }
    inline uint3 wyw() const { return {w, y, w}; }
    inline uint3 wzx() const { return {w, z, x}; }
    inline void set_wzx(const uint3& v) { w = v.x; z = v.y; x = v.z; }
    inline uint3 wzy() const { return {w, z, y}; }
    inline void set_wzy(const uint3& v) { w = v.x; z = v.y; y = v.z; }
    inline uint3 wzz() const { return {w, z, z}; }
    inline uint3 wzw() const { return {w, z, w}; }
    inline uint3 wwx() const { return {w, w, x}; }
    inline uint3 wwy() const { return {w, w, y}; }
    inline uint3 wwz() const { return {w, w, z}; }
    inline uint3 www() const { return {w, w, w}; }
    inline uint4 xxxx() const { return {x, x, x, x}; }
    inline uint4 xxxy() const { return {x, x, x, y}; }
    inline uint4 xxxz() const { return {x, x, x, z}; }
    inline uint4 xxxw() const { return {x, x, x, w}; }
    inline uint4 xxyx() const { return {x, x, y, x}; }
    inline uint4 xxyy() const { return {x, x, y, y}; }
    inline uint4 xxyz() const { return {x, x, y, z}; }
    inline uint4 xxyw() const { return {x, x, y, w}; }
    inline uint4 xxzx() const { return {x, x, z, x}; }
    inline uint4 xxzy() const { return {x, x, z, y}; }
    inline uint4 xxzz() const { return {x, x, z, z}; }
    inline uint4 xxzw() const { return {x, x, z, w}; }
    inline uint4 xxwx() const { return {x, x, w, x}; }
    inline uint4 xxwy() const { return {x, x, w, y}; }
    inline uint4 xxwz() const { return {x, x, w, z}; }
    inline uint4 xxww() const { return {x, x, w, w}; }
    inline uint4 xyxx() const { return {x, y, x, x}; }
    inline uint4 xyxy() const { return {x, y, x, y}; }
    inline uint4 xyxz() const { return {x, y, x, z}; }
    inline uint4 xyxw() const { return {x, y, x, w}; }
    inline uint4 xyyx() const { return {x, y, y, x}; }
    inline uint4 xyyy() const { return {x, y, y, y}; }
    inline uint4 xyyz() const { return {x, y, y, z}; }
    inline uint4 xyyw() const { return {x, y, y, w}; }
    inline uint4 xyzx() const { return {x, y, z, x}; }
    inline uint4 xyzy() const { return {x, y, z, y}; }
    inline uint4 xyzz() const { return {x, y, z, z}; }
    inline uint4 xyzw() const { return {x, y, z, w}; }
    inline void set_xyzw(const uint4& v) { x = v.x; y = v.y; z = v.z; w = v.w; }
    inline uint4 xywx() const { return {x, y, w, x}; }
    inline uint4 xywy() const { return {x, y, w, y}; }
    inline uint4 xywz() const { return {x, y, w, z}; }
    inline void set_xywz(const uint4& v) { x = v.x; y = v.y; w = v.z; z = v.w; }
    inline uint4 xyww() const { return {x, y, w, w}; }
    inline uint4 xzxx() const { return {x, z, x, x}; }
    inline uint4 xzxy() const { return {x, z, x, y}; }
    inline uint4 xzxz() const { return {x, z, x, z}; }
    inline uint4 xzxw() const { return {x, z, x, w}; }
    inline uint4 xzyx() const { return {x, z, y, x}; }
    inline uint4 xzyy() const { return {x, z, y, y}; }
    inline uint4 xzyz() const { return {x, z, y, z}; }
    inline uint4 xzyw() const { return {x, z, y, w}; }
    inline void set_xzyw(const uint4& v) { x = v.x; z = v.y; y = v.z; w = v.w; }
    inline uint4 xzzx() const { return {x, z, z, x}; }
    inline uint4 xzzy() const { return {x, z, z, y}; }
    inline uint4 xzzz() const { return {x, z, z, z}; }
    inline uint4 xzzw() const { return {x, z, z, w}; }
    inline uint4 xzwx() const { return {x, z, w, x}; }
    inline uint4 xzwy() const { return {x, z, w, y}; }
    inline void set_xzwy(const uint4& v) { x = v.x; z = v.y; w = v.z; y = v.w; }
    inline uint4 xzwz() const { return {x, z, w, z}; }
    inline uint4 xzww() const { return {x, z, w, w}; }
    inline uint4 xwxx() const { return {x, w, x, x}; }
    inline uint4 xwxy() const { return {x, w, x, y}; }
    inline uint4 xwxz() const { return {x, w, x, z}; }
    inline uint4 xwxw() const { return {x, w, x, w}; }
    inline uint4 xwyx() const { return {x, w, y, x}; }
    inline uint4 xwyy() const { return {x, w, y, y}; }
    inline uint4 xwyz() const { return {x, w, y, z}; }
    inline void set_xwyz(const uint4& v) { x = v.x; w = v.y; y = v.z; z = v.w; }
    inline uint4 xwyw() const { return {x, w, y, w}; }
    inline uint4 xwzx() const { return {x, w, z, x}; }
    inline uint4 xwzy() const { return {x, w, z, y}; }
    inline void set_xwzy(const uint4& v) { x = v.x; w = v.y; z = v.z; y = v.w; }
    inline uint4 xwzz() const { return {x, w, z, z}; }
    inline uint4 xwzw() const { return {x, w, z, w}; }
    inline uint4 xwwx() const { return {x, w, w, x}; }
    inline uint4 xwwy() const { return {x, w, w, y}; }
    inline uint4 xwwz() const { return {x, w, w, z}; }
    inline uint4 xwww() const { return {x, w, w, w}; }
    inline uint4 yxxx() const { return {y, x, x, x}; }
    inline uint4 yxxy() const { return {y, x, x, y}; }
    inline uint4 yxxz() const { return {y, x, x, z}; }
    inline uint4 yxxw() const { return {y, x, x, w}; }
    inline uint4 yxyx() const { return {y, x, y, x}; }
    inline uint4 yxyy() const { return {y, x, y, y}; }
    inline uint4 yxyz() const { return {y, x, y, z}; }
    inline uint4 yxyw() const { return {y, x, y, w}; }
    inline uint4 yxzx() const { return {y, x, z, x}; }
    inline uint4 yxzy() const { return {y, x, z, y}; }
    inline uint4 yxzz() const { return {y, x, z, z}; }
    inline uint4 yxzw() const { return {y, x, z, w}; }
    inline void set_yxzw(const uint4& v) { y = v.x; x = v.y; z = v.z; w = v.w; }
    inline uint4 yxwx() const { return {y, x, w, x}; }
    inline uint4 yxwy() const { return {y, x, w, y}; }
    inline uint4 yxwz() const { return {y, x, w, z}; }
    inline void set_yxwz(const uint4& v) { y = v.x; x = v.y; w = v.z; z = v.w; }
    inline uint4 yxww() const { return {y, x, w, w}; }
    inline uint4 yyxx() const { return {y, y, x, x}; }
    inline uint4 yyxy() const { return {y, y, x, y}; }
    inline uint4 yyxz() const { return {y, y, x, z}; }
    inline uint4 yyxw() const { return {y, y, x, w}; }
    inline uint4 yyyx() const { return {y, y, y, x}; }
    inline uint4 yyyy() const { return {y, y, y, y}; }
    inline uint4 yyyz() const { return {y, y, y, z}; }
    inline uint4 yyyw() const { return {y, y, y, w}; }
    inline uint4 yyzx() const { return {y, y, z, x}; }
    inline uint4 yyzy() const { return {y, y, z, y}; }
    inline uint4 yyzz() const { return {y, y, z, z}; }
    inline uint4 yyzw() const { return {y, y, z, w}; }
    inline uint4 yywx() const { return {y, y, w, x}; }
    inline uint4 yywy() const { return {y, y, w, y}; }
    inline uint4 yywz() const { return {y, y, w, z}; }
    inline uint4 yyww() const { return {y, y, w, w}; }
    inline uint4 yzxx() const { return {y, z, x, x}; }
    inline uint4 yzxy() const { return {y, z, x, y}; }
    inline uint4 yzxz() const { return {y, z, x, z}; }
    inline uint4 yzxw() const { return {y, z, x, w}; }
    inline void set_yzxw(const uint4& v) { y = v.x; z = v.y; x = v.z; w = v.w; }
    inline uint4 yzyx() const { return {y, z, y, x}; }
    inline uint4 yzyy() const { return {y, z, y, y}; }
    inline uint4 yzyz() const { return {y, z, y, z}; }
    inline uint4 yzyw() const { return {y, z, y, w}; }
    inline uint4 yzzx() const { return {y, z, z, x}; }
    inline uint4 yzzy() const { return {y, z, z, y}; }
    inline uint4 yzzz() const { return {y, z, z, z}; }
    inline uint4 yzzw() const { return {y, z, z, w}; }
    inline uint4 yzwx() const { return {y, z, w, x}; }
    inline void set_yzwx(const uint4& v) { y = v.x; z = v.y; w = v.z; x = v.w; }
    inline uint4 yzwy() const { return {y, z, w, y}; }
    inline uint4 yzwz() const { return {y, z, w, z}; }
    inline uint4 yzww() const { return {y, z, w, w}; }
    inline uint4 ywxx() const { return {y, w, x, x}; }
    inline uint4 ywxy() const { return {y, w, x, y}; }
    inline uint4 ywxz() const { return {y, w, x, z}; }
    inline void set_ywxz(const uint4& v) { y = v.x; w = v.y; x = v.z; z = v.w; }
    inline uint4 ywxw() const { return {y, w, x, w}; }
    inline uint4 ywyx() const { return {y, w, y, x}; }
    inline uint4 ywyy() const { return {y, w, y, y}; }
    inline uint4 ywyz() const { return {y, w, y, z}; }
    inline uint4 ywyw() const { return {y, w, y, w}; }
    inline uint4 ywzx() const { return {y, w, z, x}; }
    inline void set_ywzx(const uint4& v) { y = v.x; w = v.y; z = v.z; x = v.w; }
    inline uint4 ywzy() const { return {y, w, z, y}; }
    inline uint4 ywzz() const { return {y, w, z, z}; }
    inline uint4 ywzw() const { return {y, w, z, w}; }
    inline uint4 ywwx() const { return {y, w, w, x}; }
    inline uint4 ywwy() const { return {y, w, w, y}; }
    inline uint4 ywwz() const { return {y, w, w, z}; }
    inline uint4 ywww() const { return {y, w, w, w}; }
    inline uint4 zxxx() const { return {z, x, x, x}; }
    inline uint4 zxxy() const { return {z, x, x, y}; }
    inline uint4 zxxz() const { return {z, x, x, z}; }
    inline uint4 zxxw() const { return {z, x, x, w}; }
    inline uint4 zxyx() const { return {z, x, y, x}; }
    inline uint4 zxyy() const { return {z, x, y, y}; }
    inline uint4 zxyz() const { return {z, x, y, z}; }
    inline uint4 zxyw() const { return {z, x, y, w}; }
    inline void set_zxyw(const uint4& v) { z = v.x; x = v.y; y = v.z; w = v.w; }
    inline uint4 zxzx() const { return {z, x, z, x}; }
    inline uint4 zxzy() const { return {z, x, z, y}; }
    inline uint4 zxzz() const { return {z, x, z, z}; }
    inline uint4 zxzw() const { return {z, x, z, w}; }
    inline uint4 zxwx() const { return {z, x, w, x}; }
    inline uint4 zxwy() const { return {z, x, w, y}; }
    inline void set_zxwy(const uint4& v) { z = v.x; x = v.y; w = v.z; y = v.w; }
    inline uint4 zxwz() const { return {z, x, w, z}; }
    inline uint4 zxww() const { return {z, x, w, w}; }
    inline uint4 zyxx() const { return {z, y, x, x}; }
    inline uint4 zyxy() const { return {z, y, x, y}; }
    inline uint4 zyxz() const { return {z, y, x, z}; }
    inline uint4 zyxw() const { return {z, y, x, w}; }
    inline void set_zyxw(const uint4& v) { z = v.x; y = v.y; x = v.z; w = v.w; }
    inline uint4 zyyx() const { return {z, y, y, x}; }
    inline uint4 zyyy() const { return {z, y, y, y}; }
    inline uint4 zyyz() const { return {z, y, y, z}; }
    inline uint4 zyyw() const { return {z, y, y, w}; }
    inline uint4 zyzx() const { return {z, y, z, x}; }
    inline uint4 zyzy() const { return {z, y, z, y}; }
    inline uint4 zyzz() const { return {z, y, z, z}; }
    inline uint4 zyzw() const { return {z, y, z, w}; }
    inline uint4 zywx() const { return {z, y, w, x}; }
    inline void set_zywx(const uint4& v) { z = v.x; y = v.y; w = v.z; x = v.w; }
    inline uint4 zywy() const { return {z, y, w, y}; }
    inline uint4 zywz() const { return {z, y, w, z}; }
    inline uint4 zyww() const { return {z, y, w, w}; }
    inline uint4 zzxx() const { return {z, z, x, x}; }
    inline uint4 zzxy() const { return {z, z, x, y}; }
    inline uint4 zzxz() const { return {z, z, x, z}; }
    inline uint4 zzxw() const { return {z, z, x, w}; }
    inline uint4 zzyx() const { return {z, z, y, x}; }
    inline uint4 zzyy() const { return {z, z, y, y}; }
    inline uint4 zzyz() const { return {z, z, y, z}; }
    inline uint4 zzyw() const { return {z, z, y, w}; }
    inline uint4 zzzx() const { return {z, z, z, x}; }
    inline uint4 zzzy() const { return {z, z, z, y}; }
    inline uint4 zzzz() const { return {z, z, z, z}; }
    inline uint4 zzzw() const { return {z, z, z, w}; }
    inline uint4 zzwx() const { return {z, z, w, x}; }
    inline uint4 zzwy() const { return {z, z, w, y}; }
    inline uint4 zzwz() const { return {z, z, w, z}; }
    inline uint4 zzww() const { return {z, z, w, w}; }
    inline uint4 zwxx() const { return {z, w, x, x}; }
    inline uint4 zwxy() const { return {z, w, x, y}; }
    inline void set_zwxy(const uint4& v) { z = v.x; w = v.y; x = v.z; y = v.w; }
    inline uint4 zwxz() const { return {z, w, x, z}; }
    inline uint4 zwxw() const { return {z, w, x, w}; }
    inline uint4 zwyx() const { return {z, w, y, x}; }
    inline void set_zwyx(const uint4& v) { z = v.x; w = v.y; y = v.z; x = v.w; }
    inline uint4 zwyy() const { return {z, w, y, y}; }
    inline uint4 zwyz() const { return {z, w, y, z}; }
    inline uint4 zwyw() const { return {z, w, y, w}; }
    inline uint4 zwzx() const { return {z, w, z, x}; }
    inline uint4 zwzy() const { return {z, w, z, y}; }
    inline uint4 zwzz() const { return {z, w, z, z}; }
    inline uint4 zwzw() const { return {z, w, z, w}; }
    inline uint4 zwwx() const { return {z, w, w, x}; }
    inline uint4 zwwy() const { return {z, w, w, y}; }
    inline uint4 zwwz() const { return {z, w, w, z}; }
    inline uint4 zwww() const { return {z, w, w, w}; }
    inline uint4 wxxx() const { return {w, x, x, x}; }
    inline uint4 wxxy() const { return {w, x, x, y}; }
    inline uint4 wxxz() const { return {w, x, x, z}; }
    inline uint4 wxxw() const { return {w, x, x, w}; }
    inline uint4 wxyx() const { return {w, x, y, x}; }
    inline uint4 wxyy() const { return {w, x, y, y}; }
    inline uint4 wxyz() const { return {w, x, y, z}; }
    inline void set_wxyz(const uint4& v) { w = v.x; x = v.y; y = v.z; z = v.w; }
    inline uint4 wxyw() const { return {w, x, y, w}; }
    inline uint4 wxzx() const { return {w, x, z, x}; }
    inline uint4 wxzy() const { return {w, x, z, y}; }
    inline void set_wxzy(const uint4& v) { w = v.x; x = v.y; z = v.z; y = v.w; }
    inline uint4 wxzz() const { return {w, x, z, z}; }
    inline uint4 wxzw() const { return {w, x, z, w}; }
    inline uint4 wxwx() const { return {w, x, w, x}; }
    inline uint4 wxwy() const { return {w, x, w, y}; }
    inline uint4 wxwz() const { return {w, x, w, z}; }
    inline uint4 wxww() const { return {w, x, w, w}; }
    inline uint4 wyxx() const { return {w, y, x, x}; }
    inline uint4 wyxy() const { return {w, y, x, y}; }
    inline uint4 wyxz() const { return {w, y, x, z}; }
    inline void set_wyxz(const uint4& v) { w = v.x; y = v.y; x = v.z; z = v.w; }
    inline uint4 wyxw() const { return {w, y, x, w}; }
    inline uint4 wyyx() const { return {w, y, y, x}; }
    inline uint4 wyyy() const { return {w, y, y, y}; }
    inline uint4 wyyz() const { return {w, y, y, z}; }
    inline uint4 wyyw() const { return {w, y, y, w}; }
    inline uint4 wyzx() const { return {w, y, z, x}; }
    inline void set_wyzx(const uint4& v) { w = v.x; y = v.y; z = v.z; x = v.w; }
    inline uint4 wyzy() const { return {w, y, z, y}; }
    inline uint4 wyzz() const { return {w, y, z, z}; }
    inline uint4 wyzw() const { return {w, y, z, w}; }
    inline uint4 wywx() const { return {w, y, w, x}; }
    inline uint4 wywy() const { return {w, y, w, y}; }
    inline uint4 wywz() const { return {w, y, w, z}; }
    inline uint4 wyww() const { return {w, y, w, w}; }
    inline uint4 wzxx() const { return {w, z, x, x}; }
    inline uint4 wzxy() const { return {w, z, x, y}; }
    inline void set_wzxy(const uint4& v) { w = v.x; z = v.y; x = v.z; y = v.w; }
    inline uint4 wzxz() const { return {w, z, x, z}; }
    inline uint4 wzxw() const { return {w, z, x, w}; }
    inline uint4 wzyx() const { return {w, z, y, x}; }
    inline void set_wzyx(const uint4& v) { w = v.x; z = v.y; y = v.z; x = v.w; }
    inline uint4 wzyy() const { return {w, z, y, y}; }
    inline uint4 wzyz() const { return {w, z, y, z}; }
    inline uint4 wzyw() const { return {w, z, y, w}; }
    inline uint4 wzzx() const { return {w, z, z, x}; }
    inline uint4 wzzy() const { return {w, z, z, y}; }
    inline uint4 wzzz() const { return {w, z, z, z}; }
    inline uint4 wzzw() const { return {w, z, z, w}; }
    inline uint4 wzwx() const { return {w, z, w, x}; }
    inline uint4 wzwy() const { return {w, z, w, y}; }
    inline uint4 wzwz() const { return {w, z, w, z}; }
    inline uint4 wzww() const { return {w, z, w, w}; }
    inline uint4 wwxx() const { return {w, w, x, x}; }
    inline uint4 wwxy() const { return {w, w, x, y}; }
    inline uint4 wwxz() const { return {w, w, x, z}; }
    inline uint4 wwxw() const { return {w, w, x, w}; }
    inline uint4 wwyx() const { return {w, w, y, x}; }
    inline uint4 wwyy() const { return {w, w, y, y}; }
    inline uint4 wwyz() const { return {w, w, y, z}; }
    inline uint4 wwyw() const { return {w, w, y, w}; }
    inline uint4 wwzx() const { return {w, w, z, x}; }
    inline uint4 wwzy() const { return {w, w, z, y}; }
    inline uint4 wwzz() const { return {w, w, z, z}; }
    inline uint4 wwzw() const { return {w, w, z, w}; }
    inline uint4 wwwx() const { return {w, w, w, x}; }
    inline uint4 wwwy() const { return {w, w, w, y}; }
    inline uint4 wwwz() const { return {w, w, w, z}; }
    inline uint4 wwww() const { return {w, w, w, w}; }
    
    // hash
    inline static size_t _skr_hash(const uint4& v) {
        auto hasher = ::skr::Hash<uint32_t>{};
        auto result = hasher(v.x);
        result = ::skr::hash_combine(result, hasher(v.y));
        result = ::skr::hash_combine(result, hasher(v.z));
        result = ::skr::hash_combine(result, hasher(v.w));
        return result;
    }
};
}
}
