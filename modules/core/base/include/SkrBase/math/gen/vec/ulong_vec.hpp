//! *************************************************************************
//! **  This file is auto-generated by gen_math, do not edit it manually.  **
//! *************************************************************************

#pragma once
#include <cstdint>
#include <cmath>
#include "../gen_math_fwd.hpp"
#include "../../math_constants.hpp"
#include <SkrBase/misc/debug.h>
#include <SkrBase/misc/hash.hpp>

namespace skr {
inline namespace math {
struct ulong2 {
    uint64_t x, y;
    
    // ctor & dtor
    inline ulong2(): x(0), y(0) {}
    inline ulong2(MathNoInitType) {}
    inline ulong2(uint64_t v): x(v), y(v) {}
    inline ulong2(uint64_t v0, uint64_t v1): x(v0), y(v1) {}
    inline ~ulong2() = default;
    
    // cast ctor
    explicit ulong2(const float2& rhs);
    explicit ulong2(const double2& rhs);
    ulong2(const bool2& rhs);
    explicit ulong2(const int2& rhs);
    ulong2(const uint2& rhs);
    explicit ulong2(const long2& rhs);
    
    // copy & move & assign & move assign
    inline ulong2(const ulong2&) = default;
    inline ulong2(ulong2&&) = default;
    inline ulong2& operator=(const ulong2&) = default;
    inline ulong2& operator=(ulong2&&) = default;
    
    // array assessor
    inline uint64_t& operator[](size_t i) {
        SKR_ASSERT(i >= 0 && i < 2 && "index out of range");
        return reinterpret_cast<uint64_t*>(this)[i];
    }
    inline uint64_t operator[](size_t i) const {
        return const_cast<ulong2*>(this)->operator[](i);
    }
    
    // unary operator
    inline ulong2 operator-() const { return { -x, -y }; }
    
    // arithmetic operator
    inline friend ulong2 operator+(const ulong2& lhs, const ulong2& rhs) { return { lhs.x + rhs.x, lhs.y + rhs.y }; }
    inline friend ulong2 operator-(const ulong2& lhs, const ulong2& rhs) { return { lhs.x - rhs.x, lhs.y - rhs.y }; }
    inline friend ulong2 operator*(const ulong2& lhs, const ulong2& rhs) { return { lhs.x * rhs.x, lhs.y * rhs.y }; }
    inline friend ulong2 operator/(const ulong2& lhs, const ulong2& rhs) { return { lhs.x / rhs.x, lhs.y / rhs.y }; }
    inline friend ulong2 operator%(const ulong2& lhs, const ulong2& rhs) { return { lhs.x % rhs.x, lhs.y % rhs.y }; }
    
    // arithmetic assign operator
    inline ulong2& operator+=(const ulong2& rhs) { x += rhs.x, y += rhs.y; return *this; }
    inline ulong2& operator-=(const ulong2& rhs) { x -= rhs.x, y -= rhs.y; return *this; }
    inline ulong2& operator*=(const ulong2& rhs) { x *= rhs.x, y *= rhs.y; return *this; }
    inline ulong2& operator/=(const ulong2& rhs) { x /= rhs.x, y /= rhs.y; return *this; }
    inline ulong2& operator%=(const ulong2& rhs) { x %= rhs.x, y %= rhs.y; return *this; }
    
    // compare operator
    friend bool2 operator==(const ulong2& lhs, const ulong2& rhs);
    friend bool2 operator!=(const ulong2& lhs, const ulong2& rhs);
    friend bool2 operator<(const ulong2& lhs, const ulong2& rhs);
    friend bool2 operator<=(const ulong2& lhs, const ulong2& rhs);
    friend bool2 operator>(const ulong2& lhs, const ulong2& rhs);
    friend bool2 operator>=(const ulong2& lhs, const ulong2& rhs);
    
    // swizzle
    inline ulong2 xx() const { return {x, x}; }
    inline ulong2 xy() const { return {x, y}; }
    inline void set_xy(const ulong2& v) { x = v.x; y = v.y; }
    inline ulong2 yx() const { return {y, x}; }
    inline void set_yx(const ulong2& v) { y = v.x; x = v.y; }
    inline ulong2 yy() const { return {y, y}; }
    
    // hash
    inline static size_t _skr_hash(const ulong2& v) {
        auto hasher = ::skr::Hash<uint64_t>{};
        auto result = hasher(v.x);
        result = ::skr::hash_combine(result, hasher(v.y));
        return result;
    }
};
struct ulong3 {
    uint64_t x, y, z;
    
    // ctor & dtor
    inline ulong3(): x(0), y(0), z(0) {}
    inline ulong3(MathNoInitType) {}
    inline ulong3(uint64_t v): x(v), y(v), z(v) {}
    inline ulong3(uint64_t v0, uint64_t v1, uint64_t v2): x(v0), y(v1), z(v2) {}
    inline ulong3(uint64_t v0, ulong2 v1): x(v0), y(v1.x), z(v1.y) {}
    inline ulong3(ulong2 v0, uint64_t v1): x(v0.x), y(v0.y), z(v1) {}
    inline ~ulong3() = default;
    
    // cast ctor
    explicit ulong3(const float3& rhs);
    explicit ulong3(const double3& rhs);
    ulong3(const bool3& rhs);
    explicit ulong3(const int3& rhs);
    ulong3(const uint3& rhs);
    explicit ulong3(const long3& rhs);
    
    // copy & move & assign & move assign
    inline ulong3(const ulong3&) = default;
    inline ulong3(ulong3&&) = default;
    inline ulong3& operator=(const ulong3&) = default;
    inline ulong3& operator=(ulong3&&) = default;
    
    // array assessor
    inline uint64_t& operator[](size_t i) {
        SKR_ASSERT(i >= 0 && i < 3 && "index out of range");
        return reinterpret_cast<uint64_t*>(this)[i];
    }
    inline uint64_t operator[](size_t i) const {
        return const_cast<ulong3*>(this)->operator[](i);
    }
    
    // unary operator
    inline ulong3 operator-() const { return { -x, -y, -z }; }
    
    // arithmetic operator
    inline friend ulong3 operator+(const ulong3& lhs, const ulong3& rhs) { return { lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z }; }
    inline friend ulong3 operator-(const ulong3& lhs, const ulong3& rhs) { return { lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z }; }
    inline friend ulong3 operator*(const ulong3& lhs, const ulong3& rhs) { return { lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z }; }
    inline friend ulong3 operator/(const ulong3& lhs, const ulong3& rhs) { return { lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z }; }
    inline friend ulong3 operator%(const ulong3& lhs, const ulong3& rhs) { return { lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z }; }
    
    // arithmetic assign operator
    inline ulong3& operator+=(const ulong3& rhs) { x += rhs.x, y += rhs.y, z += rhs.z; return *this; }
    inline ulong3& operator-=(const ulong3& rhs) { x -= rhs.x, y -= rhs.y, z -= rhs.z; return *this; }
    inline ulong3& operator*=(const ulong3& rhs) { x *= rhs.x, y *= rhs.y, z *= rhs.z; return *this; }
    inline ulong3& operator/=(const ulong3& rhs) { x /= rhs.x, y /= rhs.y, z /= rhs.z; return *this; }
    inline ulong3& operator%=(const ulong3& rhs) { x %= rhs.x, y %= rhs.y, z %= rhs.z; return *this; }
    
    // compare operator
    friend bool3 operator==(const ulong3& lhs, const ulong3& rhs);
    friend bool3 operator!=(const ulong3& lhs, const ulong3& rhs);
    friend bool3 operator<(const ulong3& lhs, const ulong3& rhs);
    friend bool3 operator<=(const ulong3& lhs, const ulong3& rhs);
    friend bool3 operator>(const ulong3& lhs, const ulong3& rhs);
    friend bool3 operator>=(const ulong3& lhs, const ulong3& rhs);
    
    // swizzle
    inline ulong2 xx() const { return {x, x}; }
    inline ulong2 xy() const { return {x, y}; }
    inline void set_xy(const ulong2& v) { x = v.x; y = v.y; }
    inline ulong2 xz() const { return {x, z}; }
    inline void set_xz(const ulong2& v) { x = v.x; z = v.y; }
    inline ulong2 yx() const { return {y, x}; }
    inline void set_yx(const ulong2& v) { y = v.x; x = v.y; }
    inline ulong2 yy() const { return {y, y}; }
    inline ulong2 yz() const { return {y, z}; }
    inline void set_yz(const ulong2& v) { y = v.x; z = v.y; }
    inline ulong2 zx() const { return {z, x}; }
    inline void set_zx(const ulong2& v) { z = v.x; x = v.y; }
    inline ulong2 zy() const { return {z, y}; }
    inline void set_zy(const ulong2& v) { z = v.x; y = v.y; }
    inline ulong2 zz() const { return {z, z}; }
    inline ulong3 xxx() const { return {x, x, x}; }
    inline ulong3 xxy() const { return {x, x, y}; }
    inline ulong3 xxz() const { return {x, x, z}; }
    inline ulong3 xyx() const { return {x, y, x}; }
    inline ulong3 xyy() const { return {x, y, y}; }
    inline ulong3 xyz() const { return {x, y, z}; }
    inline void set_xyz(const ulong3& v) { x = v.x; y = v.y; z = v.z; }
    inline ulong3 xzx() const { return {x, z, x}; }
    inline ulong3 xzy() const { return {x, z, y}; }
    inline void set_xzy(const ulong3& v) { x = v.x; z = v.y; y = v.z; }
    inline ulong3 xzz() const { return {x, z, z}; }
    inline ulong3 yxx() const { return {y, x, x}; }
    inline ulong3 yxy() const { return {y, x, y}; }
    inline ulong3 yxz() const { return {y, x, z}; }
    inline void set_yxz(const ulong3& v) { y = v.x; x = v.y; z = v.z; }
    inline ulong3 yyx() const { return {y, y, x}; }
    inline ulong3 yyy() const { return {y, y, y}; }
    inline ulong3 yyz() const { return {y, y, z}; }
    inline ulong3 yzx() const { return {y, z, x}; }
    inline void set_yzx(const ulong3& v) { y = v.x; z = v.y; x = v.z; }
    inline ulong3 yzy() const { return {y, z, y}; }
    inline ulong3 yzz() const { return {y, z, z}; }
    inline ulong3 zxx() const { return {z, x, x}; }
    inline ulong3 zxy() const { return {z, x, y}; }
    inline void set_zxy(const ulong3& v) { z = v.x; x = v.y; y = v.z; }
    inline ulong3 zxz() const { return {z, x, z}; }
    inline ulong3 zyx() const { return {z, y, x}; }
    inline void set_zyx(const ulong3& v) { z = v.x; y = v.y; x = v.z; }
    inline ulong3 zyy() const { return {z, y, y}; }
    inline ulong3 zyz() const { return {z, y, z}; }
    inline ulong3 zzx() const { return {z, z, x}; }
    inline ulong3 zzy() const { return {z, z, y}; }
    inline ulong3 zzz() const { return {z, z, z}; }
    
    // hash
    inline static size_t _skr_hash(const ulong3& v) {
        auto hasher = ::skr::Hash<uint64_t>{};
        auto result = hasher(v.x);
        result = ::skr::hash_combine(result, hasher(v.y));
        result = ::skr::hash_combine(result, hasher(v.z));
        return result;
    }
};
struct ulong4 {
    uint64_t x, y, z, w;
    
    // ctor & dtor
    inline ulong4(): x(0), y(0), z(0), w(0) {}
    inline ulong4(MathNoInitType) {}
    inline ulong4(uint64_t v): x(v), y(v), z(v), w(v) {}
    inline ulong4(uint64_t v0, uint64_t v1, uint64_t v2, uint64_t v3): x(v0), y(v1), z(v2), w(v3) {}
    inline ulong4(uint64_t v0, uint64_t v1, ulong2 v2): x(v0), y(v1), z(v2.x), w(v2.y) {}
    inline ulong4(uint64_t v0, ulong2 v1, uint64_t v2): x(v0), y(v1.x), z(v1.y), w(v2) {}
    inline ulong4(uint64_t v0, ulong3 v1): x(v0), y(v1.x), z(v1.y), w(v1.z) {}
    inline ulong4(ulong2 v0, uint64_t v1, uint64_t v2): x(v0.x), y(v0.y), z(v1), w(v2) {}
    inline ulong4(ulong2 v0, ulong2 v1): x(v0.x), y(v0.y), z(v1.x), w(v1.y) {}
    inline ulong4(ulong3 v0, uint64_t v1): x(v0.x), y(v0.y), z(v0.z), w(v1) {}
    inline ~ulong4() = default;
    
    // cast ctor
    explicit ulong4(const float4& rhs);
    explicit ulong4(const double4& rhs);
    ulong4(const bool4& rhs);
    explicit ulong4(const int4& rhs);
    ulong4(const uint4& rhs);
    explicit ulong4(const long4& rhs);
    
    // copy & move & assign & move assign
    inline ulong4(const ulong4&) = default;
    inline ulong4(ulong4&&) = default;
    inline ulong4& operator=(const ulong4&) = default;
    inline ulong4& operator=(ulong4&&) = default;
    
    // array assessor
    inline uint64_t& operator[](size_t i) {
        SKR_ASSERT(i >= 0 && i < 4 && "index out of range");
        return reinterpret_cast<uint64_t*>(this)[i];
    }
    inline uint64_t operator[](size_t i) const {
        return const_cast<ulong4*>(this)->operator[](i);
    }
    
    // unary operator
    inline ulong4 operator-() const { return { -x, -y, -z, -w }; }
    
    // arithmetic operator
    inline friend ulong4 operator+(const ulong4& lhs, const ulong4& rhs) { return { lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z, lhs.w + rhs.w }; }
    inline friend ulong4 operator-(const ulong4& lhs, const ulong4& rhs) { return { lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z, lhs.w - rhs.w }; }
    inline friend ulong4 operator*(const ulong4& lhs, const ulong4& rhs) { return { lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z, lhs.w * rhs.w }; }
    inline friend ulong4 operator/(const ulong4& lhs, const ulong4& rhs) { return { lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z, lhs.w / rhs.w }; }
    inline friend ulong4 operator%(const ulong4& lhs, const ulong4& rhs) { return { lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z, lhs.w % rhs.w }; }
    
    // arithmetic assign operator
    inline ulong4& operator+=(const ulong4& rhs) { x += rhs.x, y += rhs.y, z += rhs.z, w += rhs.w; return *this; }
    inline ulong4& operator-=(const ulong4& rhs) { x -= rhs.x, y -= rhs.y, z -= rhs.z, w -= rhs.w; return *this; }
    inline ulong4& operator*=(const ulong4& rhs) { x *= rhs.x, y *= rhs.y, z *= rhs.z, w *= rhs.w; return *this; }
    inline ulong4& operator/=(const ulong4& rhs) { x /= rhs.x, y /= rhs.y, z /= rhs.z, w /= rhs.w; return *this; }
    inline ulong4& operator%=(const ulong4& rhs) { x %= rhs.x, y %= rhs.y, z %= rhs.z, w %= rhs.w; return *this; }
    
    // compare operator
    friend bool4 operator==(const ulong4& lhs, const ulong4& rhs);
    friend bool4 operator!=(const ulong4& lhs, const ulong4& rhs);
    friend bool4 operator<(const ulong4& lhs, const ulong4& rhs);
    friend bool4 operator<=(const ulong4& lhs, const ulong4& rhs);
    friend bool4 operator>(const ulong4& lhs, const ulong4& rhs);
    friend bool4 operator>=(const ulong4& lhs, const ulong4& rhs);
    
    // swizzle
    inline ulong2 xx() const { return {x, x}; }
    inline ulong2 xy() const { return {x, y}; }
    inline void set_xy(const ulong2& v) { x = v.x; y = v.y; }
    inline ulong2 xz() const { return {x, z}; }
    inline void set_xz(const ulong2& v) { x = v.x; z = v.y; }
    inline ulong2 xw() const { return {x, w}; }
    inline void set_xw(const ulong2& v) { x = v.x; w = v.y; }
    inline ulong2 yx() const { return {y, x}; }
    inline void set_yx(const ulong2& v) { y = v.x; x = v.y; }
    inline ulong2 yy() const { return {y, y}; }
    inline ulong2 yz() const { return {y, z}; }
    inline void set_yz(const ulong2& v) { y = v.x; z = v.y; }
    inline ulong2 yw() const { return {y, w}; }
    inline void set_yw(const ulong2& v) { y = v.x; w = v.y; }
    inline ulong2 zx() const { return {z, x}; }
    inline void set_zx(const ulong2& v) { z = v.x; x = v.y; }
    inline ulong2 zy() const { return {z, y}; }
    inline void set_zy(const ulong2& v) { z = v.x; y = v.y; }
    inline ulong2 zz() const { return {z, z}; }
    inline ulong2 zw() const { return {z, w}; }
    inline void set_zw(const ulong2& v) { z = v.x; w = v.y; }
    inline ulong2 wx() const { return {w, x}; }
    inline void set_wx(const ulong2& v) { w = v.x; x = v.y; }
    inline ulong2 wy() const { return {w, y}; }
    inline void set_wy(const ulong2& v) { w = v.x; y = v.y; }
    inline ulong2 wz() const { return {w, z}; }
    inline void set_wz(const ulong2& v) { w = v.x; z = v.y; }
    inline ulong2 ww() const { return {w, w}; }
    inline ulong3 xxx() const { return {x, x, x}; }
    inline ulong3 xxy() const { return {x, x, y}; }
    inline ulong3 xxz() const { return {x, x, z}; }
    inline ulong3 xxw() const { return {x, x, w}; }
    inline ulong3 xyx() const { return {x, y, x}; }
    inline ulong3 xyy() const { return {x, y, y}; }
    inline ulong3 xyz() const { return {x, y, z}; }
    inline void set_xyz(const ulong3& v) { x = v.x; y = v.y; z = v.z; }
    inline ulong3 xyw() const { return {x, y, w}; }
    inline void set_xyw(const ulong3& v) { x = v.x; y = v.y; w = v.z; }
    inline ulong3 xzx() const { return {x, z, x}; }
    inline ulong3 xzy() const { return {x, z, y}; }
    inline void set_xzy(const ulong3& v) { x = v.x; z = v.y; y = v.z; }
    inline ulong3 xzz() const { return {x, z, z}; }
    inline ulong3 xzw() const { return {x, z, w}; }
    inline void set_xzw(const ulong3& v) { x = v.x; z = v.y; w = v.z; }
    inline ulong3 xwx() const { return {x, w, x}; }
    inline ulong3 xwy() const { return {x, w, y}; }
    inline void set_xwy(const ulong3& v) { x = v.x; w = v.y; y = v.z; }
    inline ulong3 xwz() const { return {x, w, z}; }
    inline void set_xwz(const ulong3& v) { x = v.x; w = v.y; z = v.z; }
    inline ulong3 xww() const { return {x, w, w}; }
    inline ulong3 yxx() const { return {y, x, x}; }
    inline ulong3 yxy() const { return {y, x, y}; }
    inline ulong3 yxz() const { return {y, x, z}; }
    inline void set_yxz(const ulong3& v) { y = v.x; x = v.y; z = v.z; }
    inline ulong3 yxw() const { return {y, x, w}; }
    inline void set_yxw(const ulong3& v) { y = v.x; x = v.y; w = v.z; }
    inline ulong3 yyx() const { return {y, y, x}; }
    inline ulong3 yyy() const { return {y, y, y}; }
    inline ulong3 yyz() const { return {y, y, z}; }
    inline ulong3 yyw() const { return {y, y, w}; }
    inline ulong3 yzx() const { return {y, z, x}; }
    inline void set_yzx(const ulong3& v) { y = v.x; z = v.y; x = v.z; }
    inline ulong3 yzy() const { return {y, z, y}; }
    inline ulong3 yzz() const { return {y, z, z}; }
    inline ulong3 yzw() const { return {y, z, w}; }
    inline void set_yzw(const ulong3& v) { y = v.x; z = v.y; w = v.z; }
    inline ulong3 ywx() const { return {y, w, x}; }
    inline void set_ywx(const ulong3& v) { y = v.x; w = v.y; x = v.z; }
    inline ulong3 ywy() const { return {y, w, y}; }
    inline ulong3 ywz() const { return {y, w, z}; }
    inline void set_ywz(const ulong3& v) { y = v.x; w = v.y; z = v.z; }
    inline ulong3 yww() const { return {y, w, w}; }
    inline ulong3 zxx() const { return {z, x, x}; }
    inline ulong3 zxy() const { return {z, x, y}; }
    inline void set_zxy(const ulong3& v) { z = v.x; x = v.y; y = v.z; }
    inline ulong3 zxz() const { return {z, x, z}; }
    inline ulong3 zxw() const { return {z, x, w}; }
    inline void set_zxw(const ulong3& v) { z = v.x; x = v.y; w = v.z; }
    inline ulong3 zyx() const { return {z, y, x}; }
    inline void set_zyx(const ulong3& v) { z = v.x; y = v.y; x = v.z; }
    inline ulong3 zyy() const { return {z, y, y}; }
    inline ulong3 zyz() const { return {z, y, z}; }
    inline ulong3 zyw() const { return {z, y, w}; }
    inline void set_zyw(const ulong3& v) { z = v.x; y = v.y; w = v.z; }
    inline ulong3 zzx() const { return {z, z, x}; }
    inline ulong3 zzy() const { return {z, z, y}; }
    inline ulong3 zzz() const { return {z, z, z}; }
    inline ulong3 zzw() const { return {z, z, w}; }
    inline ulong3 zwx() const { return {z, w, x}; }
    inline void set_zwx(const ulong3& v) { z = v.x; w = v.y; x = v.z; }
    inline ulong3 zwy() const { return {z, w, y}; }
    inline void set_zwy(const ulong3& v) { z = v.x; w = v.y; y = v.z; }
    inline ulong3 zwz() const { return {z, w, z}; }
    inline ulong3 zww() const { return {z, w, w}; }
    inline ulong3 wxx() const { return {w, x, x}; }
    inline ulong3 wxy() const { return {w, x, y}; }
    inline void set_wxy(const ulong3& v) { w = v.x; x = v.y; y = v.z; }
    inline ulong3 wxz() const { return {w, x, z}; }
    inline void set_wxz(const ulong3& v) { w = v.x; x = v.y; z = v.z; }
    inline ulong3 wxw() const { return {w, x, w}; }
    inline ulong3 wyx() const { return {w, y, x}; }
    inline void set_wyx(const ulong3& v) { w = v.x; y = v.y; x = v.z; }
    inline ulong3 wyy() const { return {w, y, y}; }
    inline ulong3 wyz() const { return {w, y, z}; }
    inline void set_wyz(const ulong3& v) { w = v.x; y = v.y; z = v.z; }
    inline ulong3 wyw() const { return {w, y, w}; }
    inline ulong3 wzx() const { return {w, z, x}; }
    inline void set_wzx(const ulong3& v) { w = v.x; z = v.y; x = v.z; }
    inline ulong3 wzy() const { return {w, z, y}; }
    inline void set_wzy(const ulong3& v) { w = v.x; z = v.y; y = v.z; }
    inline ulong3 wzz() const { return {w, z, z}; }
    inline ulong3 wzw() const { return {w, z, w}; }
    inline ulong3 wwx() const { return {w, w, x}; }
    inline ulong3 wwy() const { return {w, w, y}; }
    inline ulong3 wwz() const { return {w, w, z}; }
    inline ulong3 www() const { return {w, w, w}; }
    inline ulong4 xxxx() const { return {x, x, x, x}; }
    inline ulong4 xxxy() const { return {x, x, x, y}; }
    inline ulong4 xxxz() const { return {x, x, x, z}; }
    inline ulong4 xxxw() const { return {x, x, x, w}; }
    inline ulong4 xxyx() const { return {x, x, y, x}; }
    inline ulong4 xxyy() const { return {x, x, y, y}; }
    inline ulong4 xxyz() const { return {x, x, y, z}; }
    inline ulong4 xxyw() const { return {x, x, y, w}; }
    inline ulong4 xxzx() const { return {x, x, z, x}; }
    inline ulong4 xxzy() const { return {x, x, z, y}; }
    inline ulong4 xxzz() const { return {x, x, z, z}; }
    inline ulong4 xxzw() const { return {x, x, z, w}; }
    inline ulong4 xxwx() const { return {x, x, w, x}; }
    inline ulong4 xxwy() const { return {x, x, w, y}; }
    inline ulong4 xxwz() const { return {x, x, w, z}; }
    inline ulong4 xxww() const { return {x, x, w, w}; }
    inline ulong4 xyxx() const { return {x, y, x, x}; }
    inline ulong4 xyxy() const { return {x, y, x, y}; }
    inline ulong4 xyxz() const { return {x, y, x, z}; }
    inline ulong4 xyxw() const { return {x, y, x, w}; }
    inline ulong4 xyyx() const { return {x, y, y, x}; }
    inline ulong4 xyyy() const { return {x, y, y, y}; }
    inline ulong4 xyyz() const { return {x, y, y, z}; }
    inline ulong4 xyyw() const { return {x, y, y, w}; }
    inline ulong4 xyzx() const { return {x, y, z, x}; }
    inline ulong4 xyzy() const { return {x, y, z, y}; }
    inline ulong4 xyzz() const { return {x, y, z, z}; }
    inline ulong4 xyzw() const { return {x, y, z, w}; }
    inline void set_xyzw(const ulong4& v) { x = v.x; y = v.y; z = v.z; w = v.w; }
    inline ulong4 xywx() const { return {x, y, w, x}; }
    inline ulong4 xywy() const { return {x, y, w, y}; }
    inline ulong4 xywz() const { return {x, y, w, z}; }
    inline void set_xywz(const ulong4& v) { x = v.x; y = v.y; w = v.z; z = v.w; }
    inline ulong4 xyww() const { return {x, y, w, w}; }
    inline ulong4 xzxx() const { return {x, z, x, x}; }
    inline ulong4 xzxy() const { return {x, z, x, y}; }
    inline ulong4 xzxz() const { return {x, z, x, z}; }
    inline ulong4 xzxw() const { return {x, z, x, w}; }
    inline ulong4 xzyx() const { return {x, z, y, x}; }
    inline ulong4 xzyy() const { return {x, z, y, y}; }
    inline ulong4 xzyz() const { return {x, z, y, z}; }
    inline ulong4 xzyw() const { return {x, z, y, w}; }
    inline void set_xzyw(const ulong4& v) { x = v.x; z = v.y; y = v.z; w = v.w; }
    inline ulong4 xzzx() const { return {x, z, z, x}; }
    inline ulong4 xzzy() const { return {x, z, z, y}; }
    inline ulong4 xzzz() const { return {x, z, z, z}; }
    inline ulong4 xzzw() const { return {x, z, z, w}; }
    inline ulong4 xzwx() const { return {x, z, w, x}; }
    inline ulong4 xzwy() const { return {x, z, w, y}; }
    inline void set_xzwy(const ulong4& v) { x = v.x; z = v.y; w = v.z; y = v.w; }
    inline ulong4 xzwz() const { return {x, z, w, z}; }
    inline ulong4 xzww() const { return {x, z, w, w}; }
    inline ulong4 xwxx() const { return {x, w, x, x}; }
    inline ulong4 xwxy() const { return {x, w, x, y}; }
    inline ulong4 xwxz() const { return {x, w, x, z}; }
    inline ulong4 xwxw() const { return {x, w, x, w}; }
    inline ulong4 xwyx() const { return {x, w, y, x}; }
    inline ulong4 xwyy() const { return {x, w, y, y}; }
    inline ulong4 xwyz() const { return {x, w, y, z}; }
    inline void set_xwyz(const ulong4& v) { x = v.x; w = v.y; y = v.z; z = v.w; }
    inline ulong4 xwyw() const { return {x, w, y, w}; }
    inline ulong4 xwzx() const { return {x, w, z, x}; }
    inline ulong4 xwzy() const { return {x, w, z, y}; }
    inline void set_xwzy(const ulong4& v) { x = v.x; w = v.y; z = v.z; y = v.w; }
    inline ulong4 xwzz() const { return {x, w, z, z}; }
    inline ulong4 xwzw() const { return {x, w, z, w}; }
    inline ulong4 xwwx() const { return {x, w, w, x}; }
    inline ulong4 xwwy() const { return {x, w, w, y}; }
    inline ulong4 xwwz() const { return {x, w, w, z}; }
    inline ulong4 xwww() const { return {x, w, w, w}; }
    inline ulong4 yxxx() const { return {y, x, x, x}; }
    inline ulong4 yxxy() const { return {y, x, x, y}; }
    inline ulong4 yxxz() const { return {y, x, x, z}; }
    inline ulong4 yxxw() const { return {y, x, x, w}; }
    inline ulong4 yxyx() const { return {y, x, y, x}; }
    inline ulong4 yxyy() const { return {y, x, y, y}; }
    inline ulong4 yxyz() const { return {y, x, y, z}; }
    inline ulong4 yxyw() const { return {y, x, y, w}; }
    inline ulong4 yxzx() const { return {y, x, z, x}; }
    inline ulong4 yxzy() const { return {y, x, z, y}; }
    inline ulong4 yxzz() const { return {y, x, z, z}; }
    inline ulong4 yxzw() const { return {y, x, z, w}; }
    inline void set_yxzw(const ulong4& v) { y = v.x; x = v.y; z = v.z; w = v.w; }
    inline ulong4 yxwx() const { return {y, x, w, x}; }
    inline ulong4 yxwy() const { return {y, x, w, y}; }
    inline ulong4 yxwz() const { return {y, x, w, z}; }
    inline void set_yxwz(const ulong4& v) { y = v.x; x = v.y; w = v.z; z = v.w; }
    inline ulong4 yxww() const { return {y, x, w, w}; }
    inline ulong4 yyxx() const { return {y, y, x, x}; }
    inline ulong4 yyxy() const { return {y, y, x, y}; }
    inline ulong4 yyxz() const { return {y, y, x, z}; }
    inline ulong4 yyxw() const { return {y, y, x, w}; }
    inline ulong4 yyyx() const { return {y, y, y, x}; }
    inline ulong4 yyyy() const { return {y, y, y, y}; }
    inline ulong4 yyyz() const { return {y, y, y, z}; }
    inline ulong4 yyyw() const { return {y, y, y, w}; }
    inline ulong4 yyzx() const { return {y, y, z, x}; }
    inline ulong4 yyzy() const { return {y, y, z, y}; }
    inline ulong4 yyzz() const { return {y, y, z, z}; }
    inline ulong4 yyzw() const { return {y, y, z, w}; }
    inline ulong4 yywx() const { return {y, y, w, x}; }
    inline ulong4 yywy() const { return {y, y, w, y}; }
    inline ulong4 yywz() const { return {y, y, w, z}; }
    inline ulong4 yyww() const { return {y, y, w, w}; }
    inline ulong4 yzxx() const { return {y, z, x, x}; }
    inline ulong4 yzxy() const { return {y, z, x, y}; }
    inline ulong4 yzxz() const { return {y, z, x, z}; }
    inline ulong4 yzxw() const { return {y, z, x, w}; }
    inline void set_yzxw(const ulong4& v) { y = v.x; z = v.y; x = v.z; w = v.w; }
    inline ulong4 yzyx() const { return {y, z, y, x}; }
    inline ulong4 yzyy() const { return {y, z, y, y}; }
    inline ulong4 yzyz() const { return {y, z, y, z}; }
    inline ulong4 yzyw() const { return {y, z, y, w}; }
    inline ulong4 yzzx() const { return {y, z, z, x}; }
    inline ulong4 yzzy() const { return {y, z, z, y}; }
    inline ulong4 yzzz() const { return {y, z, z, z}; }
    inline ulong4 yzzw() const { return {y, z, z, w}; }
    inline ulong4 yzwx() const { return {y, z, w, x}; }
    inline void set_yzwx(const ulong4& v) { y = v.x; z = v.y; w = v.z; x = v.w; }
    inline ulong4 yzwy() const { return {y, z, w, y}; }
    inline ulong4 yzwz() const { return {y, z, w, z}; }
    inline ulong4 yzww() const { return {y, z, w, w}; }
    inline ulong4 ywxx() const { return {y, w, x, x}; }
    inline ulong4 ywxy() const { return {y, w, x, y}; }
    inline ulong4 ywxz() const { return {y, w, x, z}; }
    inline void set_ywxz(const ulong4& v) { y = v.x; w = v.y; x = v.z; z = v.w; }
    inline ulong4 ywxw() const { return {y, w, x, w}; }
    inline ulong4 ywyx() const { return {y, w, y, x}; }
    inline ulong4 ywyy() const { return {y, w, y, y}; }
    inline ulong4 ywyz() const { return {y, w, y, z}; }
    inline ulong4 ywyw() const { return {y, w, y, w}; }
    inline ulong4 ywzx() const { return {y, w, z, x}; }
    inline void set_ywzx(const ulong4& v) { y = v.x; w = v.y; z = v.z; x = v.w; }
    inline ulong4 ywzy() const { return {y, w, z, y}; }
    inline ulong4 ywzz() const { return {y, w, z, z}; }
    inline ulong4 ywzw() const { return {y, w, z, w}; }
    inline ulong4 ywwx() const { return {y, w, w, x}; }
    inline ulong4 ywwy() const { return {y, w, w, y}; }
    inline ulong4 ywwz() const { return {y, w, w, z}; }
    inline ulong4 ywww() const { return {y, w, w, w}; }
    inline ulong4 zxxx() const { return {z, x, x, x}; }
    inline ulong4 zxxy() const { return {z, x, x, y}; }
    inline ulong4 zxxz() const { return {z, x, x, z}; }
    inline ulong4 zxxw() const { return {z, x, x, w}; }
    inline ulong4 zxyx() const { return {z, x, y, x}; }
    inline ulong4 zxyy() const { return {z, x, y, y}; }
    inline ulong4 zxyz() const { return {z, x, y, z}; }
    inline ulong4 zxyw() const { return {z, x, y, w}; }
    inline void set_zxyw(const ulong4& v) { z = v.x; x = v.y; y = v.z; w = v.w; }
    inline ulong4 zxzx() const { return {z, x, z, x}; }
    inline ulong4 zxzy() const { return {z, x, z, y}; }
    inline ulong4 zxzz() const { return {z, x, z, z}; }
    inline ulong4 zxzw() const { return {z, x, z, w}; }
    inline ulong4 zxwx() const { return {z, x, w, x}; }
    inline ulong4 zxwy() const { return {z, x, w, y}; }
    inline void set_zxwy(const ulong4& v) { z = v.x; x = v.y; w = v.z; y = v.w; }
    inline ulong4 zxwz() const { return {z, x, w, z}; }
    inline ulong4 zxww() const { return {z, x, w, w}; }
    inline ulong4 zyxx() const { return {z, y, x, x}; }
    inline ulong4 zyxy() const { return {z, y, x, y}; }
    inline ulong4 zyxz() const { return {z, y, x, z}; }
    inline ulong4 zyxw() const { return {z, y, x, w}; }
    inline void set_zyxw(const ulong4& v) { z = v.x; y = v.y; x = v.z; w = v.w; }
    inline ulong4 zyyx() const { return {z, y, y, x}; }
    inline ulong4 zyyy() const { return {z, y, y, y}; }
    inline ulong4 zyyz() const { return {z, y, y, z}; }
    inline ulong4 zyyw() const { return {z, y, y, w}; }
    inline ulong4 zyzx() const { return {z, y, z, x}; }
    inline ulong4 zyzy() const { return {z, y, z, y}; }
    inline ulong4 zyzz() const { return {z, y, z, z}; }
    inline ulong4 zyzw() const { return {z, y, z, w}; }
    inline ulong4 zywx() const { return {z, y, w, x}; }
    inline void set_zywx(const ulong4& v) { z = v.x; y = v.y; w = v.z; x = v.w; }
    inline ulong4 zywy() const { return {z, y, w, y}; }
    inline ulong4 zywz() const { return {z, y, w, z}; }
    inline ulong4 zyww() const { return {z, y, w, w}; }
    inline ulong4 zzxx() const { return {z, z, x, x}; }
    inline ulong4 zzxy() const { return {z, z, x, y}; }
    inline ulong4 zzxz() const { return {z, z, x, z}; }
    inline ulong4 zzxw() const { return {z, z, x, w}; }
    inline ulong4 zzyx() const { return {z, z, y, x}; }
    inline ulong4 zzyy() const { return {z, z, y, y}; }
    inline ulong4 zzyz() const { return {z, z, y, z}; }
    inline ulong4 zzyw() const { return {z, z, y, w}; }
    inline ulong4 zzzx() const { return {z, z, z, x}; }
    inline ulong4 zzzy() const { return {z, z, z, y}; }
    inline ulong4 zzzz() const { return {z, z, z, z}; }
    inline ulong4 zzzw() const { return {z, z, z, w}; }
    inline ulong4 zzwx() const { return {z, z, w, x}; }
    inline ulong4 zzwy() const { return {z, z, w, y}; }
    inline ulong4 zzwz() const { return {z, z, w, z}; }
    inline ulong4 zzww() const { return {z, z, w, w}; }
    inline ulong4 zwxx() const { return {z, w, x, x}; }
    inline ulong4 zwxy() const { return {z, w, x, y}; }
    inline void set_zwxy(const ulong4& v) { z = v.x; w = v.y; x = v.z; y = v.w; }
    inline ulong4 zwxz() const { return {z, w, x, z}; }
    inline ulong4 zwxw() const { return {z, w, x, w}; }
    inline ulong4 zwyx() const { return {z, w, y, x}; }
    inline void set_zwyx(const ulong4& v) { z = v.x; w = v.y; y = v.z; x = v.w; }
    inline ulong4 zwyy() const { return {z, w, y, y}; }
    inline ulong4 zwyz() const { return {z, w, y, z}; }
    inline ulong4 zwyw() const { return {z, w, y, w}; }
    inline ulong4 zwzx() const { return {z, w, z, x}; }
    inline ulong4 zwzy() const { return {z, w, z, y}; }
    inline ulong4 zwzz() const { return {z, w, z, z}; }
    inline ulong4 zwzw() const { return {z, w, z, w}; }
    inline ulong4 zwwx() const { return {z, w, w, x}; }
    inline ulong4 zwwy() const { return {z, w, w, y}; }
    inline ulong4 zwwz() const { return {z, w, w, z}; }
    inline ulong4 zwww() const { return {z, w, w, w}; }
    inline ulong4 wxxx() const { return {w, x, x, x}; }
    inline ulong4 wxxy() const { return {w, x, x, y}; }
    inline ulong4 wxxz() const { return {w, x, x, z}; }
    inline ulong4 wxxw() const { return {w, x, x, w}; }
    inline ulong4 wxyx() const { return {w, x, y, x}; }
    inline ulong4 wxyy() const { return {w, x, y, y}; }
    inline ulong4 wxyz() const { return {w, x, y, z}; }
    inline void set_wxyz(const ulong4& v) { w = v.x; x = v.y; y = v.z; z = v.w; }
    inline ulong4 wxyw() const { return {w, x, y, w}; }
    inline ulong4 wxzx() const { return {w, x, z, x}; }
    inline ulong4 wxzy() const { return {w, x, z, y}; }
    inline void set_wxzy(const ulong4& v) { w = v.x; x = v.y; z = v.z; y = v.w; }
    inline ulong4 wxzz() const { return {w, x, z, z}; }
    inline ulong4 wxzw() const { return {w, x, z, w}; }
    inline ulong4 wxwx() const { return {w, x, w, x}; }
    inline ulong4 wxwy() const { return {w, x, w, y}; }
    inline ulong4 wxwz() const { return {w, x, w, z}; }
    inline ulong4 wxww() const { return {w, x, w, w}; }
    inline ulong4 wyxx() const { return {w, y, x, x}; }
    inline ulong4 wyxy() const { return {w, y, x, y}; }
    inline ulong4 wyxz() const { return {w, y, x, z}; }
    inline void set_wyxz(const ulong4& v) { w = v.x; y = v.y; x = v.z; z = v.w; }
    inline ulong4 wyxw() const { return {w, y, x, w}; }
    inline ulong4 wyyx() const { return {w, y, y, x}; }
    inline ulong4 wyyy() const { return {w, y, y, y}; }
    inline ulong4 wyyz() const { return {w, y, y, z}; }
    inline ulong4 wyyw() const { return {w, y, y, w}; }
    inline ulong4 wyzx() const { return {w, y, z, x}; }
    inline void set_wyzx(const ulong4& v) { w = v.x; y = v.y; z = v.z; x = v.w; }
    inline ulong4 wyzy() const { return {w, y, z, y}; }
    inline ulong4 wyzz() const { return {w, y, z, z}; }
    inline ulong4 wyzw() const { return {w, y, z, w}; }
    inline ulong4 wywx() const { return {w, y, w, x}; }
    inline ulong4 wywy() const { return {w, y, w, y}; }
    inline ulong4 wywz() const { return {w, y, w, z}; }
    inline ulong4 wyww() const { return {w, y, w, w}; }
    inline ulong4 wzxx() const { return {w, z, x, x}; }
    inline ulong4 wzxy() const { return {w, z, x, y}; }
    inline void set_wzxy(const ulong4& v) { w = v.x; z = v.y; x = v.z; y = v.w; }
    inline ulong4 wzxz() const { return {w, z, x, z}; }
    inline ulong4 wzxw() const { return {w, z, x, w}; }
    inline ulong4 wzyx() const { return {w, z, y, x}; }
    inline void set_wzyx(const ulong4& v) { w = v.x; z = v.y; y = v.z; x = v.w; }
    inline ulong4 wzyy() const { return {w, z, y, y}; }
    inline ulong4 wzyz() const { return {w, z, y, z}; }
    inline ulong4 wzyw() const { return {w, z, y, w}; }
    inline ulong4 wzzx() const { return {w, z, z, x}; }
    inline ulong4 wzzy() const { return {w, z, z, y}; }
    inline ulong4 wzzz() const { return {w, z, z, z}; }
    inline ulong4 wzzw() const { return {w, z, z, w}; }
    inline ulong4 wzwx() const { return {w, z, w, x}; }
    inline ulong4 wzwy() const { return {w, z, w, y}; }
    inline ulong4 wzwz() const { return {w, z, w, z}; }
    inline ulong4 wzww() const { return {w, z, w, w}; }
    inline ulong4 wwxx() const { return {w, w, x, x}; }
    inline ulong4 wwxy() const { return {w, w, x, y}; }
    inline ulong4 wwxz() const { return {w, w, x, z}; }
    inline ulong4 wwxw() const { return {w, w, x, w}; }
    inline ulong4 wwyx() const { return {w, w, y, x}; }
    inline ulong4 wwyy() const { return {w, w, y, y}; }
    inline ulong4 wwyz() const { return {w, w, y, z}; }
    inline ulong4 wwyw() const { return {w, w, y, w}; }
    inline ulong4 wwzx() const { return {w, w, z, x}; }
    inline ulong4 wwzy() const { return {w, w, z, y}; }
    inline ulong4 wwzz() const { return {w, w, z, z}; }
    inline ulong4 wwzw() const { return {w, w, z, w}; }
    inline ulong4 wwwx() const { return {w, w, w, x}; }
    inline ulong4 wwwy() const { return {w, w, w, y}; }
    inline ulong4 wwwz() const { return {w, w, w, z}; }
    inline ulong4 wwww() const { return {w, w, w, w}; }
    
    // hash
    inline static size_t _skr_hash(const ulong4& v) {
        auto hasher = ::skr::Hash<uint64_t>{};
        auto result = hasher(v.x);
        result = ::skr::hash_combine(result, hasher(v.y));
        result = ::skr::hash_combine(result, hasher(v.z));
        result = ::skr::hash_combine(result, hasher(v.w));
        return result;
    }
};
}
}
