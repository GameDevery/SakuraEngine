//! *************************************************************************
//! **  This file is auto-generated by gen_math, do not edit it manually.  **
//! *************************************************************************

#pragma once
#include <cstdint>
#include <cmath>
#include "../gen_math_fwd.hpp"
#include "../../math_constants.hpp"
#include <SkrBase/misc/debug.h>
#include <SkrBase/misc/hash.hpp>

namespace skr {
inline namespace math {
struct double2 {
    double x, y;
    
    // ctor & dtor
    inline double2(): x(0), y(0) {}
    inline double2(MathNoInitType) {}
    inline double2(double v): x(v), y(v) {}
    inline double2(double v0, double v1): x(v0), y(v1) {}
    inline ~double2() = default;
    
    // cast ctor
    double2(const float2& rhs);
    double2(const bool2& rhs);
    double2(const int2& rhs);
    double2(const uint2& rhs);
    double2(const long2& rhs);
    double2(const ulong2& rhs);
    
    // copy & move & assign & move assign
    inline double2(const double2&) = default;
    inline double2(double2&&) = default;
    inline double2& operator=(const double2&) = default;
    inline double2& operator=(double2&&) = default;
    
    // array assessor
    inline double& operator[](size_t i) {
        SKR_ASSERT(i >= 0 && i < 2 && "index out of range");
        return reinterpret_cast<double*>(this)[i];
    }
    inline double operator[](size_t i) const {
        return const_cast<double2*>(this)->operator[](i);
    }
    
    // unary operator
    inline double2 operator-() const { return { -x, -y }; }
    
    // arithmetic operator
    inline friend double2 operator+(const double2& lhs, const double2& rhs) { return { lhs.x + rhs.x, lhs.y + rhs.y }; }
    inline friend double2 operator-(const double2& lhs, const double2& rhs) { return { lhs.x - rhs.x, lhs.y - rhs.y }; }
    inline friend double2 operator*(const double2& lhs, const double2& rhs) { return { lhs.x * rhs.x, lhs.y * rhs.y }; }
    inline friend double2 operator/(const double2& lhs, const double2& rhs) { return { lhs.x / rhs.x, lhs.y / rhs.y }; }
    inline friend double2 operator%(const double2& lhs, const double2& rhs) { return { ::std::fmod(lhs.x, rhs.x), ::std::fmod(lhs.y, rhs.y) }; }
    
    // arithmetic assign operator
    inline double2& operator+=(const double2& rhs) { x += rhs.x, y += rhs.y; return *this; }
    inline double2& operator-=(const double2& rhs) { x -= rhs.x, y -= rhs.y; return *this; }
    inline double2& operator*=(const double2& rhs) { x *= rhs.x, y *= rhs.y; return *this; }
    inline double2& operator/=(const double2& rhs) { x /= rhs.x, y /= rhs.y; return *this; }
    inline double2& operator%=(const double2& rhs) { x = ::std::fmod(x, rhs.x), y = ::std::fmod(y, rhs.y); return *this; }
    
    // compare operator
    friend bool2 operator==(const double2& lhs, const double2& rhs);
    friend bool2 operator!=(const double2& lhs, const double2& rhs);
    friend bool2 operator<(const double2& lhs, const double2& rhs);
    friend bool2 operator<=(const double2& lhs, const double2& rhs);
    friend bool2 operator>(const double2& lhs, const double2& rhs);
    friend bool2 operator>=(const double2& lhs, const double2& rhs);
    
    // swizzle
    inline double2 xx() const { return {x, x}; }
    inline double2 xy() const { return {x, y}; }
    inline void set_xy(const double2& v) { x = v.x; y = v.y; }
    inline double2 yx() const { return {y, x}; }
    inline void set_yx(const double2& v) { y = v.x; x = v.y; }
    inline double2 yy() const { return {y, y}; }
    
    // hash
    inline static size_t _skr_hash(const double2& v) {
        auto hasher = ::skr::Hash<double>{};
        auto result = hasher(v.x);
        result = ::skr::hash_combine(result, hasher(v.y));
        return result;
    }
};
struct double3 {
    double x, y, z;
    
    // ctor & dtor
    inline double3(): x(0), y(0), z(0) {}
    inline double3(MathNoInitType) {}
    inline double3(double v): x(v), y(v), z(v) {}
    inline double3(double v0, double v1, double v2): x(v0), y(v1), z(v2) {}
    inline double3(double v0, double2 v1): x(v0), y(v1.x), z(v1.y) {}
    inline double3(double2 v0, double v1): x(v0.x), y(v0.y), z(v1) {}
    inline ~double3() = default;
    
    // cast ctor
    double3(const float3& rhs);
    double3(const bool3& rhs);
    double3(const int3& rhs);
    double3(const uint3& rhs);
    double3(const long3& rhs);
    double3(const ulong3& rhs);
    
    // copy & move & assign & move assign
    inline double3(const double3&) = default;
    inline double3(double3&&) = default;
    inline double3& operator=(const double3&) = default;
    inline double3& operator=(double3&&) = default;
    
    // array assessor
    inline double& operator[](size_t i) {
        SKR_ASSERT(i >= 0 && i < 3 && "index out of range");
        return reinterpret_cast<double*>(this)[i];
    }
    inline double operator[](size_t i) const {
        return const_cast<double3*>(this)->operator[](i);
    }
    
    // unary operator
    inline double3 operator-() const { return { -x, -y, -z }; }
    
    // arithmetic operator
    inline friend double3 operator+(const double3& lhs, const double3& rhs) { return { lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z }; }
    inline friend double3 operator-(const double3& lhs, const double3& rhs) { return { lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z }; }
    inline friend double3 operator*(const double3& lhs, const double3& rhs) { return { lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z }; }
    inline friend double3 operator/(const double3& lhs, const double3& rhs) { return { lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z }; }
    inline friend double3 operator%(const double3& lhs, const double3& rhs) { return { ::std::fmod(lhs.x, rhs.x), ::std::fmod(lhs.y, rhs.y), ::std::fmod(lhs.z, rhs.z) }; }
    
    // arithmetic assign operator
    inline double3& operator+=(const double3& rhs) { x += rhs.x, y += rhs.y, z += rhs.z; return *this; }
    inline double3& operator-=(const double3& rhs) { x -= rhs.x, y -= rhs.y, z -= rhs.z; return *this; }
    inline double3& operator*=(const double3& rhs) { x *= rhs.x, y *= rhs.y, z *= rhs.z; return *this; }
    inline double3& operator/=(const double3& rhs) { x /= rhs.x, y /= rhs.y, z /= rhs.z; return *this; }
    inline double3& operator%=(const double3& rhs) { x = ::std::fmod(x, rhs.x), y = ::std::fmod(y, rhs.y), z = ::std::fmod(z, rhs.z); return *this; }
    
    // compare operator
    friend bool3 operator==(const double3& lhs, const double3& rhs);
    friend bool3 operator!=(const double3& lhs, const double3& rhs);
    friend bool3 operator<(const double3& lhs, const double3& rhs);
    friend bool3 operator<=(const double3& lhs, const double3& rhs);
    friend bool3 operator>(const double3& lhs, const double3& rhs);
    friend bool3 operator>=(const double3& lhs, const double3& rhs);
    
    // swizzle
    inline double2 xx() const { return {x, x}; }
    inline double2 xy() const { return {x, y}; }
    inline void set_xy(const double2& v) { x = v.x; y = v.y; }
    inline double2 xz() const { return {x, z}; }
    inline void set_xz(const double2& v) { x = v.x; z = v.y; }
    inline double2 yx() const { return {y, x}; }
    inline void set_yx(const double2& v) { y = v.x; x = v.y; }
    inline double2 yy() const { return {y, y}; }
    inline double2 yz() const { return {y, z}; }
    inline void set_yz(const double2& v) { y = v.x; z = v.y; }
    inline double2 zx() const { return {z, x}; }
    inline void set_zx(const double2& v) { z = v.x; x = v.y; }
    inline double2 zy() const { return {z, y}; }
    inline void set_zy(const double2& v) { z = v.x; y = v.y; }
    inline double2 zz() const { return {z, z}; }
    inline double3 xxx() const { return {x, x, x}; }
    inline double3 xxy() const { return {x, x, y}; }
    inline double3 xxz() const { return {x, x, z}; }
    inline double3 xyx() const { return {x, y, x}; }
    inline double3 xyy() const { return {x, y, y}; }
    inline double3 xyz() const { return {x, y, z}; }
    inline void set_xyz(const double3& v) { x = v.x; y = v.y; z = v.z; }
    inline double3 xzx() const { return {x, z, x}; }
    inline double3 xzy() const { return {x, z, y}; }
    inline void set_xzy(const double3& v) { x = v.x; z = v.y; y = v.z; }
    inline double3 xzz() const { return {x, z, z}; }
    inline double3 yxx() const { return {y, x, x}; }
    inline double3 yxy() const { return {y, x, y}; }
    inline double3 yxz() const { return {y, x, z}; }
    inline void set_yxz(const double3& v) { y = v.x; x = v.y; z = v.z; }
    inline double3 yyx() const { return {y, y, x}; }
    inline double3 yyy() const { return {y, y, y}; }
    inline double3 yyz() const { return {y, y, z}; }
    inline double3 yzx() const { return {y, z, x}; }
    inline void set_yzx(const double3& v) { y = v.x; z = v.y; x = v.z; }
    inline double3 yzy() const { return {y, z, y}; }
    inline double3 yzz() const { return {y, z, z}; }
    inline double3 zxx() const { return {z, x, x}; }
    inline double3 zxy() const { return {z, x, y}; }
    inline void set_zxy(const double3& v) { z = v.x; x = v.y; y = v.z; }
    inline double3 zxz() const { return {z, x, z}; }
    inline double3 zyx() const { return {z, y, x}; }
    inline void set_zyx(const double3& v) { z = v.x; y = v.y; x = v.z; }
    inline double3 zyy() const { return {z, y, y}; }
    inline double3 zyz() const { return {z, y, z}; }
    inline double3 zzx() const { return {z, z, x}; }
    inline double3 zzy() const { return {z, z, y}; }
    inline double3 zzz() const { return {z, z, z}; }
    
    // hash
    inline static size_t _skr_hash(const double3& v) {
        auto hasher = ::skr::Hash<double>{};
        auto result = hasher(v.x);
        result = ::skr::hash_combine(result, hasher(v.y));
        result = ::skr::hash_combine(result, hasher(v.z));
        return result;
    }
};
struct alignas(16) double4 {
    double x, y, z, w;
    
    // ctor & dtor
    inline double4(): x(0), y(0), z(0), w(0) {}
    inline double4(MathNoInitType) {}
    inline double4(double v): x(v), y(v), z(v), w(v) {}
    inline double4(double v0, double v1, double v2, double v3): x(v0), y(v1), z(v2), w(v3) {}
    inline double4(double v0, double v1, double2 v2): x(v0), y(v1), z(v2.x), w(v2.y) {}
    inline double4(double v0, double2 v1, double v2): x(v0), y(v1.x), z(v1.y), w(v2) {}
    inline double4(double v0, double3 v1): x(v0), y(v1.x), z(v1.y), w(v1.z) {}
    inline double4(double2 v0, double v1, double v2): x(v0.x), y(v0.y), z(v1), w(v2) {}
    inline double4(double2 v0, double2 v1): x(v0.x), y(v0.y), z(v1.x), w(v1.y) {}
    inline double4(double3 v0, double v1): x(v0.x), y(v0.y), z(v0.z), w(v1) {}
    inline ~double4() = default;
    
    // cast ctor
    double4(const float4& rhs);
    double4(const bool4& rhs);
    double4(const int4& rhs);
    double4(const uint4& rhs);
    double4(const long4& rhs);
    double4(const ulong4& rhs);
    
    // copy & move & assign & move assign
    inline double4(const double4&) = default;
    inline double4(double4&&) = default;
    inline double4& operator=(const double4&) = default;
    inline double4& operator=(double4&&) = default;
    
    // array assessor
    inline double& operator[](size_t i) {
        SKR_ASSERT(i >= 0 && i < 4 && "index out of range");
        return reinterpret_cast<double*>(this)[i];
    }
    inline double operator[](size_t i) const {
        return const_cast<double4*>(this)->operator[](i);
    }
    
    // unary operator
    inline double4 operator-() const { return { -x, -y, -z, -w }; }
    
    // arithmetic operator
    inline friend double4 operator+(const double4& lhs, const double4& rhs) { return { lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z, lhs.w + rhs.w }; }
    inline friend double4 operator-(const double4& lhs, const double4& rhs) { return { lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z, lhs.w - rhs.w }; }
    inline friend double4 operator*(const double4& lhs, const double4& rhs) { return { lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z, lhs.w * rhs.w }; }
    inline friend double4 operator/(const double4& lhs, const double4& rhs) { return { lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z, lhs.w / rhs.w }; }
    inline friend double4 operator%(const double4& lhs, const double4& rhs) { return { ::std::fmod(lhs.x, rhs.x), ::std::fmod(lhs.y, rhs.y), ::std::fmod(lhs.z, rhs.z), ::std::fmod(lhs.w, rhs.w) }; }
    
    // arithmetic assign operator
    inline double4& operator+=(const double4& rhs) { x += rhs.x, y += rhs.y, z += rhs.z, w += rhs.w; return *this; }
    inline double4& operator-=(const double4& rhs) { x -= rhs.x, y -= rhs.y, z -= rhs.z, w -= rhs.w; return *this; }
    inline double4& operator*=(const double4& rhs) { x *= rhs.x, y *= rhs.y, z *= rhs.z, w *= rhs.w; return *this; }
    inline double4& operator/=(const double4& rhs) { x /= rhs.x, y /= rhs.y, z /= rhs.z, w /= rhs.w; return *this; }
    inline double4& operator%=(const double4& rhs) { x = ::std::fmod(x, rhs.x), y = ::std::fmod(y, rhs.y), z = ::std::fmod(z, rhs.z), w = ::std::fmod(w, rhs.w); return *this; }
    
    // compare operator
    friend bool4 operator==(const double4& lhs, const double4& rhs);
    friend bool4 operator!=(const double4& lhs, const double4& rhs);
    friend bool4 operator<(const double4& lhs, const double4& rhs);
    friend bool4 operator<=(const double4& lhs, const double4& rhs);
    friend bool4 operator>(const double4& lhs, const double4& rhs);
    friend bool4 operator>=(const double4& lhs, const double4& rhs);
    
    // swizzle
    inline double2 xx() const { return {x, x}; }
    inline double2 xy() const { return {x, y}; }
    inline void set_xy(const double2& v) { x = v.x; y = v.y; }
    inline double2 xz() const { return {x, z}; }
    inline void set_xz(const double2& v) { x = v.x; z = v.y; }
    inline double2 xw() const { return {x, w}; }
    inline void set_xw(const double2& v) { x = v.x; w = v.y; }
    inline double2 yx() const { return {y, x}; }
    inline void set_yx(const double2& v) { y = v.x; x = v.y; }
    inline double2 yy() const { return {y, y}; }
    inline double2 yz() const { return {y, z}; }
    inline void set_yz(const double2& v) { y = v.x; z = v.y; }
    inline double2 yw() const { return {y, w}; }
    inline void set_yw(const double2& v) { y = v.x; w = v.y; }
    inline double2 zx() const { return {z, x}; }
    inline void set_zx(const double2& v) { z = v.x; x = v.y; }
    inline double2 zy() const { return {z, y}; }
    inline void set_zy(const double2& v) { z = v.x; y = v.y; }
    inline double2 zz() const { return {z, z}; }
    inline double2 zw() const { return {z, w}; }
    inline void set_zw(const double2& v) { z = v.x; w = v.y; }
    inline double2 wx() const { return {w, x}; }
    inline void set_wx(const double2& v) { w = v.x; x = v.y; }
    inline double2 wy() const { return {w, y}; }
    inline void set_wy(const double2& v) { w = v.x; y = v.y; }
    inline double2 wz() const { return {w, z}; }
    inline void set_wz(const double2& v) { w = v.x; z = v.y; }
    inline double2 ww() const { return {w, w}; }
    inline double3 xxx() const { return {x, x, x}; }
    inline double3 xxy() const { return {x, x, y}; }
    inline double3 xxz() const { return {x, x, z}; }
    inline double3 xxw() const { return {x, x, w}; }
    inline double3 xyx() const { return {x, y, x}; }
    inline double3 xyy() const { return {x, y, y}; }
    inline double3 xyz() const { return {x, y, z}; }
    inline void set_xyz(const double3& v) { x = v.x; y = v.y; z = v.z; }
    inline double3 xyw() const { return {x, y, w}; }
    inline void set_xyw(const double3& v) { x = v.x; y = v.y; w = v.z; }
    inline double3 xzx() const { return {x, z, x}; }
    inline double3 xzy() const { return {x, z, y}; }
    inline void set_xzy(const double3& v) { x = v.x; z = v.y; y = v.z; }
    inline double3 xzz() const { return {x, z, z}; }
    inline double3 xzw() const { return {x, z, w}; }
    inline void set_xzw(const double3& v) { x = v.x; z = v.y; w = v.z; }
    inline double3 xwx() const { return {x, w, x}; }
    inline double3 xwy() const { return {x, w, y}; }
    inline void set_xwy(const double3& v) { x = v.x; w = v.y; y = v.z; }
    inline double3 xwz() const { return {x, w, z}; }
    inline void set_xwz(const double3& v) { x = v.x; w = v.y; z = v.z; }
    inline double3 xww() const { return {x, w, w}; }
    inline double3 yxx() const { return {y, x, x}; }
    inline double3 yxy() const { return {y, x, y}; }
    inline double3 yxz() const { return {y, x, z}; }
    inline void set_yxz(const double3& v) { y = v.x; x = v.y; z = v.z; }
    inline double3 yxw() const { return {y, x, w}; }
    inline void set_yxw(const double3& v) { y = v.x; x = v.y; w = v.z; }
    inline double3 yyx() const { return {y, y, x}; }
    inline double3 yyy() const { return {y, y, y}; }
    inline double3 yyz() const { return {y, y, z}; }
    inline double3 yyw() const { return {y, y, w}; }
    inline double3 yzx() const { return {y, z, x}; }
    inline void set_yzx(const double3& v) { y = v.x; z = v.y; x = v.z; }
    inline double3 yzy() const { return {y, z, y}; }
    inline double3 yzz() const { return {y, z, z}; }
    inline double3 yzw() const { return {y, z, w}; }
    inline void set_yzw(const double3& v) { y = v.x; z = v.y; w = v.z; }
    inline double3 ywx() const { return {y, w, x}; }
    inline void set_ywx(const double3& v) { y = v.x; w = v.y; x = v.z; }
    inline double3 ywy() const { return {y, w, y}; }
    inline double3 ywz() const { return {y, w, z}; }
    inline void set_ywz(const double3& v) { y = v.x; w = v.y; z = v.z; }
    inline double3 yww() const { return {y, w, w}; }
    inline double3 zxx() const { return {z, x, x}; }
    inline double3 zxy() const { return {z, x, y}; }
    inline void set_zxy(const double3& v) { z = v.x; x = v.y; y = v.z; }
    inline double3 zxz() const { return {z, x, z}; }
    inline double3 zxw() const { return {z, x, w}; }
    inline void set_zxw(const double3& v) { z = v.x; x = v.y; w = v.z; }
    inline double3 zyx() const { return {z, y, x}; }
    inline void set_zyx(const double3& v) { z = v.x; y = v.y; x = v.z; }
    inline double3 zyy() const { return {z, y, y}; }
    inline double3 zyz() const { return {z, y, z}; }
    inline double3 zyw() const { return {z, y, w}; }
    inline void set_zyw(const double3& v) { z = v.x; y = v.y; w = v.z; }
    inline double3 zzx() const { return {z, z, x}; }
    inline double3 zzy() const { return {z, z, y}; }
    inline double3 zzz() const { return {z, z, z}; }
    inline double3 zzw() const { return {z, z, w}; }
    inline double3 zwx() const { return {z, w, x}; }
    inline void set_zwx(const double3& v) { z = v.x; w = v.y; x = v.z; }
    inline double3 zwy() const { return {z, w, y}; }
    inline void set_zwy(const double3& v) { z = v.x; w = v.y; y = v.z; }
    inline double3 zwz() const { return {z, w, z}; }
    inline double3 zww() const { return {z, w, w}; }
    inline double3 wxx() const { return {w, x, x}; }
    inline double3 wxy() const { return {w, x, y}; }
    inline void set_wxy(const double3& v) { w = v.x; x = v.y; y = v.z; }
    inline double3 wxz() const { return {w, x, z}; }
    inline void set_wxz(const double3& v) { w = v.x; x = v.y; z = v.z; }
    inline double3 wxw() const { return {w, x, w}; }
    inline double3 wyx() const { return {w, y, x}; }
    inline void set_wyx(const double3& v) { w = v.x; y = v.y; x = v.z; }
    inline double3 wyy() const { return {w, y, y}; }
    inline double3 wyz() const { return {w, y, z}; }
    inline void set_wyz(const double3& v) { w = v.x; y = v.y; z = v.z; }
    inline double3 wyw() const { return {w, y, w}; }
    inline double3 wzx() const { return {w, z, x}; }
    inline void set_wzx(const double3& v) { w = v.x; z = v.y; x = v.z; }
    inline double3 wzy() const { return {w, z, y}; }
    inline void set_wzy(const double3& v) { w = v.x; z = v.y; y = v.z; }
    inline double3 wzz() const { return {w, z, z}; }
    inline double3 wzw() const { return {w, z, w}; }
    inline double3 wwx() const { return {w, w, x}; }
    inline double3 wwy() const { return {w, w, y}; }
    inline double3 wwz() const { return {w, w, z}; }
    inline double3 www() const { return {w, w, w}; }
    inline double4 xxxx() const { return {x, x, x, x}; }
    inline double4 xxxy() const { return {x, x, x, y}; }
    inline double4 xxxz() const { return {x, x, x, z}; }
    inline double4 xxxw() const { return {x, x, x, w}; }
    inline double4 xxyx() const { return {x, x, y, x}; }
    inline double4 xxyy() const { return {x, x, y, y}; }
    inline double4 xxyz() const { return {x, x, y, z}; }
    inline double4 xxyw() const { return {x, x, y, w}; }
    inline double4 xxzx() const { return {x, x, z, x}; }
    inline double4 xxzy() const { return {x, x, z, y}; }
    inline double4 xxzz() const { return {x, x, z, z}; }
    inline double4 xxzw() const { return {x, x, z, w}; }
    inline double4 xxwx() const { return {x, x, w, x}; }
    inline double4 xxwy() const { return {x, x, w, y}; }
    inline double4 xxwz() const { return {x, x, w, z}; }
    inline double4 xxww() const { return {x, x, w, w}; }
    inline double4 xyxx() const { return {x, y, x, x}; }
    inline double4 xyxy() const { return {x, y, x, y}; }
    inline double4 xyxz() const { return {x, y, x, z}; }
    inline double4 xyxw() const { return {x, y, x, w}; }
    inline double4 xyyx() const { return {x, y, y, x}; }
    inline double4 xyyy() const { return {x, y, y, y}; }
    inline double4 xyyz() const { return {x, y, y, z}; }
    inline double4 xyyw() const { return {x, y, y, w}; }
    inline double4 xyzx() const { return {x, y, z, x}; }
    inline double4 xyzy() const { return {x, y, z, y}; }
    inline double4 xyzz() const { return {x, y, z, z}; }
    inline double4 xyzw() const { return {x, y, z, w}; }
    inline void set_xyzw(const double4& v) { x = v.x; y = v.y; z = v.z; w = v.w; }
    inline double4 xywx() const { return {x, y, w, x}; }
    inline double4 xywy() const { return {x, y, w, y}; }
    inline double4 xywz() const { return {x, y, w, z}; }
    inline void set_xywz(const double4& v) { x = v.x; y = v.y; w = v.z; z = v.w; }
    inline double4 xyww() const { return {x, y, w, w}; }
    inline double4 xzxx() const { return {x, z, x, x}; }
    inline double4 xzxy() const { return {x, z, x, y}; }
    inline double4 xzxz() const { return {x, z, x, z}; }
    inline double4 xzxw() const { return {x, z, x, w}; }
    inline double4 xzyx() const { return {x, z, y, x}; }
    inline double4 xzyy() const { return {x, z, y, y}; }
    inline double4 xzyz() const { return {x, z, y, z}; }
    inline double4 xzyw() const { return {x, z, y, w}; }
    inline void set_xzyw(const double4& v) { x = v.x; z = v.y; y = v.z; w = v.w; }
    inline double4 xzzx() const { return {x, z, z, x}; }
    inline double4 xzzy() const { return {x, z, z, y}; }
    inline double4 xzzz() const { return {x, z, z, z}; }
    inline double4 xzzw() const { return {x, z, z, w}; }
    inline double4 xzwx() const { return {x, z, w, x}; }
    inline double4 xzwy() const { return {x, z, w, y}; }
    inline void set_xzwy(const double4& v) { x = v.x; z = v.y; w = v.z; y = v.w; }
    inline double4 xzwz() const { return {x, z, w, z}; }
    inline double4 xzww() const { return {x, z, w, w}; }
    inline double4 xwxx() const { return {x, w, x, x}; }
    inline double4 xwxy() const { return {x, w, x, y}; }
    inline double4 xwxz() const { return {x, w, x, z}; }
    inline double4 xwxw() const { return {x, w, x, w}; }
    inline double4 xwyx() const { return {x, w, y, x}; }
    inline double4 xwyy() const { return {x, w, y, y}; }
    inline double4 xwyz() const { return {x, w, y, z}; }
    inline void set_xwyz(const double4& v) { x = v.x; w = v.y; y = v.z; z = v.w; }
    inline double4 xwyw() const { return {x, w, y, w}; }
    inline double4 xwzx() const { return {x, w, z, x}; }
    inline double4 xwzy() const { return {x, w, z, y}; }
    inline void set_xwzy(const double4& v) { x = v.x; w = v.y; z = v.z; y = v.w; }
    inline double4 xwzz() const { return {x, w, z, z}; }
    inline double4 xwzw() const { return {x, w, z, w}; }
    inline double4 xwwx() const { return {x, w, w, x}; }
    inline double4 xwwy() const { return {x, w, w, y}; }
    inline double4 xwwz() const { return {x, w, w, z}; }
    inline double4 xwww() const { return {x, w, w, w}; }
    inline double4 yxxx() const { return {y, x, x, x}; }
    inline double4 yxxy() const { return {y, x, x, y}; }
    inline double4 yxxz() const { return {y, x, x, z}; }
    inline double4 yxxw() const { return {y, x, x, w}; }
    inline double4 yxyx() const { return {y, x, y, x}; }
    inline double4 yxyy() const { return {y, x, y, y}; }
    inline double4 yxyz() const { return {y, x, y, z}; }
    inline double4 yxyw() const { return {y, x, y, w}; }
    inline double4 yxzx() const { return {y, x, z, x}; }
    inline double4 yxzy() const { return {y, x, z, y}; }
    inline double4 yxzz() const { return {y, x, z, z}; }
    inline double4 yxzw() const { return {y, x, z, w}; }
    inline void set_yxzw(const double4& v) { y = v.x; x = v.y; z = v.z; w = v.w; }
    inline double4 yxwx() const { return {y, x, w, x}; }
    inline double4 yxwy() const { return {y, x, w, y}; }
    inline double4 yxwz() const { return {y, x, w, z}; }
    inline void set_yxwz(const double4& v) { y = v.x; x = v.y; w = v.z; z = v.w; }
    inline double4 yxww() const { return {y, x, w, w}; }
    inline double4 yyxx() const { return {y, y, x, x}; }
    inline double4 yyxy() const { return {y, y, x, y}; }
    inline double4 yyxz() const { return {y, y, x, z}; }
    inline double4 yyxw() const { return {y, y, x, w}; }
    inline double4 yyyx() const { return {y, y, y, x}; }
    inline double4 yyyy() const { return {y, y, y, y}; }
    inline double4 yyyz() const { return {y, y, y, z}; }
    inline double4 yyyw() const { return {y, y, y, w}; }
    inline double4 yyzx() const { return {y, y, z, x}; }
    inline double4 yyzy() const { return {y, y, z, y}; }
    inline double4 yyzz() const { return {y, y, z, z}; }
    inline double4 yyzw() const { return {y, y, z, w}; }
    inline double4 yywx() const { return {y, y, w, x}; }
    inline double4 yywy() const { return {y, y, w, y}; }
    inline double4 yywz() const { return {y, y, w, z}; }
    inline double4 yyww() const { return {y, y, w, w}; }
    inline double4 yzxx() const { return {y, z, x, x}; }
    inline double4 yzxy() const { return {y, z, x, y}; }
    inline double4 yzxz() const { return {y, z, x, z}; }
    inline double4 yzxw() const { return {y, z, x, w}; }
    inline void set_yzxw(const double4& v) { y = v.x; z = v.y; x = v.z; w = v.w; }
    inline double4 yzyx() const { return {y, z, y, x}; }
    inline double4 yzyy() const { return {y, z, y, y}; }
    inline double4 yzyz() const { return {y, z, y, z}; }
    inline double4 yzyw() const { return {y, z, y, w}; }
    inline double4 yzzx() const { return {y, z, z, x}; }
    inline double4 yzzy() const { return {y, z, z, y}; }
    inline double4 yzzz() const { return {y, z, z, z}; }
    inline double4 yzzw() const { return {y, z, z, w}; }
    inline double4 yzwx() const { return {y, z, w, x}; }
    inline void set_yzwx(const double4& v) { y = v.x; z = v.y; w = v.z; x = v.w; }
    inline double4 yzwy() const { return {y, z, w, y}; }
    inline double4 yzwz() const { return {y, z, w, z}; }
    inline double4 yzww() const { return {y, z, w, w}; }
    inline double4 ywxx() const { return {y, w, x, x}; }
    inline double4 ywxy() const { return {y, w, x, y}; }
    inline double4 ywxz() const { return {y, w, x, z}; }
    inline void set_ywxz(const double4& v) { y = v.x; w = v.y; x = v.z; z = v.w; }
    inline double4 ywxw() const { return {y, w, x, w}; }
    inline double4 ywyx() const { return {y, w, y, x}; }
    inline double4 ywyy() const { return {y, w, y, y}; }
    inline double4 ywyz() const { return {y, w, y, z}; }
    inline double4 ywyw() const { return {y, w, y, w}; }
    inline double4 ywzx() const { return {y, w, z, x}; }
    inline void set_ywzx(const double4& v) { y = v.x; w = v.y; z = v.z; x = v.w; }
    inline double4 ywzy() const { return {y, w, z, y}; }
    inline double4 ywzz() const { return {y, w, z, z}; }
    inline double4 ywzw() const { return {y, w, z, w}; }
    inline double4 ywwx() const { return {y, w, w, x}; }
    inline double4 ywwy() const { return {y, w, w, y}; }
    inline double4 ywwz() const { return {y, w, w, z}; }
    inline double4 ywww() const { return {y, w, w, w}; }
    inline double4 zxxx() const { return {z, x, x, x}; }
    inline double4 zxxy() const { return {z, x, x, y}; }
    inline double4 zxxz() const { return {z, x, x, z}; }
    inline double4 zxxw() const { return {z, x, x, w}; }
    inline double4 zxyx() const { return {z, x, y, x}; }
    inline double4 zxyy() const { return {z, x, y, y}; }
    inline double4 zxyz() const { return {z, x, y, z}; }
    inline double4 zxyw() const { return {z, x, y, w}; }
    inline void set_zxyw(const double4& v) { z = v.x; x = v.y; y = v.z; w = v.w; }
    inline double4 zxzx() const { return {z, x, z, x}; }
    inline double4 zxzy() const { return {z, x, z, y}; }
    inline double4 zxzz() const { return {z, x, z, z}; }
    inline double4 zxzw() const { return {z, x, z, w}; }
    inline double4 zxwx() const { return {z, x, w, x}; }
    inline double4 zxwy() const { return {z, x, w, y}; }
    inline void set_zxwy(const double4& v) { z = v.x; x = v.y; w = v.z; y = v.w; }
    inline double4 zxwz() const { return {z, x, w, z}; }
    inline double4 zxww() const { return {z, x, w, w}; }
    inline double4 zyxx() const { return {z, y, x, x}; }
    inline double4 zyxy() const { return {z, y, x, y}; }
    inline double4 zyxz() const { return {z, y, x, z}; }
    inline double4 zyxw() const { return {z, y, x, w}; }
    inline void set_zyxw(const double4& v) { z = v.x; y = v.y; x = v.z; w = v.w; }
    inline double4 zyyx() const { return {z, y, y, x}; }
    inline double4 zyyy() const { return {z, y, y, y}; }
    inline double4 zyyz() const { return {z, y, y, z}; }
    inline double4 zyyw() const { return {z, y, y, w}; }
    inline double4 zyzx() const { return {z, y, z, x}; }
    inline double4 zyzy() const { return {z, y, z, y}; }
    inline double4 zyzz() const { return {z, y, z, z}; }
    inline double4 zyzw() const { return {z, y, z, w}; }
    inline double4 zywx() const { return {z, y, w, x}; }
    inline void set_zywx(const double4& v) { z = v.x; y = v.y; w = v.z; x = v.w; }
    inline double4 zywy() const { return {z, y, w, y}; }
    inline double4 zywz() const { return {z, y, w, z}; }
    inline double4 zyww() const { return {z, y, w, w}; }
    inline double4 zzxx() const { return {z, z, x, x}; }
    inline double4 zzxy() const { return {z, z, x, y}; }
    inline double4 zzxz() const { return {z, z, x, z}; }
    inline double4 zzxw() const { return {z, z, x, w}; }
    inline double4 zzyx() const { return {z, z, y, x}; }
    inline double4 zzyy() const { return {z, z, y, y}; }
    inline double4 zzyz() const { return {z, z, y, z}; }
    inline double4 zzyw() const { return {z, z, y, w}; }
    inline double4 zzzx() const { return {z, z, z, x}; }
    inline double4 zzzy() const { return {z, z, z, y}; }
    inline double4 zzzz() const { return {z, z, z, z}; }
    inline double4 zzzw() const { return {z, z, z, w}; }
    inline double4 zzwx() const { return {z, z, w, x}; }
    inline double4 zzwy() const { return {z, z, w, y}; }
    inline double4 zzwz() const { return {z, z, w, z}; }
    inline double4 zzww() const { return {z, z, w, w}; }
    inline double4 zwxx() const { return {z, w, x, x}; }
    inline double4 zwxy() const { return {z, w, x, y}; }
    inline void set_zwxy(const double4& v) { z = v.x; w = v.y; x = v.z; y = v.w; }
    inline double4 zwxz() const { return {z, w, x, z}; }
    inline double4 zwxw() const { return {z, w, x, w}; }
    inline double4 zwyx() const { return {z, w, y, x}; }
    inline void set_zwyx(const double4& v) { z = v.x; w = v.y; y = v.z; x = v.w; }
    inline double4 zwyy() const { return {z, w, y, y}; }
    inline double4 zwyz() const { return {z, w, y, z}; }
    inline double4 zwyw() const { return {z, w, y, w}; }
    inline double4 zwzx() const { return {z, w, z, x}; }
    inline double4 zwzy() const { return {z, w, z, y}; }
    inline double4 zwzz() const { return {z, w, z, z}; }
    inline double4 zwzw() const { return {z, w, z, w}; }
    inline double4 zwwx() const { return {z, w, w, x}; }
    inline double4 zwwy() const { return {z, w, w, y}; }
    inline double4 zwwz() const { return {z, w, w, z}; }
    inline double4 zwww() const { return {z, w, w, w}; }
    inline double4 wxxx() const { return {w, x, x, x}; }
    inline double4 wxxy() const { return {w, x, x, y}; }
    inline double4 wxxz() const { return {w, x, x, z}; }
    inline double4 wxxw() const { return {w, x, x, w}; }
    inline double4 wxyx() const { return {w, x, y, x}; }
    inline double4 wxyy() const { return {w, x, y, y}; }
    inline double4 wxyz() const { return {w, x, y, z}; }
    inline void set_wxyz(const double4& v) { w = v.x; x = v.y; y = v.z; z = v.w; }
    inline double4 wxyw() const { return {w, x, y, w}; }
    inline double4 wxzx() const { return {w, x, z, x}; }
    inline double4 wxzy() const { return {w, x, z, y}; }
    inline void set_wxzy(const double4& v) { w = v.x; x = v.y; z = v.z; y = v.w; }
    inline double4 wxzz() const { return {w, x, z, z}; }
    inline double4 wxzw() const { return {w, x, z, w}; }
    inline double4 wxwx() const { return {w, x, w, x}; }
    inline double4 wxwy() const { return {w, x, w, y}; }
    inline double4 wxwz() const { return {w, x, w, z}; }
    inline double4 wxww() const { return {w, x, w, w}; }
    inline double4 wyxx() const { return {w, y, x, x}; }
    inline double4 wyxy() const { return {w, y, x, y}; }
    inline double4 wyxz() const { return {w, y, x, z}; }
    inline void set_wyxz(const double4& v) { w = v.x; y = v.y; x = v.z; z = v.w; }
    inline double4 wyxw() const { return {w, y, x, w}; }
    inline double4 wyyx() const { return {w, y, y, x}; }
    inline double4 wyyy() const { return {w, y, y, y}; }
    inline double4 wyyz() const { return {w, y, y, z}; }
    inline double4 wyyw() const { return {w, y, y, w}; }
    inline double4 wyzx() const { return {w, y, z, x}; }
    inline void set_wyzx(const double4& v) { w = v.x; y = v.y; z = v.z; x = v.w; }
    inline double4 wyzy() const { return {w, y, z, y}; }
    inline double4 wyzz() const { return {w, y, z, z}; }
    inline double4 wyzw() const { return {w, y, z, w}; }
    inline double4 wywx() const { return {w, y, w, x}; }
    inline double4 wywy() const { return {w, y, w, y}; }
    inline double4 wywz() const { return {w, y, w, z}; }
    inline double4 wyww() const { return {w, y, w, w}; }
    inline double4 wzxx() const { return {w, z, x, x}; }
    inline double4 wzxy() const { return {w, z, x, y}; }
    inline void set_wzxy(const double4& v) { w = v.x; z = v.y; x = v.z; y = v.w; }
    inline double4 wzxz() const { return {w, z, x, z}; }
    inline double4 wzxw() const { return {w, z, x, w}; }
    inline double4 wzyx() const { return {w, z, y, x}; }
    inline void set_wzyx(const double4& v) { w = v.x; z = v.y; y = v.z; x = v.w; }
    inline double4 wzyy() const { return {w, z, y, y}; }
    inline double4 wzyz() const { return {w, z, y, z}; }
    inline double4 wzyw() const { return {w, z, y, w}; }
    inline double4 wzzx() const { return {w, z, z, x}; }
    inline double4 wzzy() const { return {w, z, z, y}; }
    inline double4 wzzz() const { return {w, z, z, z}; }
    inline double4 wzzw() const { return {w, z, z, w}; }
    inline double4 wzwx() const { return {w, z, w, x}; }
    inline double4 wzwy() const { return {w, z, w, y}; }
    inline double4 wzwz() const { return {w, z, w, z}; }
    inline double4 wzww() const { return {w, z, w, w}; }
    inline double4 wwxx() const { return {w, w, x, x}; }
    inline double4 wwxy() const { return {w, w, x, y}; }
    inline double4 wwxz() const { return {w, w, x, z}; }
    inline double4 wwxw() const { return {w, w, x, w}; }
    inline double4 wwyx() const { return {w, w, y, x}; }
    inline double4 wwyy() const { return {w, w, y, y}; }
    inline double4 wwyz() const { return {w, w, y, z}; }
    inline double4 wwyw() const { return {w, w, y, w}; }
    inline double4 wwzx() const { return {w, w, z, x}; }
    inline double4 wwzy() const { return {w, w, z, y}; }
    inline double4 wwzz() const { return {w, w, z, z}; }
    inline double4 wwzw() const { return {w, w, z, w}; }
    inline double4 wwwx() const { return {w, w, w, x}; }
    inline double4 wwwy() const { return {w, w, w, y}; }
    inline double4 wwwz() const { return {w, w, w, z}; }
    inline double4 wwww() const { return {w, w, w, w}; }
    
    // hash
    inline static size_t _skr_hash(const double4& v) {
        auto hasher = ::skr::Hash<double>{};
        auto result = hasher(v.x);
        result = ::skr::hash_combine(result, hasher(v.y));
        result = ::skr::hash_combine(result, hasher(v.z));
        result = ::skr::hash_combine(result, hasher(v.w));
        return result;
    }
};
}
}
