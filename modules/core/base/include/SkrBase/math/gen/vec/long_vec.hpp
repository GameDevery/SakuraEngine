//! *************************************************************************
//! **  This file is auto-generated by gen_math, do not edit it manually.  **
//! *************************************************************************

#pragma once
#include <cstdint>
#include <cmath>
#include "../gen_math_fwd.hpp"
#include <SkrBase/misc/debug.h>
#include <SkrBase/misc/hash.hpp>

namespace skr {
inline namespace math {
struct long2 {
    int64_t x, y;
    
    // ctor & dtor
    inline long2(): x(0), y(0) {}
    inline long2(int64_t v): x(v), y(v) {}
    inline long2(int64_t v0, int64_t v1): x(v0), y(v1) {}
    inline ~long2() = default;
    
    // cast ctor
    explicit long2(const float2& rhs);
    explicit long2(const double2& rhs);
    long2(const bool2& rhs);
    long2(const int2& rhs);
    explicit long2(const uint2& rhs);
    explicit long2(const ulong2& rhs);
    
    // copy & move & assign & move assign
    inline long2(const long2&) = default;
    inline long2(long2&&) = default;
    inline long2& operator=(const long2&) = default;
    inline long2& operator=(long2&&) = default;
    
    // array assessor
    inline int64_t& operator[](size_t i) {
        SKR_ASSERT(i >= 0 && i < 2 && "index out of range");
        return reinterpret_cast<int64_t*>(this)[i];
    }
    inline int64_t operator[](size_t i) const {
        return const_cast<long2*>(this)->operator[](i);
    }
    
    // unary operator
    inline long2 operator-() const { return { -x, -y }; }
    
    // arithmetic operator
    inline friend long2 operator+(const long2& lhs, const long2& rhs) { return { lhs.x + rhs.x, lhs.y + rhs.y }; }
    inline friend long2 operator-(const long2& lhs, const long2& rhs) { return { lhs.x - rhs.x, lhs.y - rhs.y }; }
    inline friend long2 operator*(const long2& lhs, const long2& rhs) { return { lhs.x * rhs.x, lhs.y * rhs.y }; }
    inline friend long2 operator/(const long2& lhs, const long2& rhs) { return { lhs.x / rhs.x, lhs.y / rhs.y }; }
    inline friend long2 operator%(const long2& lhs, const long2& rhs) { return { lhs.x % rhs.x, lhs.y % rhs.y }; }
    
    // arithmetic assign operator
    inline long2& operator+=(const long2& rhs) { x += rhs.x, y += rhs.y; return *this; }
    inline long2& operator-=(const long2& rhs) { x -= rhs.x, y -= rhs.y; return *this; }
    inline long2& operator*=(const long2& rhs) { x *= rhs.x, y *= rhs.y; return *this; }
    inline long2& operator/=(const long2& rhs) { x /= rhs.x, y /= rhs.y; return *this; }
    inline long2& operator%=(const long2& rhs) { x %= rhs.x, y %= rhs.y; return *this; }
    
    // compare operator
    friend bool2 operator==(const long2& lhs, const long2& rhs);
    friend bool2 operator!=(const long2& lhs, const long2& rhs);
    friend bool2 operator<(const long2& lhs, const long2& rhs);
    friend bool2 operator<=(const long2& lhs, const long2& rhs);
    friend bool2 operator>(const long2& lhs, const long2& rhs);
    friend bool2 operator>=(const long2& lhs, const long2& rhs);
    
    // swizzle
    inline long2 xx() const { return {x, x}; }
    inline long2 xy() const { return {x, y}; }
    inline void set_xy(const long2& v) { x = v.x; y = v.y; }
    inline long2 yx() const { return {y, x}; }
    inline void set_yx(const long2& v) { y = v.x; x = v.y; }
    inline long2 yy() const { return {y, y}; }
    
    // hash
    inline static size_t _skr_hash(const long2& v) {
        auto hasher = ::skr::Hash<int64_t>{};
        auto result = hasher(v.x);
        result = ::skr::hash_combine(result, hasher(v.y));
        return result;
    }
};
struct long3 {
    int64_t x, y, z;
    
    // ctor & dtor
    inline long3(): x(0), y(0), z(0) {}
    inline long3(int64_t v): x(v), y(v), z(v) {}
    inline long3(int64_t v0, int64_t v1, int64_t v2): x(v0), y(v1), z(v2) {}
    inline long3(int64_t v0, long2 v1): x(v0), y(v1.x), z(v1.y) {}
    inline long3(long2 v0, int64_t v1): x(v0.x), y(v0.y), z(v1) {}
    inline ~long3() = default;
    
    // cast ctor
    explicit long3(const float3& rhs);
    explicit long3(const double3& rhs);
    long3(const bool3& rhs);
    long3(const int3& rhs);
    explicit long3(const uint3& rhs);
    explicit long3(const ulong3& rhs);
    
    // copy & move & assign & move assign
    inline long3(const long3&) = default;
    inline long3(long3&&) = default;
    inline long3& operator=(const long3&) = default;
    inline long3& operator=(long3&&) = default;
    
    // array assessor
    inline int64_t& operator[](size_t i) {
        SKR_ASSERT(i >= 0 && i < 3 && "index out of range");
        return reinterpret_cast<int64_t*>(this)[i];
    }
    inline int64_t operator[](size_t i) const {
        return const_cast<long3*>(this)->operator[](i);
    }
    
    // unary operator
    inline long3 operator-() const { return { -x, -y, -z }; }
    
    // arithmetic operator
    inline friend long3 operator+(const long3& lhs, const long3& rhs) { return { lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z }; }
    inline friend long3 operator-(const long3& lhs, const long3& rhs) { return { lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z }; }
    inline friend long3 operator*(const long3& lhs, const long3& rhs) { return { lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z }; }
    inline friend long3 operator/(const long3& lhs, const long3& rhs) { return { lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z }; }
    inline friend long3 operator%(const long3& lhs, const long3& rhs) { return { lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z }; }
    
    // arithmetic assign operator
    inline long3& operator+=(const long3& rhs) { x += rhs.x, y += rhs.y, z += rhs.z; return *this; }
    inline long3& operator-=(const long3& rhs) { x -= rhs.x, y -= rhs.y, z -= rhs.z; return *this; }
    inline long3& operator*=(const long3& rhs) { x *= rhs.x, y *= rhs.y, z *= rhs.z; return *this; }
    inline long3& operator/=(const long3& rhs) { x /= rhs.x, y /= rhs.y, z /= rhs.z; return *this; }
    inline long3& operator%=(const long3& rhs) { x %= rhs.x, y %= rhs.y, z %= rhs.z; return *this; }
    
    // compare operator
    friend bool3 operator==(const long3& lhs, const long3& rhs);
    friend bool3 operator!=(const long3& lhs, const long3& rhs);
    friend bool3 operator<(const long3& lhs, const long3& rhs);
    friend bool3 operator<=(const long3& lhs, const long3& rhs);
    friend bool3 operator>(const long3& lhs, const long3& rhs);
    friend bool3 operator>=(const long3& lhs, const long3& rhs);
    
    // swizzle
    inline long2 xx() const { return {x, x}; }
    inline long2 xy() const { return {x, y}; }
    inline void set_xy(const long2& v) { x = v.x; y = v.y; }
    inline long2 xz() const { return {x, z}; }
    inline void set_xz(const long2& v) { x = v.x; z = v.y; }
    inline long2 yx() const { return {y, x}; }
    inline void set_yx(const long2& v) { y = v.x; x = v.y; }
    inline long2 yy() const { return {y, y}; }
    inline long2 yz() const { return {y, z}; }
    inline void set_yz(const long2& v) { y = v.x; z = v.y; }
    inline long2 zx() const { return {z, x}; }
    inline void set_zx(const long2& v) { z = v.x; x = v.y; }
    inline long2 zy() const { return {z, y}; }
    inline void set_zy(const long2& v) { z = v.x; y = v.y; }
    inline long2 zz() const { return {z, z}; }
    inline long3 xxx() const { return {x, x, x}; }
    inline long3 xxy() const { return {x, x, y}; }
    inline long3 xxz() const { return {x, x, z}; }
    inline long3 xyx() const { return {x, y, x}; }
    inline long3 xyy() const { return {x, y, y}; }
    inline long3 xyz() const { return {x, y, z}; }
    inline void set_xyz(const long3& v) { x = v.x; y = v.y; z = v.z; }
    inline long3 xzx() const { return {x, z, x}; }
    inline long3 xzy() const { return {x, z, y}; }
    inline void set_xzy(const long3& v) { x = v.x; z = v.y; y = v.z; }
    inline long3 xzz() const { return {x, z, z}; }
    inline long3 yxx() const { return {y, x, x}; }
    inline long3 yxy() const { return {y, x, y}; }
    inline long3 yxz() const { return {y, x, z}; }
    inline void set_yxz(const long3& v) { y = v.x; x = v.y; z = v.z; }
    inline long3 yyx() const { return {y, y, x}; }
    inline long3 yyy() const { return {y, y, y}; }
    inline long3 yyz() const { return {y, y, z}; }
    inline long3 yzx() const { return {y, z, x}; }
    inline void set_yzx(const long3& v) { y = v.x; z = v.y; x = v.z; }
    inline long3 yzy() const { return {y, z, y}; }
    inline long3 yzz() const { return {y, z, z}; }
    inline long3 zxx() const { return {z, x, x}; }
    inline long3 zxy() const { return {z, x, y}; }
    inline void set_zxy(const long3& v) { z = v.x; x = v.y; y = v.z; }
    inline long3 zxz() const { return {z, x, z}; }
    inline long3 zyx() const { return {z, y, x}; }
    inline void set_zyx(const long3& v) { z = v.x; y = v.y; x = v.z; }
    inline long3 zyy() const { return {z, y, y}; }
    inline long3 zyz() const { return {z, y, z}; }
    inline long3 zzx() const { return {z, z, x}; }
    inline long3 zzy() const { return {z, z, y}; }
    inline long3 zzz() const { return {z, z, z}; }
    
    // hash
    inline static size_t _skr_hash(const long3& v) {
        auto hasher = ::skr::Hash<int64_t>{};
        auto result = hasher(v.x);
        result = ::skr::hash_combine(result, hasher(v.y));
        result = ::skr::hash_combine(result, hasher(v.z));
        return result;
    }
};
struct long4 {
    int64_t x, y, z, w;
    
    // ctor & dtor
    inline long4(): x(0), y(0), z(0), w(0) {}
    inline long4(int64_t v): x(v), y(v), z(v), w(v) {}
    inline long4(int64_t v0, int64_t v1, int64_t v2, int64_t v3): x(v0), y(v1), z(v2), w(v3) {}
    inline long4(int64_t v0, int64_t v1, long2 v2): x(v0), y(v1), z(v2.x), w(v2.y) {}
    inline long4(int64_t v0, long2 v1, int64_t v2): x(v0), y(v1.x), z(v1.y), w(v2) {}
    inline long4(int64_t v0, long3 v1): x(v0), y(v1.x), z(v1.y), w(v1.z) {}
    inline long4(long2 v0, int64_t v1, int64_t v2): x(v0.x), y(v0.y), z(v1), w(v2) {}
    inline long4(long2 v0, long2 v1): x(v0.x), y(v0.y), z(v1.x), w(v1.y) {}
    inline long4(long3 v0, int64_t v1): x(v0.x), y(v0.y), z(v0.z), w(v1) {}
    inline ~long4() = default;
    
    // cast ctor
    explicit long4(const float4& rhs);
    explicit long4(const double4& rhs);
    long4(const bool4& rhs);
    long4(const int4& rhs);
    explicit long4(const uint4& rhs);
    explicit long4(const ulong4& rhs);
    
    // copy & move & assign & move assign
    inline long4(const long4&) = default;
    inline long4(long4&&) = default;
    inline long4& operator=(const long4&) = default;
    inline long4& operator=(long4&&) = default;
    
    // array assessor
    inline int64_t& operator[](size_t i) {
        SKR_ASSERT(i >= 0 && i < 4 && "index out of range");
        return reinterpret_cast<int64_t*>(this)[i];
    }
    inline int64_t operator[](size_t i) const {
        return const_cast<long4*>(this)->operator[](i);
    }
    
    // unary operator
    inline long4 operator-() const { return { -x, -y, -z, -w }; }
    
    // arithmetic operator
    inline friend long4 operator+(const long4& lhs, const long4& rhs) { return { lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z, lhs.w + rhs.w }; }
    inline friend long4 operator-(const long4& lhs, const long4& rhs) { return { lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z, lhs.w - rhs.w }; }
    inline friend long4 operator*(const long4& lhs, const long4& rhs) { return { lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z, lhs.w * rhs.w }; }
    inline friend long4 operator/(const long4& lhs, const long4& rhs) { return { lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z, lhs.w / rhs.w }; }
    inline friend long4 operator%(const long4& lhs, const long4& rhs) { return { lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z, lhs.w % rhs.w }; }
    
    // arithmetic assign operator
    inline long4& operator+=(const long4& rhs) { x += rhs.x, y += rhs.y, z += rhs.z, w += rhs.w; return *this; }
    inline long4& operator-=(const long4& rhs) { x -= rhs.x, y -= rhs.y, z -= rhs.z, w -= rhs.w; return *this; }
    inline long4& operator*=(const long4& rhs) { x *= rhs.x, y *= rhs.y, z *= rhs.z, w *= rhs.w; return *this; }
    inline long4& operator/=(const long4& rhs) { x /= rhs.x, y /= rhs.y, z /= rhs.z, w /= rhs.w; return *this; }
    inline long4& operator%=(const long4& rhs) { x %= rhs.x, y %= rhs.y, z %= rhs.z, w %= rhs.w; return *this; }
    
    // compare operator
    friend bool4 operator==(const long4& lhs, const long4& rhs);
    friend bool4 operator!=(const long4& lhs, const long4& rhs);
    friend bool4 operator<(const long4& lhs, const long4& rhs);
    friend bool4 operator<=(const long4& lhs, const long4& rhs);
    friend bool4 operator>(const long4& lhs, const long4& rhs);
    friend bool4 operator>=(const long4& lhs, const long4& rhs);
    
    // swizzle
    inline long2 xx() const { return {x, x}; }
    inline long2 xy() const { return {x, y}; }
    inline void set_xy(const long2& v) { x = v.x; y = v.y; }
    inline long2 xz() const { return {x, z}; }
    inline void set_xz(const long2& v) { x = v.x; z = v.y; }
    inline long2 xw() const { return {x, w}; }
    inline void set_xw(const long2& v) { x = v.x; w = v.y; }
    inline long2 yx() const { return {y, x}; }
    inline void set_yx(const long2& v) { y = v.x; x = v.y; }
    inline long2 yy() const { return {y, y}; }
    inline long2 yz() const { return {y, z}; }
    inline void set_yz(const long2& v) { y = v.x; z = v.y; }
    inline long2 yw() const { return {y, w}; }
    inline void set_yw(const long2& v) { y = v.x; w = v.y; }
    inline long2 zx() const { return {z, x}; }
    inline void set_zx(const long2& v) { z = v.x; x = v.y; }
    inline long2 zy() const { return {z, y}; }
    inline void set_zy(const long2& v) { z = v.x; y = v.y; }
    inline long2 zz() const { return {z, z}; }
    inline long2 zw() const { return {z, w}; }
    inline void set_zw(const long2& v) { z = v.x; w = v.y; }
    inline long2 wx() const { return {w, x}; }
    inline void set_wx(const long2& v) { w = v.x; x = v.y; }
    inline long2 wy() const { return {w, y}; }
    inline void set_wy(const long2& v) { w = v.x; y = v.y; }
    inline long2 wz() const { return {w, z}; }
    inline void set_wz(const long2& v) { w = v.x; z = v.y; }
    inline long2 ww() const { return {w, w}; }
    inline long3 xxx() const { return {x, x, x}; }
    inline long3 xxy() const { return {x, x, y}; }
    inline long3 xxz() const { return {x, x, z}; }
    inline long3 xxw() const { return {x, x, w}; }
    inline long3 xyx() const { return {x, y, x}; }
    inline long3 xyy() const { return {x, y, y}; }
    inline long3 xyz() const { return {x, y, z}; }
    inline void set_xyz(const long3& v) { x = v.x; y = v.y; z = v.z; }
    inline long3 xyw() const { return {x, y, w}; }
    inline void set_xyw(const long3& v) { x = v.x; y = v.y; w = v.z; }
    inline long3 xzx() const { return {x, z, x}; }
    inline long3 xzy() const { return {x, z, y}; }
    inline void set_xzy(const long3& v) { x = v.x; z = v.y; y = v.z; }
    inline long3 xzz() const { return {x, z, z}; }
    inline long3 xzw() const { return {x, z, w}; }
    inline void set_xzw(const long3& v) { x = v.x; z = v.y; w = v.z; }
    inline long3 xwx() const { return {x, w, x}; }
    inline long3 xwy() const { return {x, w, y}; }
    inline void set_xwy(const long3& v) { x = v.x; w = v.y; y = v.z; }
    inline long3 xwz() const { return {x, w, z}; }
    inline void set_xwz(const long3& v) { x = v.x; w = v.y; z = v.z; }
    inline long3 xww() const { return {x, w, w}; }
    inline long3 yxx() const { return {y, x, x}; }
    inline long3 yxy() const { return {y, x, y}; }
    inline long3 yxz() const { return {y, x, z}; }
    inline void set_yxz(const long3& v) { y = v.x; x = v.y; z = v.z; }
    inline long3 yxw() const { return {y, x, w}; }
    inline void set_yxw(const long3& v) { y = v.x; x = v.y; w = v.z; }
    inline long3 yyx() const { return {y, y, x}; }
    inline long3 yyy() const { return {y, y, y}; }
    inline long3 yyz() const { return {y, y, z}; }
    inline long3 yyw() const { return {y, y, w}; }
    inline long3 yzx() const { return {y, z, x}; }
    inline void set_yzx(const long3& v) { y = v.x; z = v.y; x = v.z; }
    inline long3 yzy() const { return {y, z, y}; }
    inline long3 yzz() const { return {y, z, z}; }
    inline long3 yzw() const { return {y, z, w}; }
    inline void set_yzw(const long3& v) { y = v.x; z = v.y; w = v.z; }
    inline long3 ywx() const { return {y, w, x}; }
    inline void set_ywx(const long3& v) { y = v.x; w = v.y; x = v.z; }
    inline long3 ywy() const { return {y, w, y}; }
    inline long3 ywz() const { return {y, w, z}; }
    inline void set_ywz(const long3& v) { y = v.x; w = v.y; z = v.z; }
    inline long3 yww() const { return {y, w, w}; }
    inline long3 zxx() const { return {z, x, x}; }
    inline long3 zxy() const { return {z, x, y}; }
    inline void set_zxy(const long3& v) { z = v.x; x = v.y; y = v.z; }
    inline long3 zxz() const { return {z, x, z}; }
    inline long3 zxw() const { return {z, x, w}; }
    inline void set_zxw(const long3& v) { z = v.x; x = v.y; w = v.z; }
    inline long3 zyx() const { return {z, y, x}; }
    inline void set_zyx(const long3& v) { z = v.x; y = v.y; x = v.z; }
    inline long3 zyy() const { return {z, y, y}; }
    inline long3 zyz() const { return {z, y, z}; }
    inline long3 zyw() const { return {z, y, w}; }
    inline void set_zyw(const long3& v) { z = v.x; y = v.y; w = v.z; }
    inline long3 zzx() const { return {z, z, x}; }
    inline long3 zzy() const { return {z, z, y}; }
    inline long3 zzz() const { return {z, z, z}; }
    inline long3 zzw() const { return {z, z, w}; }
    inline long3 zwx() const { return {z, w, x}; }
    inline void set_zwx(const long3& v) { z = v.x; w = v.y; x = v.z; }
    inline long3 zwy() const { return {z, w, y}; }
    inline void set_zwy(const long3& v) { z = v.x; w = v.y; y = v.z; }
    inline long3 zwz() const { return {z, w, z}; }
    inline long3 zww() const { return {z, w, w}; }
    inline long3 wxx() const { return {w, x, x}; }
    inline long3 wxy() const { return {w, x, y}; }
    inline void set_wxy(const long3& v) { w = v.x; x = v.y; y = v.z; }
    inline long3 wxz() const { return {w, x, z}; }
    inline void set_wxz(const long3& v) { w = v.x; x = v.y; z = v.z; }
    inline long3 wxw() const { return {w, x, w}; }
    inline long3 wyx() const { return {w, y, x}; }
    inline void set_wyx(const long3& v) { w = v.x; y = v.y; x = v.z; }
    inline long3 wyy() const { return {w, y, y}; }
    inline long3 wyz() const { return {w, y, z}; }
    inline void set_wyz(const long3& v) { w = v.x; y = v.y; z = v.z; }
    inline long3 wyw() const { return {w, y, w}; }
    inline long3 wzx() const { return {w, z, x}; }
    inline void set_wzx(const long3& v) { w = v.x; z = v.y; x = v.z; }
    inline long3 wzy() const { return {w, z, y}; }
    inline void set_wzy(const long3& v) { w = v.x; z = v.y; y = v.z; }
    inline long3 wzz() const { return {w, z, z}; }
    inline long3 wzw() const { return {w, z, w}; }
    inline long3 wwx() const { return {w, w, x}; }
    inline long3 wwy() const { return {w, w, y}; }
    inline long3 wwz() const { return {w, w, z}; }
    inline long3 www() const { return {w, w, w}; }
    inline long4 xxxx() const { return {x, x, x, x}; }
    inline long4 xxxy() const { return {x, x, x, y}; }
    inline long4 xxxz() const { return {x, x, x, z}; }
    inline long4 xxxw() const { return {x, x, x, w}; }
    inline long4 xxyx() const { return {x, x, y, x}; }
    inline long4 xxyy() const { return {x, x, y, y}; }
    inline long4 xxyz() const { return {x, x, y, z}; }
    inline long4 xxyw() const { return {x, x, y, w}; }
    inline long4 xxzx() const { return {x, x, z, x}; }
    inline long4 xxzy() const { return {x, x, z, y}; }
    inline long4 xxzz() const { return {x, x, z, z}; }
    inline long4 xxzw() const { return {x, x, z, w}; }
    inline long4 xxwx() const { return {x, x, w, x}; }
    inline long4 xxwy() const { return {x, x, w, y}; }
    inline long4 xxwz() const { return {x, x, w, z}; }
    inline long4 xxww() const { return {x, x, w, w}; }
    inline long4 xyxx() const { return {x, y, x, x}; }
    inline long4 xyxy() const { return {x, y, x, y}; }
    inline long4 xyxz() const { return {x, y, x, z}; }
    inline long4 xyxw() const { return {x, y, x, w}; }
    inline long4 xyyx() const { return {x, y, y, x}; }
    inline long4 xyyy() const { return {x, y, y, y}; }
    inline long4 xyyz() const { return {x, y, y, z}; }
    inline long4 xyyw() const { return {x, y, y, w}; }
    inline long4 xyzx() const { return {x, y, z, x}; }
    inline long4 xyzy() const { return {x, y, z, y}; }
    inline long4 xyzz() const { return {x, y, z, z}; }
    inline long4 xyzw() const { return {x, y, z, w}; }
    inline void set_xyzw(const long4& v) { x = v.x; y = v.y; z = v.z; w = v.w; }
    inline long4 xywx() const { return {x, y, w, x}; }
    inline long4 xywy() const { return {x, y, w, y}; }
    inline long4 xywz() const { return {x, y, w, z}; }
    inline void set_xywz(const long4& v) { x = v.x; y = v.y; w = v.z; z = v.w; }
    inline long4 xyww() const { return {x, y, w, w}; }
    inline long4 xzxx() const { return {x, z, x, x}; }
    inline long4 xzxy() const { return {x, z, x, y}; }
    inline long4 xzxz() const { return {x, z, x, z}; }
    inline long4 xzxw() const { return {x, z, x, w}; }
    inline long4 xzyx() const { return {x, z, y, x}; }
    inline long4 xzyy() const { return {x, z, y, y}; }
    inline long4 xzyz() const { return {x, z, y, z}; }
    inline long4 xzyw() const { return {x, z, y, w}; }
    inline void set_xzyw(const long4& v) { x = v.x; z = v.y; y = v.z; w = v.w; }
    inline long4 xzzx() const { return {x, z, z, x}; }
    inline long4 xzzy() const { return {x, z, z, y}; }
    inline long4 xzzz() const { return {x, z, z, z}; }
    inline long4 xzzw() const { return {x, z, z, w}; }
    inline long4 xzwx() const { return {x, z, w, x}; }
    inline long4 xzwy() const { return {x, z, w, y}; }
    inline void set_xzwy(const long4& v) { x = v.x; z = v.y; w = v.z; y = v.w; }
    inline long4 xzwz() const { return {x, z, w, z}; }
    inline long4 xzww() const { return {x, z, w, w}; }
    inline long4 xwxx() const { return {x, w, x, x}; }
    inline long4 xwxy() const { return {x, w, x, y}; }
    inline long4 xwxz() const { return {x, w, x, z}; }
    inline long4 xwxw() const { return {x, w, x, w}; }
    inline long4 xwyx() const { return {x, w, y, x}; }
    inline long4 xwyy() const { return {x, w, y, y}; }
    inline long4 xwyz() const { return {x, w, y, z}; }
    inline void set_xwyz(const long4& v) { x = v.x; w = v.y; y = v.z; z = v.w; }
    inline long4 xwyw() const { return {x, w, y, w}; }
    inline long4 xwzx() const { return {x, w, z, x}; }
    inline long4 xwzy() const { return {x, w, z, y}; }
    inline void set_xwzy(const long4& v) { x = v.x; w = v.y; z = v.z; y = v.w; }
    inline long4 xwzz() const { return {x, w, z, z}; }
    inline long4 xwzw() const { return {x, w, z, w}; }
    inline long4 xwwx() const { return {x, w, w, x}; }
    inline long4 xwwy() const { return {x, w, w, y}; }
    inline long4 xwwz() const { return {x, w, w, z}; }
    inline long4 xwww() const { return {x, w, w, w}; }
    inline long4 yxxx() const { return {y, x, x, x}; }
    inline long4 yxxy() const { return {y, x, x, y}; }
    inline long4 yxxz() const { return {y, x, x, z}; }
    inline long4 yxxw() const { return {y, x, x, w}; }
    inline long4 yxyx() const { return {y, x, y, x}; }
    inline long4 yxyy() const { return {y, x, y, y}; }
    inline long4 yxyz() const { return {y, x, y, z}; }
    inline long4 yxyw() const { return {y, x, y, w}; }
    inline long4 yxzx() const { return {y, x, z, x}; }
    inline long4 yxzy() const { return {y, x, z, y}; }
    inline long4 yxzz() const { return {y, x, z, z}; }
    inline long4 yxzw() const { return {y, x, z, w}; }
    inline void set_yxzw(const long4& v) { y = v.x; x = v.y; z = v.z; w = v.w; }
    inline long4 yxwx() const { return {y, x, w, x}; }
    inline long4 yxwy() const { return {y, x, w, y}; }
    inline long4 yxwz() const { return {y, x, w, z}; }
    inline void set_yxwz(const long4& v) { y = v.x; x = v.y; w = v.z; z = v.w; }
    inline long4 yxww() const { return {y, x, w, w}; }
    inline long4 yyxx() const { return {y, y, x, x}; }
    inline long4 yyxy() const { return {y, y, x, y}; }
    inline long4 yyxz() const { return {y, y, x, z}; }
    inline long4 yyxw() const { return {y, y, x, w}; }
    inline long4 yyyx() const { return {y, y, y, x}; }
    inline long4 yyyy() const { return {y, y, y, y}; }
    inline long4 yyyz() const { return {y, y, y, z}; }
    inline long4 yyyw() const { return {y, y, y, w}; }
    inline long4 yyzx() const { return {y, y, z, x}; }
    inline long4 yyzy() const { return {y, y, z, y}; }
    inline long4 yyzz() const { return {y, y, z, z}; }
    inline long4 yyzw() const { return {y, y, z, w}; }
    inline long4 yywx() const { return {y, y, w, x}; }
    inline long4 yywy() const { return {y, y, w, y}; }
    inline long4 yywz() const { return {y, y, w, z}; }
    inline long4 yyww() const { return {y, y, w, w}; }
    inline long4 yzxx() const { return {y, z, x, x}; }
    inline long4 yzxy() const { return {y, z, x, y}; }
    inline long4 yzxz() const { return {y, z, x, z}; }
    inline long4 yzxw() const { return {y, z, x, w}; }
    inline void set_yzxw(const long4& v) { y = v.x; z = v.y; x = v.z; w = v.w; }
    inline long4 yzyx() const { return {y, z, y, x}; }
    inline long4 yzyy() const { return {y, z, y, y}; }
    inline long4 yzyz() const { return {y, z, y, z}; }
    inline long4 yzyw() const { return {y, z, y, w}; }
    inline long4 yzzx() const { return {y, z, z, x}; }
    inline long4 yzzy() const { return {y, z, z, y}; }
    inline long4 yzzz() const { return {y, z, z, z}; }
    inline long4 yzzw() const { return {y, z, z, w}; }
    inline long4 yzwx() const { return {y, z, w, x}; }
    inline void set_yzwx(const long4& v) { y = v.x; z = v.y; w = v.z; x = v.w; }
    inline long4 yzwy() const { return {y, z, w, y}; }
    inline long4 yzwz() const { return {y, z, w, z}; }
    inline long4 yzww() const { return {y, z, w, w}; }
    inline long4 ywxx() const { return {y, w, x, x}; }
    inline long4 ywxy() const { return {y, w, x, y}; }
    inline long4 ywxz() const { return {y, w, x, z}; }
    inline void set_ywxz(const long4& v) { y = v.x; w = v.y; x = v.z; z = v.w; }
    inline long4 ywxw() const { return {y, w, x, w}; }
    inline long4 ywyx() const { return {y, w, y, x}; }
    inline long4 ywyy() const { return {y, w, y, y}; }
    inline long4 ywyz() const { return {y, w, y, z}; }
    inline long4 ywyw() const { return {y, w, y, w}; }
    inline long4 ywzx() const { return {y, w, z, x}; }
    inline void set_ywzx(const long4& v) { y = v.x; w = v.y; z = v.z; x = v.w; }
    inline long4 ywzy() const { return {y, w, z, y}; }
    inline long4 ywzz() const { return {y, w, z, z}; }
    inline long4 ywzw() const { return {y, w, z, w}; }
    inline long4 ywwx() const { return {y, w, w, x}; }
    inline long4 ywwy() const { return {y, w, w, y}; }
    inline long4 ywwz() const { return {y, w, w, z}; }
    inline long4 ywww() const { return {y, w, w, w}; }
    inline long4 zxxx() const { return {z, x, x, x}; }
    inline long4 zxxy() const { return {z, x, x, y}; }
    inline long4 zxxz() const { return {z, x, x, z}; }
    inline long4 zxxw() const { return {z, x, x, w}; }
    inline long4 zxyx() const { return {z, x, y, x}; }
    inline long4 zxyy() const { return {z, x, y, y}; }
    inline long4 zxyz() const { return {z, x, y, z}; }
    inline long4 zxyw() const { return {z, x, y, w}; }
    inline void set_zxyw(const long4& v) { z = v.x; x = v.y; y = v.z; w = v.w; }
    inline long4 zxzx() const { return {z, x, z, x}; }
    inline long4 zxzy() const { return {z, x, z, y}; }
    inline long4 zxzz() const { return {z, x, z, z}; }
    inline long4 zxzw() const { return {z, x, z, w}; }
    inline long4 zxwx() const { return {z, x, w, x}; }
    inline long4 zxwy() const { return {z, x, w, y}; }
    inline void set_zxwy(const long4& v) { z = v.x; x = v.y; w = v.z; y = v.w; }
    inline long4 zxwz() const { return {z, x, w, z}; }
    inline long4 zxww() const { return {z, x, w, w}; }
    inline long4 zyxx() const { return {z, y, x, x}; }
    inline long4 zyxy() const { return {z, y, x, y}; }
    inline long4 zyxz() const { return {z, y, x, z}; }
    inline long4 zyxw() const { return {z, y, x, w}; }
    inline void set_zyxw(const long4& v) { z = v.x; y = v.y; x = v.z; w = v.w; }
    inline long4 zyyx() const { return {z, y, y, x}; }
    inline long4 zyyy() const { return {z, y, y, y}; }
    inline long4 zyyz() const { return {z, y, y, z}; }
    inline long4 zyyw() const { return {z, y, y, w}; }
    inline long4 zyzx() const { return {z, y, z, x}; }
    inline long4 zyzy() const { return {z, y, z, y}; }
    inline long4 zyzz() const { return {z, y, z, z}; }
    inline long4 zyzw() const { return {z, y, z, w}; }
    inline long4 zywx() const { return {z, y, w, x}; }
    inline void set_zywx(const long4& v) { z = v.x; y = v.y; w = v.z; x = v.w; }
    inline long4 zywy() const { return {z, y, w, y}; }
    inline long4 zywz() const { return {z, y, w, z}; }
    inline long4 zyww() const { return {z, y, w, w}; }
    inline long4 zzxx() const { return {z, z, x, x}; }
    inline long4 zzxy() const { return {z, z, x, y}; }
    inline long4 zzxz() const { return {z, z, x, z}; }
    inline long4 zzxw() const { return {z, z, x, w}; }
    inline long4 zzyx() const { return {z, z, y, x}; }
    inline long4 zzyy() const { return {z, z, y, y}; }
    inline long4 zzyz() const { return {z, z, y, z}; }
    inline long4 zzyw() const { return {z, z, y, w}; }
    inline long4 zzzx() const { return {z, z, z, x}; }
    inline long4 zzzy() const { return {z, z, z, y}; }
    inline long4 zzzz() const { return {z, z, z, z}; }
    inline long4 zzzw() const { return {z, z, z, w}; }
    inline long4 zzwx() const { return {z, z, w, x}; }
    inline long4 zzwy() const { return {z, z, w, y}; }
    inline long4 zzwz() const { return {z, z, w, z}; }
    inline long4 zzww() const { return {z, z, w, w}; }
    inline long4 zwxx() const { return {z, w, x, x}; }
    inline long4 zwxy() const { return {z, w, x, y}; }
    inline void set_zwxy(const long4& v) { z = v.x; w = v.y; x = v.z; y = v.w; }
    inline long4 zwxz() const { return {z, w, x, z}; }
    inline long4 zwxw() const { return {z, w, x, w}; }
    inline long4 zwyx() const { return {z, w, y, x}; }
    inline void set_zwyx(const long4& v) { z = v.x; w = v.y; y = v.z; x = v.w; }
    inline long4 zwyy() const { return {z, w, y, y}; }
    inline long4 zwyz() const { return {z, w, y, z}; }
    inline long4 zwyw() const { return {z, w, y, w}; }
    inline long4 zwzx() const { return {z, w, z, x}; }
    inline long4 zwzy() const { return {z, w, z, y}; }
    inline long4 zwzz() const { return {z, w, z, z}; }
    inline long4 zwzw() const { return {z, w, z, w}; }
    inline long4 zwwx() const { return {z, w, w, x}; }
    inline long4 zwwy() const { return {z, w, w, y}; }
    inline long4 zwwz() const { return {z, w, w, z}; }
    inline long4 zwww() const { return {z, w, w, w}; }
    inline long4 wxxx() const { return {w, x, x, x}; }
    inline long4 wxxy() const { return {w, x, x, y}; }
    inline long4 wxxz() const { return {w, x, x, z}; }
    inline long4 wxxw() const { return {w, x, x, w}; }
    inline long4 wxyx() const { return {w, x, y, x}; }
    inline long4 wxyy() const { return {w, x, y, y}; }
    inline long4 wxyz() const { return {w, x, y, z}; }
    inline void set_wxyz(const long4& v) { w = v.x; x = v.y; y = v.z; z = v.w; }
    inline long4 wxyw() const { return {w, x, y, w}; }
    inline long4 wxzx() const { return {w, x, z, x}; }
    inline long4 wxzy() const { return {w, x, z, y}; }
    inline void set_wxzy(const long4& v) { w = v.x; x = v.y; z = v.z; y = v.w; }
    inline long4 wxzz() const { return {w, x, z, z}; }
    inline long4 wxzw() const { return {w, x, z, w}; }
    inline long4 wxwx() const { return {w, x, w, x}; }
    inline long4 wxwy() const { return {w, x, w, y}; }
    inline long4 wxwz() const { return {w, x, w, z}; }
    inline long4 wxww() const { return {w, x, w, w}; }
    inline long4 wyxx() const { return {w, y, x, x}; }
    inline long4 wyxy() const { return {w, y, x, y}; }
    inline long4 wyxz() const { return {w, y, x, z}; }
    inline void set_wyxz(const long4& v) { w = v.x; y = v.y; x = v.z; z = v.w; }
    inline long4 wyxw() const { return {w, y, x, w}; }
    inline long4 wyyx() const { return {w, y, y, x}; }
    inline long4 wyyy() const { return {w, y, y, y}; }
    inline long4 wyyz() const { return {w, y, y, z}; }
    inline long4 wyyw() const { return {w, y, y, w}; }
    inline long4 wyzx() const { return {w, y, z, x}; }
    inline void set_wyzx(const long4& v) { w = v.x; y = v.y; z = v.z; x = v.w; }
    inline long4 wyzy() const { return {w, y, z, y}; }
    inline long4 wyzz() const { return {w, y, z, z}; }
    inline long4 wyzw() const { return {w, y, z, w}; }
    inline long4 wywx() const { return {w, y, w, x}; }
    inline long4 wywy() const { return {w, y, w, y}; }
    inline long4 wywz() const { return {w, y, w, z}; }
    inline long4 wyww() const { return {w, y, w, w}; }
    inline long4 wzxx() const { return {w, z, x, x}; }
    inline long4 wzxy() const { return {w, z, x, y}; }
    inline void set_wzxy(const long4& v) { w = v.x; z = v.y; x = v.z; y = v.w; }
    inline long4 wzxz() const { return {w, z, x, z}; }
    inline long4 wzxw() const { return {w, z, x, w}; }
    inline long4 wzyx() const { return {w, z, y, x}; }
    inline void set_wzyx(const long4& v) { w = v.x; z = v.y; y = v.z; x = v.w; }
    inline long4 wzyy() const { return {w, z, y, y}; }
    inline long4 wzyz() const { return {w, z, y, z}; }
    inline long4 wzyw() const { return {w, z, y, w}; }
    inline long4 wzzx() const { return {w, z, z, x}; }
    inline long4 wzzy() const { return {w, z, z, y}; }
    inline long4 wzzz() const { return {w, z, z, z}; }
    inline long4 wzzw() const { return {w, z, z, w}; }
    inline long4 wzwx() const { return {w, z, w, x}; }
    inline long4 wzwy() const { return {w, z, w, y}; }
    inline long4 wzwz() const { return {w, z, w, z}; }
    inline long4 wzww() const { return {w, z, w, w}; }
    inline long4 wwxx() const { return {w, w, x, x}; }
    inline long4 wwxy() const { return {w, w, x, y}; }
    inline long4 wwxz() const { return {w, w, x, z}; }
    inline long4 wwxw() const { return {w, w, x, w}; }
    inline long4 wwyx() const { return {w, w, y, x}; }
    inline long4 wwyy() const { return {w, w, y, y}; }
    inline long4 wwyz() const { return {w, w, y, z}; }
    inline long4 wwyw() const { return {w, w, y, w}; }
    inline long4 wwzx() const { return {w, w, z, x}; }
    inline long4 wwzy() const { return {w, w, z, y}; }
    inline long4 wwzz() const { return {w, w, z, z}; }
    inline long4 wwzw() const { return {w, w, z, w}; }
    inline long4 wwwx() const { return {w, w, w, x}; }
    inline long4 wwwy() const { return {w, w, w, y}; }
    inline long4 wwwz() const { return {w, w, w, z}; }
    inline long4 wwww() const { return {w, w, w, w}; }
    
    // hash
    inline static size_t _skr_hash(const long4& v) {
        auto hasher = ::skr::Hash<int64_t>{};
        auto result = hasher(v.x);
        result = ::skr::hash_combine(result, hasher(v.y));
        result = ::skr::hash_combine(result, hasher(v.z));
        result = ::skr::hash_combine(result, hasher(v.w));
        return result;
    }
};
}
}
