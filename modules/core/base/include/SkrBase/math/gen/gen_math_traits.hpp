//! *************************************************************************
//! **  This file is auto-generated by gen_math, do not edit it manually.  **
//! *************************************************************************

#pragma once
#include "./gen_math.hpp"
namespace skr {
inline namespace math {
// float vector, component: float
template<> struct MathVectorMaker<float, 2> {
    using Type = float2;
};
template<> struct MathVectorTraits<float2> {
    inline static constexpr size_t kDimensions = 2;
    using ComponentType = float;
    using ImplementationFlag = void;
};
template<> struct MathVectorMaker<float, 3> {
    using Type = float3;
};
template<> struct MathVectorTraits<float3> {
    inline static constexpr size_t kDimensions = 3;
    using ComponentType = float;
    using ImplementationFlag = void;
};
template<> struct MathVectorMaker<float, 4> {
    using Type = float4;
};
template<> struct MathVectorTraits<float4> {
    inline static constexpr size_t kDimensions = 4;
    using ComponentType = float;
    using ImplementationFlag = void;
};

// double vector, component: double
template<> struct MathVectorMaker<double, 2> {
    using Type = double2;
};
template<> struct MathVectorTraits<double2> {
    inline static constexpr size_t kDimensions = 2;
    using ComponentType = double;
    using ImplementationFlag = void;
};
template<> struct MathVectorMaker<double, 3> {
    using Type = double3;
};
template<> struct MathVectorTraits<double3> {
    inline static constexpr size_t kDimensions = 3;
    using ComponentType = double;
    using ImplementationFlag = void;
};
template<> struct MathVectorMaker<double, 4> {
    using Type = double4;
};
template<> struct MathVectorTraits<double4> {
    inline static constexpr size_t kDimensions = 4;
    using ComponentType = double;
    using ImplementationFlag = void;
};

// bool vector, component: bool
template<> struct MathVectorMaker<bool, 2> {
    using Type = bool2;
};
template<> struct MathVectorTraits<bool2> {
    inline static constexpr size_t kDimensions = 2;
    using ComponentType = bool;
    using ImplementationFlag = void;
};
template<> struct MathVectorMaker<bool, 3> {
    using Type = bool3;
};
template<> struct MathVectorTraits<bool3> {
    inline static constexpr size_t kDimensions = 3;
    using ComponentType = bool;
    using ImplementationFlag = void;
};
template<> struct MathVectorMaker<bool, 4> {
    using Type = bool4;
};
template<> struct MathVectorTraits<bool4> {
    inline static constexpr size_t kDimensions = 4;
    using ComponentType = bool;
    using ImplementationFlag = void;
};

// int vector, component: int32_t
template<> struct MathVectorMaker<int32_t, 2> {
    using Type = int2;
};
template<> struct MathVectorTraits<int2> {
    inline static constexpr size_t kDimensions = 2;
    using ComponentType = int32_t;
    using ImplementationFlag = void;
};
template<> struct MathVectorMaker<int32_t, 3> {
    using Type = int3;
};
template<> struct MathVectorTraits<int3> {
    inline static constexpr size_t kDimensions = 3;
    using ComponentType = int32_t;
    using ImplementationFlag = void;
};
template<> struct MathVectorMaker<int32_t, 4> {
    using Type = int4;
};
template<> struct MathVectorTraits<int4> {
    inline static constexpr size_t kDimensions = 4;
    using ComponentType = int32_t;
    using ImplementationFlag = void;
};

// uint vector, component: uint32_t
template<> struct MathVectorMaker<uint32_t, 2> {
    using Type = uint2;
};
template<> struct MathVectorTraits<uint2> {
    inline static constexpr size_t kDimensions = 2;
    using ComponentType = uint32_t;
    using ImplementationFlag = void;
};
template<> struct MathVectorMaker<uint32_t, 3> {
    using Type = uint3;
};
template<> struct MathVectorTraits<uint3> {
    inline static constexpr size_t kDimensions = 3;
    using ComponentType = uint32_t;
    using ImplementationFlag = void;
};
template<> struct MathVectorMaker<uint32_t, 4> {
    using Type = uint4;
};
template<> struct MathVectorTraits<uint4> {
    inline static constexpr size_t kDimensions = 4;
    using ComponentType = uint32_t;
    using ImplementationFlag = void;
};

// long vector, component: int64_t
template<> struct MathVectorMaker<int64_t, 2> {
    using Type = long2;
};
template<> struct MathVectorTraits<long2> {
    inline static constexpr size_t kDimensions = 2;
    using ComponentType = int64_t;
    using ImplementationFlag = void;
};
template<> struct MathVectorMaker<int64_t, 3> {
    using Type = long3;
};
template<> struct MathVectorTraits<long3> {
    inline static constexpr size_t kDimensions = 3;
    using ComponentType = int64_t;
    using ImplementationFlag = void;
};
template<> struct MathVectorMaker<int64_t, 4> {
    using Type = long4;
};
template<> struct MathVectorTraits<long4> {
    inline static constexpr size_t kDimensions = 4;
    using ComponentType = int64_t;
    using ImplementationFlag = void;
};

// ulong vector, component: uint64_t
template<> struct MathVectorMaker<uint64_t, 2> {
    using Type = ulong2;
};
template<> struct MathVectorTraits<ulong2> {
    inline static constexpr size_t kDimensions = 2;
    using ComponentType = uint64_t;
    using ImplementationFlag = void;
};
template<> struct MathVectorMaker<uint64_t, 3> {
    using Type = ulong3;
};
template<> struct MathVectorTraits<ulong3> {
    inline static constexpr size_t kDimensions = 3;
    using ComponentType = uint64_t;
    using ImplementationFlag = void;
};
template<> struct MathVectorMaker<uint64_t, 4> {
    using Type = ulong4;
};
template<> struct MathVectorTraits<ulong4> {
    inline static constexpr size_t kDimensions = 4;
    using ComponentType = uint64_t;
    using ImplementationFlag = void;
};

// float matrix, component: float
template<> struct MathMatrixMaker<float, 3> {
    using Type = float3x3;
};
template<> struct MathMatrixTraits<float3x3> {
    inline static constexpr int32_t kDimensions = 3;
    using ComponentType = float;
    using ImplementationFlag = void;
};
template<> struct MathMatrixMaker<float, 4> {
    using Type = float4x4;
};
template<> struct MathMatrixTraits<float4x4> {
    inline static constexpr int32_t kDimensions = 4;
    using ComponentType = float;
    using ImplementationFlag = void;
};

// double matrix, component: double
template<> struct MathMatrixMaker<double, 3> {
    using Type = double3x3;
};
template<> struct MathMatrixTraits<double3x3> {
    inline static constexpr int32_t kDimensions = 3;
    using ComponentType = double;
    using ImplementationFlag = void;
};
template<> struct MathMatrixMaker<double, 4> {
    using Type = double4x4;
};
template<> struct MathMatrixTraits<double4x4> {
    inline static constexpr int32_t kDimensions = 4;
    using ComponentType = double;
    using ImplementationFlag = void;
};

}
}
