// <auto-generated/>

#nullable enable annotations
#nullable disable warnings

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0612, CS0618

namespace SB.Core
{
    internal partial class JsonContext
    {
        private global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::SB.Core.CLDependencies>? _CLDependencies;
        
        /// <summary>
        /// Defines the source generated JSON serialization contract metadata for a given type.
        /// </summary>
        #nullable disable annotations // Marking the property type as nullable-oblivious.
        public global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::SB.Core.CLDependencies> CLDependencies
        #nullable enable annotations
        {
            get => _CLDependencies ??= (global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::SB.Core.CLDependencies>)Options.GetTypeInfo(typeof(global::SB.Core.CLDependencies));
        }
        
        private global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::SB.Core.CLDependencies> Create_CLDependencies(global::System.Text.Json.JsonSerializerOptions options)
        {
            if (!TryGetTypeInfoForRuntimeCustomConverter<global::SB.Core.CLDependencies>(options, out global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::SB.Core.CLDependencies> jsonTypeInfo))
            {
                var objectInfo = new global::System.Text.Json.Serialization.Metadata.JsonObjectInfoValues<global::SB.Core.CLDependencies>
                {
                    ObjectCreator = () => new global::SB.Core.CLDependencies(),
                    ObjectWithParameterizedConstructorCreator = null,
                    PropertyMetadataInitializer = _ => CLDependenciesPropInit(options),
                    ConstructorParameterMetadataInitializer = null,
                    ConstructorAttributeProviderFactory = static () => typeof(global::SB.Core.CLDependencies).GetConstructor(InstanceMemberBindingFlags, binder: null, global::System.Array.Empty<global::System.Type>(), modifiers: null),
                    SerializeHandler = CLDependenciesSerializeHandler,
                };
                
                jsonTypeInfo = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateObjectInfo<global::SB.Core.CLDependencies>(options, objectInfo);
                jsonTypeInfo.NumberHandling = null;
            }
        
            jsonTypeInfo.OriginatingResolver = this;
            return jsonTypeInfo;
        }

        private static global::System.Text.Json.Serialization.Metadata.JsonPropertyInfo[] CLDependenciesPropInit(global::System.Text.Json.JsonSerializerOptions options)
        {
            var properties = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfo[2];

            var info0 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<global::System.Version>
            {
                IsProperty = true,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::SB.Core.CLDependencies),
                Converter = null,
                Getter = static obj => ((global::SB.Core.CLDependencies)obj).Version,
                Setter = static (obj, value) => global::System.Runtime.CompilerServices.Unsafe.Unbox<global::SB.Core.CLDependencies>(obj).Version = value!,
                IgnoreCondition = null,
                HasJsonInclude = false,
                IsExtensionData = false,
                NumberHandling = null,
                PropertyName = "Version",
                JsonPropertyName = null,
                AttributeProviderFactory = static () => typeof(global::SB.Core.CLDependencies).GetProperty("Version", InstanceMemberBindingFlags, null, typeof(global::System.Version), global::System.Array.Empty<global::System.Type>(), null),
            };
            
            properties[0] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<global::System.Version>(options, info0);
            properties[0].IsGetNullable = false;
            properties[0].IsSetNullable = false;

            var info1 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<global::SB.Core.CLDependenciesData>
            {
                IsProperty = true,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::SB.Core.CLDependencies),
                Converter = null,
                Getter = static obj => ((global::SB.Core.CLDependencies)obj).Data,
                Setter = static (obj, value) => global::System.Runtime.CompilerServices.Unsafe.Unbox<global::SB.Core.CLDependencies>(obj).Data = value!,
                IgnoreCondition = null,
                HasJsonInclude = false,
                IsExtensionData = false,
                NumberHandling = null,
                PropertyName = "Data",
                JsonPropertyName = null,
                AttributeProviderFactory = static () => typeof(global::SB.Core.CLDependencies).GetProperty("Data", InstanceMemberBindingFlags, null, typeof(global::SB.Core.CLDependenciesData), global::System.Array.Empty<global::System.Type>(), null),
            };
            
            properties[1] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<global::SB.Core.CLDependenciesData>(options, info1);

            return properties;
        }

        // Intentionally not a static method because we create a delegate to it. Invoking delegates to instance
        // methods is almost as fast as virtual calls. Static methods need to go through a shuffle thunk.
        private void CLDependenciesSerializeHandler(global::System.Text.Json.Utf8JsonWriter writer, global::SB.Core.CLDependencies value)
        {
            writer.WriteStartObject();

            writer.WritePropertyName(PropName_Version);
            global::System.Text.Json.JsonSerializer.Serialize(writer, ((global::SB.Core.CLDependencies)value).Version, Version);
            writer.WritePropertyName(PropName_Data);
            CLDependenciesDataSerializeHandler(writer, ((global::SB.Core.CLDependencies)value).Data);

            writer.WriteEndObject();
        }
    }
}
