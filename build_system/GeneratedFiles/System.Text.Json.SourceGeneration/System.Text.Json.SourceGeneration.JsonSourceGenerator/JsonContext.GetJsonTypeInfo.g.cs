// <auto-generated/>

#nullable enable annotations
#nullable disable warnings

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0612, CS0618

namespace SB.Core
{
    internal partial class JsonContext : global::System.Text.Json.Serialization.Metadata.IJsonTypeInfoResolver
    {
        /// <inheritdoc/>
        public override global::System.Text.Json.Serialization.Metadata.JsonTypeInfo? GetTypeInfo(global::System.Type type)
        {
            Options.TryGetTypeInfo(type, out global::System.Text.Json.Serialization.Metadata.JsonTypeInfo? typeInfo);
            return typeInfo;
        }

        global::System.Text.Json.Serialization.Metadata.JsonTypeInfo? global::System.Text.Json.Serialization.Metadata.IJsonTypeInfoResolver.GetTypeInfo(global::System.Type type, global::System.Text.Json.JsonSerializerOptions options)
        {
            if (type == typeof(global::SB.Core.CLDependencies))
            {
                return Create_CLDependencies(options);
            }
            if (type == typeof(global::SB.Core.CLDependenciesData))
            {
                return Create_CLDependenciesData(options);
            }
            if (type == typeof(global::SB.Core.CompileCommand))
            {
                return Create_CompileCommand(options);
            }
            if (type == typeof(global::SB.Core.Depend))
            {
                return Create_Depend(options);
            }
            if (type == typeof(global::System.Collections.Generic.KeyValuePair<string, global::System.DateTime>))
            {
                return Create_KeyValuePairStringDateTime(options);
            }
            if (type == typeof(global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<string, global::System.DateTime>>))
            {
                return Create_ListKeyValuePairStringDateTime(options);
            }
            if (type == typeof(global::System.Collections.Generic.List<string>))
            {
                return Create_ListString(options);
            }
            if (type == typeof(global::System.DateTime))
            {
                return Create_DateTime(options);
            }
            if (type == typeof(global::System.Version))
            {
                return Create_Version(options);
            }
            if (type == typeof(string))
            {
                return Create_String(options);
            }
            if (type == typeof(string[]))
            {
                return Create_StringArray(options);
            }
            return null;
        }
    }
}
