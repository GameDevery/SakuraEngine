#include <std/std.hpp>
#include <std2/sampler.hpp>
#include <std2/constant_buffer.hpp>

using namespace skr::shader;

struct RootConstants
{
    float ColorMultiplier;
    int bFlipUVX;
    int bFlipUVY;
};

[[push_constant]]
extern ConstantBuffer<RootConstants>& push_constants;

[[binding(0, 0)]]
extern SampleImage& sampled_texture;

[[binding(0, 1)]]
extern Sampler& texture_sampler;

struct [[stage_inout]] VSOut
{
    float2 uv;
};

static const float2 positions[6] = {
    float2(0.5, 0.5),   // RU  0
    float2(-0.5, -0.5), // LD  1
    float2(0.5, -0.5),  // RD  2

    float2(0.5, 0.5),   // RU  3
    float2(-0.5, 0.5),  // LU  4
    float2(-0.5, -0.5)  // LD  5
};

static const float2 uvs[6] = {
    float2(1.0, 1.0),
    float2(0.0, 0.0),
    float2(1.0, 0.0),

    float2(1.0, 1.0),
    float2(0.0, 1.0),
    float2(0.0, 0.0)
};

[[vertex_shader("vs")]]
VSOut vertex([[sv_vertex_id]] uint VertexIndex, [[sv_position]] float4& position)
{
    VSOut output;
    output.uv = uvs[VertexIndex];
    position = float4(positions[VertexIndex], 0.f, 1.f);
    return output;
}

[[fragment_shader("fs")]]
void fragment(VSOut psIn, [[sv_render_target(0)]] float4& color) 
{
    float2 uv = psIn.uv;
    if(push_constants.bFlipUVX) 
        uv.x = 1 - uv.x;
    if(push_constants.bFlipUVY) 
        uv.y = 1 - uv.y;
    color = texture_sampler.Sample(sampled_texture, uv);
}