#include <std/std.hpp>
#include <std2/constant_buffer.hpp>

using namespace skr::shader;

struct [[stage_inout]] VSIn
{
    float3 position;
    float2 uv0;
    float2 uv1;
    float3 normal;
};

struct [[stage_inout]] VSOut
{
    float3 color;
};

struct RootConstants
{
    float4x4 model;
    float4x4 view_proj; // model-view-projection matrix
};

[[push_constant]]
extern ConstantBuffer<RootConstants>& push_constants;

[[vertex_shader("vs")]]
VSOut vs(const VSIn input, [[sv_position]] float4& position)
{
    VSOut output;
    position = float4(input.position, 1.0f) * push_constants.model * push_constants.view_proj;
    // position = float4(input.position, 1.0f) * push_constants.view_proj;
    output.color = float3(1.0f, 1.0f, 0.0f); // red color for debugging
    return output;
}

[[fragment_shader("fs")]]
void fs(const VSOut input, [[sv_render_target(0)]] float4& color)
{
    color = float4(input.color, 1.0f);
}