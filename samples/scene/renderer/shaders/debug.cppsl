#include <std/std.hpp>
#include <std2/constant_buffer.hpp>

using namespace skr::shader;

struct [[stage_inout]] VSIn
{
    float3 position;
    float3 color;
    [[nointerpolation]] float4 model0;
    [[nointerpolation]] float4 model1;
    [[nointerpolation]] float4 model2;
    [[nointerpolation]] float4 model3;
};

struct [[stage_inout]] VSOut
{
    float3 color;
};

struct RootConstants
{
    float4x4 view_proj; // model-view-projection matrix
};

[[push_constant]]
extern ConstantBuffer<RootConstants>& push_constants;

[[vertex_shader("vs")]]
VSOut vs(const VSIn input, [[sv_position]] float4& position)
{
    VSOut output;
    auto model = float4x4(input.model0, input.model1, input.model2, input.model3);
    position = float4(input.position, 1.0f) * model * push_constants.view_proj;
    // position = float4(input.position, 1.0f) * push_constants.view_proj;
    // position = float4(input.position, 1.0f);
    output.color = input.color;
    return output;
}

[[fragment_shader("fs")]]
void fs(const VSOut input, [[sv_render_target(0)]] float4& color)
{
    color = float4(input.color, 1.0f);
}