#!/bin/sh

# Pre-push hook to block pushing sensitive directories
# Supports different rules for different remotes and branches

remote="$1"
url="$2"

# Configuration files in .githooks directory
ENGINE_PROTECTED=".githooks/engine-protected-dirs"

# Check if environment variable to skip check is set
if [ "$SKIP_PROTECTION_CHECK" = "1" ]; then
    exit 0
fi

# Main logic - check different rules based on remote URL
case "$url" in
    *github.com*SakuraEngine*)
        # GitHub repos - use ENGINE_PROTECTED for d5 content
        if [ -f "$ENGINE_PROTECTED" ]; then
            PROTECTED_DIRS=$(grep -v '^#' "$ENGINE_PROTECTED" | grep -v '^$' | tr '\n' ' ')
        else
            PROTECTED_DIRS="d5 d5-* d5_*"
        fi
        
        # Read the commits being pushed
        while read local_ref local_sha remote_ref remote_sha
        do
            # Skip deleted branches
            if [ "$local_sha" = "0000000000000000000000000000000000000000" ]; then
                continue
            fi
            
            # Determine commit range
            if [ "$remote_sha" = "0000000000000000000000000000000000000000" ]; then
                # New branch - check all commits
                range="$local_sha"
            else
                # Existing branch - check new commits
                range="$remote_sha..$local_sha"
            fi
            
            # Check each protected directory
            for dir in $PROTECTED_DIRS; do
                # Check if any commits touch the protected directory
                if git diff --name-only $range 2>/dev/null | grep -q "^$dir"; then
                    echo "❌ ERROR: Cannot push d5-related content to GitHub"
                    echo "   Protected path: $dir"
                    echo ""
                    echo "This push to GitHub has been blocked because it contains"
                    echo "changes to directories that should not be on GitHub."
                    echo ""
                    echo "To override (NOT RECOMMENDED):"
                    echo "  SKIP_PROTECTION_CHECK=1 git push $remote ..."
                    exit 1
                fi
                
                # Also check if directory exists in the tree
                if git ls-tree -r $local_sha --name-only 2>/dev/null | grep -q "^$dir/"; then
                    echo "❌ ERROR: Protected directory exists: $dir"
                    echo ""
                    echo "Cannot push to GitHub - the branch contains protected directories."
                    exit 1
                fi
            done
        done
        ;;
esac

exit 0