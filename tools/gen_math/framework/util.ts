import path from "node:path";
import * as fs from "node:fs";

export class CodeBuilder {
  indent_unit: number = 4;
  #indent_stack: number[] = [];
  #indent: number = 0;
  #content: string = "";

  // utils
  is_empty(): boolean { return this.#content.length == 0; }

  // indent
  #push_indent(count: number = 1): void {
    this.#indent_stack.push(count);
    this.#indent += count;
  }
  #pop_indent(): void {
    if (this.#indent_stack.length == 0) {
      throw new Error("indent stack is empty");
    }
    this.#indent -= this.#indent_stack.pop()!;
  }

  // codegen tools
  $line(code: string): void {
    if (this.#indent == 0) {
      this.#content += `${code}\n`;
    } else {
      const indent_str = " ".repeat(this.#indent * this.indent_unit);
      this.#content += `${indent_str}${code}\n`;
    }
  }
  $indent(content: (b: CodeBuilder) => void): void {
    this.#push_indent();
    content(this);
    this.#pop_indent();
  }
  $indent_n(n: number, content: (b: CodeBuilder) => void): void {
    this.#push_indent(n);
    content(this);
    this.#pop_indent();
  }

  // utils
  $util_header(): void {
    const hint_content = `This file is auto-generated by gen_math, do not edit it manually.`;
    const hint_lines = hint_content.split("\n");
    const max_len = Math.max(...hint_lines.map(line => line.length));
    const border_count = 2;
    const padding_count = 2;
    const line_len = max_len + border_count * 2 + padding_count * 2;
    const fill_line = '*'.repeat(line_len);
    const border = '*'.repeat(border_count);
    const padding = ' '.repeat(padding_count);

    // dump hint
    this.$line(`//! ${fill_line}`)
    for (const line of hint_lines) {
      this.$line(`//! ${border}${padding}${line.padEnd(max_len)}${padding}${border}`)
    }
    this.$line(`//! ${fill_line}`)

    // dump pragma once
    this.$line(``)
    this.$line("#pragma once")
  }

  // to string
  to_string(): string {
    return this.#content;
  }

  // write to file
  write_file(out_path: string) {
    const out_dir = path.dirname(out_path);

    // make dir
    if (!fs.existsSync(out_dir)) {
      fs.mkdirSync(out_dir, { recursive: true });
    }

    // write file
    fs.writeFileSync(out_path, this.to_string(), { encoding: "utf-8" });
  }
}